[
    {
        "id": "8b2f55df6cf1250b",
        "type": "tab",
        "label": "Trade on RSI-GOOG",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8749bfdbd2b7665a",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "create Alpaca buy or sell order ",
        "func": "let alpaca_ticker = msg.symbol\nlet algo_name = msg.algo_name\nlet price = msg.price\nlet qty = msg.size\nlet rsi = msg.rsi\nlet pos = msg.pos\nlet profit = msg.profit\nprice = +price\nprice = price.toFixed(2)\n\n\nnode.warn(\"Algoname: \" +algo_name+ \" Ticker: \" +alpaca_ticker+ \" Qty: \" +qty+ \" Position: \" +pos+ \" Price: \" +price+ \" RSI: \" +rsi)\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = alpaca_ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\nlet temp = ''\nlet side = 'buy'\n\n\n// CASE 1: Holding More than 100 Shares Short \n\nif (pos < -100) {\n    side = 'buy'\n    qty = (pos * -1)\n    node.warn(\"CASE 1: Holding More than 100 Shares Short\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 28\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 24\n\n\n// CASE 2: Holding More than 100 Shares Long \n\nelse if (pos > 100) {\n    side = 'sell'\n    node.warn(\"CASE 2: Holding More than 100 Shares Long \")\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 51\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 48\n\n// CASE 3: No position held. RSI indictaes Sell\n\nif ((rsi > msg.rsi_sell) && (pos == 0)) {\n    side = 'sell'\n    node.warn(\"CASE 3: No position held. RSI indictaes Sell\")\n\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 72\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 69\n\n// CASE 4 No position held buy RSI indicates Buy\n\nelse if ((rsi < msg.rsi_buy) && (pos == 0)) {\n    side = 'buy'\n    node.warn(\"CASE 4 No position held buy RSI indicates Buy\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 93\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 90\n\n\n// CASE 5: Holding Long Position\n\nelse if ( (rsi > msg.rsi_sell) && (pos > 0) ) {\n    side = 'sell'\n    qty = pos\n    node.warn(\"CASE 5: Holding Long Position and RSI indicates sell\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 116\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 112\n\n\n// CASE 6: Holding Short Position\n\nelse if ((rsi > msg.rsi_buy) && (pos < 0)) {\n    side = 'buy'\n    qty = (pos * -1)\n    node.warn(\"CASE 6: Holding Short Position and RSI indicates buy\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 139\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 135\n\n\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            [
                "79532af110be3ac4"
            ]
        ]
    },
    {
        "id": "11e45552b460b441",
        "type": "comment",
        "z": "8b2f55df6cf1250b",
        "name": "Sample RSI Flow Trading GOOG",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "90776ed271da0a25",
        "type": "inject",
        "z": "8b2f55df6cf1250b",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "1a7152f478d19276"
            ]
        ]
    },
    {
        "id": "21cb1e49eb60938f",
        "type": "delay",
        "z": "8b2f55df6cf1250b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 400,
        "wires": [
            [
                "b15c62828b13b01c"
            ]
        ]
    },
    {
        "id": "91f2010389c076d6",
        "type": "inject",
        "z": "8b2f55df6cf1250b",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "dde7e6d912791c6f"
            ]
        ]
    },
    {
        "id": "79532af110be3ac4",
        "type": "alpaca-order",
        "z": "8b2f55df6cf1250b",
        "conf": "c06cec183f9317f9",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "13d3e912160e1676"
            ]
        ]
    },
    {
        "id": "13d3e912160e1676",
        "type": "debug",
        "z": "8b2f55df6cf1250b",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 460,
        "wires": []
    },
    {
        "id": "a4610640c77d1606",
        "type": "alpaca-orders-close",
        "z": "8b2f55df6cf1250b",
        "conf": "c06cec183f9317f9",
        "name": "",
        "x": 510,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "d92a09e2a96402c6",
        "type": "http in",
        "z": "8b2f55df6cf1250b",
        "name": "/api/download_GOOG",
        "url": "/api/download_GOOG",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 620,
        "wires": [
            [
                "26180a94c5489421"
            ]
        ]
    },
    {
        "id": "072f52d45a8d9eda",
        "type": "http response",
        "z": "8b2f55df6cf1250b",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 930,
        "y": 620,
        "wires": []
    },
    {
        "id": "427ace0eaa08d7d5",
        "type": "csv",
        "z": "8b2f55df6cf1250b",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 650,
        "y": 620,
        "wires": [
            [
                "bed98771fb191d26"
            ]
        ]
    },
    {
        "id": "26180a94c5489421",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "export query",
        "func": "let d = new Date().toJSON().slice(0, 10);\nmsg.query = \"select * from orders_paper where symbol like 'GOOG';\"\n//msg.query = \"select * from orders_paper where symbol like 'GOOG' and created_at like '\" +d+ \"%';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 620,
        "wires": [
            [
                "d3bdf6523557de2a"
            ]
        ]
    },
    {
        "id": "bed98771fb191d26",
        "type": "file",
        "z": "8b2f55df6cf1250b",
        "name": "write report",
        "filename": "/data/store/goog_paper.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 620,
        "wires": [
            [
                "072f52d45a8d9eda"
            ]
        ]
    },
    {
        "id": "d3bdf6523557de2a",
        "type": "postgresql",
        "z": "8b2f55df6cf1250b",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 620,
        "wires": [
            [
                "427ace0eaa08d7d5"
            ]
        ]
    },
    {
        "id": "1a7152f478d19276",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "trading interval ",
        "func": "let d = new Date();\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay();\nlet sec = d.getSeconds();\n\n//node.warn(\"Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n//if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 300,
        "wires": [
            [
                "a4610640c77d1606",
                "21cb1e49eb60938f"
            ]
        ]
    },
    {
        "id": "2443ba715165dffa",
        "type": "comment",
        "z": "8b2f55df6cf1250b",
        "name": "Polygon defaults are: window-14 . Recommend window - 6 from testing.",
        "info": "",
        "x": 660,
        "y": 80,
        "wires": []
    },
    {
        "id": "991dd9b3ed24a789",
        "type": "comment",
        "z": "8b2f55df6cf1250b",
        "name": "download csv file",
        "info": "",
        "x": 161,
        "y": 571,
        "wires": []
    },
    {
        "id": "1393d4121175eaec",
        "type": "comment",
        "z": "8b2f55df6cf1250b",
        "name": "set trade vars",
        "info": "",
        "x": 390,
        "y": 360,
        "wires": []
    },
    {
        "id": "a39d1ef246153f1c",
        "type": "inject",
        "z": "8b2f55df6cf1250b",
        "name": "every sec",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "51331b0502eaf29b"
            ]
        ]
    },
    {
        "id": "395a2f8599ac9864",
        "type": "comment",
        "z": "8b2f55df6cf1250b",
        "name": "Get current price of the asset from Polygon",
        "info": "",
        "x": 220,
        "y": 740,
        "wires": []
    },
    {
        "id": "d5ce4a23d937c6c8",
        "type": "function-npm",
        "z": "8b2f55df6cf1250b",
        "name": "Get lasttrades",
        "func": "let symbol = 'GOOG'\nlet cnt = 1 // last trade\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 780,
        "wires": [
            [
                "7716192156ba7d85"
            ]
        ]
    },
    {
        "id": "7716192156ba7d85",
        "type": "polygon-last-trade-v3",
        "z": "8b2f55df6cf1250b",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 700,
        "y": 780,
        "wires": [
            [
                "7b24a89ec9ae1456"
            ]
        ]
    },
    {
        "id": "7b24a89ec9ae1456",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "display price",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\nmsg.price = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 780,
        "wires": [
            [
                "832b3ba861b2049c"
            ]
        ]
    },
    {
        "id": "832b3ba861b2049c",
        "type": "change",
        "z": "8b2f55df6cf1250b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "price",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "cbc42c6dfc7686a8",
        "type": "comment",
        "z": "8b2f55df6cf1250b",
        "name": "set ticker on line 1",
        "info": "",
        "x": 510,
        "y": 740,
        "wires": []
    },
    {
        "id": "51331b0502eaf29b",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "trading interval ",
        "func": "let d = new Date();\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay();\nlet sec = d.getSeconds();\n\n//node.warn(\"Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n//if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 780,
        "wires": [
            [
                "d5ce4a23d937c6c8"
            ]
        ]
    },
    {
        "id": "0d55e3670b922aa1",
        "type": "comment",
        "z": "8b2f55df6cf1250b",
        "name": "Enable frontend reporting",
        "info": "",
        "x": 150,
        "y": 880,
        "wires": []
    },
    {
        "id": "66f4a5a81670f9cf",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "define values required for adding trade to portfolio",
        "func": "// create a unique algo_id with current unixtime\nlet d = Date.now()\n\nmsg.id = d\nmsg.login = global.get(\"login\")\nmsg.ticker = flow.get(\"symbol\")\nmsg.algo_name = flow.get(\"algo_name\")\nmsg.asset_class = 'stocks'\nmsg.number = 1\nmsg.target = ''\nmsg.account = flow.get(\"account\")\nmsg.psize = flow.get(\"psize\")\nmsg.status = 'running'\nmsg.algo_type = 'intraday'\nmsg.benchmark = 'SPY'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 940,
        "wires": [
            [
                "f4316b6da7978951"
            ]
        ]
    },
    {
        "id": "81ae246a7589b180",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "delete from tickers",
        "func": "let id = msg.id\nlet symbol = msg.ticker\nlet portfolioname = msg.algo_name\nmsg.query = \"delete from tickers_\" +msg.account+ \" where symbol like '\" +symbol+ \"';\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1000,
        "wires": [
            [
                "fc7fcab41dc2936e"
            ]
        ]
    },
    {
        "id": "fc7fcab41dc2936e",
        "type": "postgresql",
        "z": "8b2f55df6cf1250b",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 1000,
        "wires": [
            [
                "105b0f81e89ade63"
            ]
        ]
    },
    {
        "id": "f4316b6da7978951",
        "type": "delay",
        "z": "8b2f55df6cf1250b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1020,
        "y": 940,
        "wires": [
            [
                "acf6c376ea221f2a"
            ]
        ]
    },
    {
        "id": "bea6b96aa55f83ad",
        "type": "postgresql",
        "z": "8b2f55df6cf1250b",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 240,
        "y": 1000,
        "wires": [
            [
                "81ae246a7589b180"
            ]
        ]
    },
    {
        "id": "9ce8d77d8ebafdaf",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "delete existing algo",
        "func": "msg.algo_name = flow.get(\"algo_name\")\nmsg.query = \"delete from algos where algo_name = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 940,
        "wires": [
            [
                "12e06d394870f1f0"
            ]
        ]
    },
    {
        "id": "12e06d394870f1f0",
        "type": "postgresql",
        "z": "8b2f55df6cf1250b",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 460,
        "y": 940,
        "wires": [
            [
                "66f4a5a81670f9cf"
            ]
        ]
    },
    {
        "id": "105b0f81e89ade63",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "insert into tickers_paper",
        "func": "let id = msg.id\nlet symbol = msg.symbol\nlet portfolioname = msg.algo_name\nmsg.query = \"insert into tickers_\" +msg.account+ \" (id, symbol, portfolioname) values (\" + id + \",'\" + symbol + \"', '\" + portfolioname + \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1000,
        "wires": [
            [
                "b103a9483bbe50d1"
            ]
        ]
    },
    {
        "id": "b103a9483bbe50d1",
        "type": "postgresql",
        "z": "8b2f55df6cf1250b",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "acf6c376ea221f2a",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "add values to algos table",
        "func": "let id = msg.id\nlet ticker = msg.tickers\nlet algo_name = msg.algo_name\nlet login = msg.login\nlet asset_class = msg.asset_class\nlet number = msg.number\nlet target = msg.target\nlet account = msg.account\nlet psize = msg.psize\nlet algo_type = msg.algo_type\nlet status = msg.status\nlet benchmark = msg.benchmark\n\nlet benchmark_start = global.get(\"spy_current\")\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 940,
        "wires": [
            [
                "bea6b96aa55f83ad"
            ]
        ]
    },
    {
        "id": "6b46537abe925440",
        "type": "inject",
        "z": "8b2f55df6cf1250b",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 940,
        "wires": [
            [
                "9ce8d77d8ebafdaf"
            ]
        ]
    },
    {
        "id": "b15c62828b13b01c",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "Store Flow Variables",
        "func": "let d = new Date().toJSON().slice(0, 10);\n//node.warn(d)\n\n// enter desired values below\nmsg.symbol = 'GOOG'\nmsg.window = 6 // lookback window\nmsg.cnt = 1 // get most recent value\nmsg.timestamp = d\nmsg.timespan = 'minute'\nmsg.algo_name = \"Trade GOOG on RSI [paper]\"\nmsg.psize = 15000 // size of portfolio\nmsg.size = 100 // shares to trade\nmsg.account = 'paper'\nmsg.rsi_buy = 30\nmsg.rsi_sell = 70\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "deccfea45946bce8"
            ]
        ]
    },
    {
        "id": "1f1c60a7deeaa37b",
        "type": "comment",
        "z": "8b2f55df6cf1250b",
        "name": "set orders_paper or order_paper",
        "info": "",
        "x": 400,
        "y": 580,
        "wires": []
    },
    {
        "id": "c291e9d647590447",
        "type": "function-npm",
        "z": "8b2f55df6cf1250b",
        "name": "RSI vars",
        "func": "let symbol = msg.symbol\nlet window = msg.window\nlet cnt = msg.cnt\nlet timestamp = msg.timestamp\nlet timespan = msg.timespan\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    window: window,\n    limit: cnt,\n    timestamp: timestamp,\n    timespan: timespan,\n}\n\nmsg.symbol = symbol\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 400,
        "wires": [
            [
                "663ee6e5e11545ce"
            ]
        ]
    },
    {
        "id": "663ee6e5e11545ce",
        "type": "polygon-rsi",
        "z": "8b2f55df6cf1250b",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "timestamp": "",
        "timespan": "minute",
        "window": "",
        "limit": "",
        "x": 910,
        "y": 400,
        "wires": [
            [
                "9d9962cbd8ea9873"
            ]
        ]
    },
    {
        "id": "9d9962cbd8ea9873",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "store RSI",
        "func": "//node.warn(msg.payload.results)\nmsg.profit = flow.get(\"profit\")\nmsg.pos = flow.get(\"pos\")\nmsg.price = flow.get(\"price\")\n\nlet ux = 0\nlet rsi = 0\nlet item = 0\n\nfor (item of msg.payload.results.values) {\n    ux = item.timestamp\n    rsi = item.value\n}\n\nrsi = rsi.toFixed(2) \nmsg.rsi = rsi\n\nvar unixTimestamp = ux;\nvar d = new Date(unixTimestamp);\n\nlet lt = d.toLocaleTimeString(\"en-US\");\nnode.warn(\"Time: \" + lt + \" RSI: \" + rsi+ \" Position: \" +msg.pos+ \" Profit: \" +msg.profit+ \" Price: \" +msg.price)\nmsg.query = \"insert into goog_rsi (datetime, value, position, profit, price) values ('\" +lt+ \"',\" +rsi+ \",\" +msg.pos+ \",\" +msg.profit+ \",\" +msg.price+ \");\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 400,
        "wires": [
            [
                "8749bfdbd2b7665a",
                "11b598562247fe09"
            ]
        ]
    },
    {
        "id": "deccfea45946bce8",
        "type": "change",
        "z": "8b2f55df6cf1250b",
        "name": "Store flow vars",
        "rules": [
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "size",
                "pt": "flow",
                "to": "size",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "symbol",
                "pt": "flow",
                "to": "symbol",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 400,
        "wires": [
            [
                "c291e9d647590447"
            ]
        ]
    },
    {
        "id": "11b598562247fe09",
        "type": "postgresql",
        "z": "8b2f55df6cf1250b",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "2a4712afdfab9731",
        "type": "http in",
        "z": "8b2f55df6cf1250b",
        "name": "/api/download_goog_rsi",
        "url": "/api/download_goog_rsi",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 660,
        "wires": [
            [
                "13d0f0c57cf7a1be"
            ]
        ]
    },
    {
        "id": "24d01299863c0c1c",
        "type": "http response",
        "z": "8b2f55df6cf1250b",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 950,
        "y": 660,
        "wires": []
    },
    {
        "id": "48b54660f56d74c0",
        "type": "csv",
        "z": "8b2f55df6cf1250b",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 670,
        "y": 660,
        "wires": [
            [
                "4ec9573d5f6829e4"
            ]
        ]
    },
    {
        "id": "13d0f0c57cf7a1be",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "export query",
        "func": "msg.query = \"select * from goog_rsi;\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 660,
        "wires": [
            [
                "a99ae13795de6c27"
            ]
        ]
    },
    {
        "id": "4ec9573d5f6829e4",
        "type": "file",
        "z": "8b2f55df6cf1250b",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 660,
        "wires": [
            [
                "24d01299863c0c1c"
            ]
        ]
    },
    {
        "id": "a99ae13795de6c27",
        "type": "postgresql",
        "z": "8b2f55df6cf1250b",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 660,
        "wires": [
            [
                "48b54660f56d74c0"
            ]
        ]
    },
    {
        "id": "e612ba37f54b4879",
        "type": "alpaca-position-query",
        "z": "8b2f55df6cf1250b",
        "conf": "c06cec183f9317f9",
        "x": 710,
        "y": 240,
        "wires": [
            [
                "de41238808f29020"
            ]
        ]
    },
    {
        "id": "088ca9864a02c5b4",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "create msg.vars for ticker",
        "func": "let ticker = flow.get(\"ticker\")\nticker = 'GOOG'\n\nif (msg.payload[\"symbol\"] == ticker ){\n    \n//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\n//node.warn(qty)\nmsg.qty = qty\nmsg.profit = unrealized_pl\nmsg.ticker = symbol\nmsg.price = current_price\nnode.warn(\"Ticker: \" + msg.ticker + \" Price: \" + msg.price + \" Profit: \" + msg.profit + \" Buy Qty: \" + msg.qty)\nreturn msg;\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 240,
        "wires": [
            [
                "d84800238416523c"
            ]
        ]
    },
    {
        "id": "de41238808f29020",
        "type": "split",
        "z": "8b2f55df6cf1250b",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 890,
        "y": 240,
        "wires": [
            [
                "088ca9864a02c5b4"
            ]
        ]
    },
    {
        "id": "97b0a88a33750b99",
        "type": "change",
        "z": "8b2f55df6cf1250b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pos",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 240,
        "wires": [
            [
                "e612ba37f54b4879"
            ]
        ]
    },
    {
        "id": "c7c2a7dcd50be5f6",
        "type": "comment",
        "z": "8b2f55df6cf1250b",
        "name": "set ticker on line 2",
        "info": "",
        "x": 1070,
        "y": 200,
        "wires": []
    },
    {
        "id": "dde7e6d912791c6f",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "trading interval ",
        "func": "let d = new Date();\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay();\nlet sec = d.getSeconds();\n\n//node.warn(\"Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n//if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 240,
        "wires": [
            [
                "97b0a88a33750b99"
            ]
        ]
    },
    {
        "id": "d84800238416523c",
        "type": "change",
        "z": "8b2f55df6cf1250b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pos",
                "pt": "flow",
                "to": "qty",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "profit",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "685d7b20635ac1c2",
        "type": "function",
        "z": "8b2f55df6cf1250b",
        "name": "create table goog_rsi",
        "func": "msg.query = \"create table IF NOT EXISTS goog_rsi (datetime VARCHAR(40), value FLOAT, position FLOAT, profit FLOAT, price FLOAT)\"\n//msg.query = \"select * from goog_rsi;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1120,
        "wires": [
            [
                "0ac94b771b750b11"
            ]
        ]
    },
    {
        "id": "8643bf445a80c25b",
        "type": "inject",
        "z": "8b2f55df6cf1250b",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1120,
        "wires": [
            [
                "685d7b20635ac1c2"
            ]
        ]
    },
    {
        "id": "b20fd5cf6f90ce15",
        "type": "debug",
        "z": "8b2f55df6cf1250b",
        "name": "debug 404",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1120,
        "wires": []
    },
    {
        "id": "0ac94b771b750b11",
        "type": "postgresql",
        "z": "8b2f55df6cf1250b",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 1120,
        "wires": [
            [
                "b20fd5cf6f90ce15"
            ]
        ]
    },
    {
        "id": "0c28429ae5b51828",
        "type": "comment",
        "z": "8b2f55df6cf1250b",
        "name": "create goog_rsi table",
        "info": "",
        "x": 140,
        "y": 1080,
        "wires": []
    },
    {
        "id": "03f9cf16c1b5fc54",
        "type": "inject",
        "z": "8b2f55df6cf1250b",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 400,
        "wires": [
            [
                "21cb1e49eb60938f"
            ]
        ]
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "USE-OAUTH-OR-REPLACE",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]