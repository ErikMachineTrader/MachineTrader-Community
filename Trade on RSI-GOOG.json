[
    {
        "id": "1c31412f8d65b8ab",
        "type": "tab",
        "label": "Trade on RSI-GOOG",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "246e388f4ec70324",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "create Alpaca buy or sell order ",
        "func": "let alpaca_ticker = msg.symbol\nlet algo_name = msg.algo_name\nlet price = msg.price\nlet qty = msg.size\nlet rsi = msg.rsi\nlet pos = msg.pos\nlet profit = msg.profit\nprice = +price\nprice = price.toFixed(2)\n\n\n//node.warn(\"Algoname: \" +algo_name+ \" Ticker: \" +alpaca_ticker+ \" Qty: \" +qty+ \" Position: \" +pos+ \" Price: \" +price+ \" RSI: \" +rsi)\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = alpaca_ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\nlet temp = ''\nlet side = 'buy'\n\n\n// CASE 1: Holding More than 100 Shares Short \n\nif (pos < -100) {\n    side = 'buy'\n    qty = (pos * -1)\n    node.warn(\"CASE 1: Holding More than 100 Shares Short\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 28\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 24\n\n\n// CASE 2: Holding More than 100 Shares Long \n\nelse if (pos > 100) {\n    side = 'sell'\n    node.warn(\"CASE 2: Holding More than 100 Shares Long \")\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 51\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 48\n\n// CASE 3: No position held. RSI indictaes Sell\n\nif ((rsi > msg.rsi_sell) && (pos == 0)) {\n    side = 'sell'\n    node.warn(\"CASE 3: No position held. RSI indictaes Sell\")\n\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 72\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 69\n\n// CASE 4 No position held buy RSI indicates Buy\n\nelse if ((rsi < msg.rsi_buy) && (pos == 0)) {\n    side = 'buy'\n    node.warn(\"CASE 4 No position held buy RSI indicates Buy\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 93\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 90\n\n\n// CASE 5: Holding Long Position\n\nelse if ( (rsi > msg.rsi_sell) && (pos > 0) ) {\n    side = 'sell'\n    qty = pos\n    node.warn(\"CASE 5: Holding Long Position and RSI indicates sell\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 116\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 112\n\n\n// CASE 6: Holding Short Position\n\nelse if ((rsi > msg.rsi_buy) && (pos < 0)) {\n    side = 'buy'\n    qty = (pos * -1)\n    node.warn(\"CASE 6: Holding Short Position and RSI indicates buy\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 139\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 135\n\n\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            [
                "d98275c3ab60bdc1"
            ]
        ]
    },
    {
        "id": "3d6e1abef12533b9",
        "type": "comment",
        "z": "1c31412f8d65b8ab",
        "name": "Sample RSI Flow Trading GOOG",
        "info": "",
        "x": 190,
        "y": 100,
        "wires": []
    },
    {
        "id": "874a75e11971a755",
        "type": "inject",
        "z": "1c31412f8d65b8ab",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "95bee09207de60bf"
            ]
        ]
    },
    {
        "id": "a0febdcfb5caf651",
        "type": "delay",
        "z": "1c31412f8d65b8ab",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 400,
        "wires": [
            [
                "ed2fd5f5f908cfed"
            ]
        ]
    },
    {
        "id": "1ee35b5ea8d46a63",
        "type": "inject",
        "z": "1c31412f8d65b8ab",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "91344bf325559c71"
            ]
        ]
    },
    {
        "id": "8e4924b4c9057a34",
        "type": "alpaca-position-query",
        "z": "1c31412f8d65b8ab",
        "conf": "810ce3520dc18040",
        "x": 490,
        "y": 240,
        "wires": [
            [
                "2bd4f7306e5c648d"
            ]
        ]
    },
    {
        "id": "3753e1b12b3e0f57",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "create msg.vars for ticker",
        "func": "let ticker = flow.get(\"ticker\")\nticker = 'GOOG'\n\nif (msg.payload[\"symbol\"] == ticker ){\n    \n//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\n//node.warn(qty)\nmsg.qty = qty\nmsg.profit = unrealized_pl\nmsg.ticker = symbol\nmsg.price = current_price\nnode.warn(\"Ticker: \" + msg.ticker + \" Price: \" + msg.price + \" Profit: \" + msg.profit + \" Buy Qty: \" + msg.qty)\nreturn msg;\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 240,
        "wires": [
            [
                "d795e70cc0b6ed1f"
            ]
        ]
    },
    {
        "id": "2bd4f7306e5c648d",
        "type": "split",
        "z": "1c31412f8d65b8ab",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 240,
        "wires": [
            [
                "3753e1b12b3e0f57"
            ]
        ]
    },
    {
        "id": "d795e70cc0b6ed1f",
        "type": "change",
        "z": "1c31412f8d65b8ab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pos",
                "pt": "flow",
                "to": "qty",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "91344bf325559c71",
        "type": "change",
        "z": "1c31412f8d65b8ab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pos",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 240,
        "wires": [
            [
                "8e4924b4c9057a34"
            ]
        ]
    },
    {
        "id": "d98275c3ab60bdc1",
        "type": "alpaca-order",
        "z": "1c31412f8d65b8ab",
        "conf": "810ce3520dc18040",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "468e1d7de4cf0077"
            ]
        ]
    },
    {
        "id": "468e1d7de4cf0077",
        "type": "debug",
        "z": "1c31412f8d65b8ab",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 460,
        "wires": []
    },
    {
        "id": "b19a26b672d72919",
        "type": "alpaca-orders-close",
        "z": "1c31412f8d65b8ab",
        "conf": "810ce3520dc18040",
        "name": "",
        "x": 530,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "47362bfb0bc001a9",
        "type": "comment",
        "z": "1c31412f8d65b8ab",
        "name": "set ticker on line 2",
        "info": "",
        "x": 850,
        "y": 200,
        "wires": []
    },
    {
        "id": "423d417858e68fd5",
        "type": "http in",
        "z": "1c31412f8d65b8ab",
        "name": "/api/download_GOOG",
        "url": "/api/download_GOOG",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 620,
        "wires": [
            [
                "7ded79f4a98c44af"
            ]
        ]
    },
    {
        "id": "c50de7ba5169fb21",
        "type": "http response",
        "z": "1c31412f8d65b8ab",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 930,
        "y": 620,
        "wires": []
    },
    {
        "id": "670a5195754cb9d6",
        "type": "csv",
        "z": "1c31412f8d65b8ab",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 650,
        "y": 620,
        "wires": [
            [
                "a2799c2a6fc3ead1"
            ]
        ]
    },
    {
        "id": "7ded79f4a98c44af",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "export query",
        "func": "msg.query = \"select * from orders_live where symbol like 'GOOG';\"\n//msg.query = \"select * from orders_live where symbol like 'GOOG' and created_at like '2023-05-11%';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 620,
        "wires": [
            [
                "851d0e4370b95449"
            ]
        ]
    },
    {
        "id": "a2799c2a6fc3ead1",
        "type": "file",
        "z": "1c31412f8d65b8ab",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 620,
        "wires": [
            [
                "c50de7ba5169fb21"
            ]
        ]
    },
    {
        "id": "851d0e4370b95449",
        "type": "postgresql",
        "z": "1c31412f8d65b8ab",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 620,
        "wires": [
            [
                "670a5195754cb9d6"
            ]
        ]
    },
    {
        "id": "95bee09207de60bf",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "trading interval ",
        "func": "let d = new Date();\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay();\nlet sec = d.getSeconds();\n\n//node.warn(\"Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n//if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 300,
        "wires": [
            [
                "b19a26b672d72919",
                "a0febdcfb5caf651"
            ]
        ]
    },
    {
        "id": "0352ba1ef7227177",
        "type": "comment",
        "z": "1c31412f8d65b8ab",
        "name": "Polygon defaults are: window-14 . Recommend window - 6 from testing.",
        "info": "",
        "x": 660,
        "y": 80,
        "wires": []
    },
    {
        "id": "204be431b68094fa",
        "type": "comment",
        "z": "1c31412f8d65b8ab",
        "name": "download csv file",
        "info": "",
        "x": 161,
        "y": 571,
        "wires": []
    },
    {
        "id": "1ae46227fcb225a4",
        "type": "comment",
        "z": "1c31412f8d65b8ab",
        "name": "set trade vars",
        "info": "",
        "x": 390,
        "y": 360,
        "wires": []
    },
    {
        "id": "fa86c379f3812fb7",
        "type": "inject",
        "z": "1c31412f8d65b8ab",
        "name": "every sec",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "9bf99985dc11e902"
            ]
        ]
    },
    {
        "id": "5fa168cdad48d02f",
        "type": "comment",
        "z": "1c31412f8d65b8ab",
        "name": "Get current price of the asset from Polygon",
        "info": "",
        "x": 240,
        "y": 700,
        "wires": []
    },
    {
        "id": "a354b3ccf44df4cd",
        "type": "function-npm",
        "z": "1c31412f8d65b8ab",
        "name": "Get lasttrades",
        "func": "let symbol = 'GOOG'\nlet cnt = 1 // last trade\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 780,
        "wires": [
            [
                "2bfe075198d6ab91"
            ]
        ]
    },
    {
        "id": "2bfe075198d6ab91",
        "type": "polygon-last-trade-v3",
        "z": "1c31412f8d65b8ab",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 700,
        "y": 780,
        "wires": [
            [
                "1dc679349b0be1a1"
            ]
        ]
    },
    {
        "id": "1dc679349b0be1a1",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "display price",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\nmsg.price = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 780,
        "wires": [
            [
                "8c6fb9036ea6b6b6"
            ]
        ]
    },
    {
        "id": "8c6fb9036ea6b6b6",
        "type": "change",
        "z": "1c31412f8d65b8ab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "price",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "2f6c3cf46f48e74d",
        "type": "comment",
        "z": "1c31412f8d65b8ab",
        "name": "set ticker on line 1",
        "info": "",
        "x": 510,
        "y": 740,
        "wires": []
    },
    {
        "id": "9bf99985dc11e902",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "trading interval ",
        "func": "let d = new Date();\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay();\nlet sec = d.getSeconds();\n\n//node.warn(\"Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n//if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 780,
        "wires": [
            [
                "a354b3ccf44df4cd"
            ]
        ]
    },
    {
        "id": "a339fa8d7b39c6b5",
        "type": "comment",
        "z": "1c31412f8d65b8ab",
        "name": "Enable frontend reporting",
        "info": "",
        "x": 150,
        "y": 880,
        "wires": []
    },
    {
        "id": "d5fa8d1bb8928270",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "define values required for adding trade to portfolio",
        "func": "// create a unique algo_id with current unixtime\nlet d = Date.now()\n\nmsg.id = d\nmsg.login = global.get(\"login\")\nmsg.ticker = flow.get(\"symbol\")\nmsg.algo_name = flow.get(\"algo_name\")\nmsg.asset_class = 'stocks'\nmsg.number = 1\nmsg.target = ''\nmsg.account = flow.get(\"account\")\nmsg.psize = flow.get(\"psize\")\nmsg.status = 'running'\nmsg.algo_type = 'intraday'\nmsg.benchmark = 'SPY'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 940,
        "wires": [
            [
                "0561b944f9adc11c"
            ]
        ]
    },
    {
        "id": "861d9314189eac2c",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "delete from tickers",
        "func": "let id = msg.id\nlet symbol = msg.ticker\nlet portfolioname = msg.algo_name\nmsg.query = \"delete from tickers_\" +msg.account+ \" where symbol like '\" +symbol+ \"';\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1000,
        "wires": [
            [
                "e0833cd95134f250"
            ]
        ]
    },
    {
        "id": "e0833cd95134f250",
        "type": "postgresql",
        "z": "1c31412f8d65b8ab",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 1000,
        "wires": [
            [
                "1f482e9cc3198cb1"
            ]
        ]
    },
    {
        "id": "0561b944f9adc11c",
        "type": "delay",
        "z": "1c31412f8d65b8ab",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1020,
        "y": 940,
        "wires": [
            [
                "cfecb939f03d7475"
            ]
        ]
    },
    {
        "id": "38512e5343a91080",
        "type": "postgresql",
        "z": "1c31412f8d65b8ab",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 240,
        "y": 1000,
        "wires": [
            [
                "861d9314189eac2c"
            ]
        ]
    },
    {
        "id": "deeb0ce952756779",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "delete existing algo",
        "func": "msg.algo_name = flow.get(\"algo_name\")\nmsg.query = \"delete from algos where algo_name = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 940,
        "wires": [
            [
                "bbca6aa5e6d65f90"
            ]
        ]
    },
    {
        "id": "bbca6aa5e6d65f90",
        "type": "postgresql",
        "z": "1c31412f8d65b8ab",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 460,
        "y": 940,
        "wires": [
            [
                "d5fa8d1bb8928270"
            ]
        ]
    },
    {
        "id": "1f482e9cc3198cb1",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "insert into tickers_paper",
        "func": "let id = msg.id\nlet symbol = msg.symbol\nlet portfolioname = msg.algo_name\nmsg.query = \"insert into tickers_\" +msg.account+ \" (id, symbol, portfolioname) values (\" + id + \",'\" + symbol + \"', '\" + portfolioname + \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1000,
        "wires": [
            [
                "bf105c9a7b1e4d8a"
            ]
        ]
    },
    {
        "id": "bf105c9a7b1e4d8a",
        "type": "postgresql",
        "z": "1c31412f8d65b8ab",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "cfecb939f03d7475",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "add values to algos table",
        "func": "let id = msg.id\nlet ticker = msg.tickers\nlet algo_name = msg.algo_name\nlet login = msg.login\nlet asset_class = msg.asset_class\nlet number = msg.number\nlet target = msg.target\nlet account = msg.account\nlet psize = msg.psize\nlet algo_type = msg.algo_type\nlet status = msg.status\nlet benchmark = msg.benchmark\n\nlet benchmark_start = global.get(\"spy_current\")\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 940,
        "wires": [
            [
                "38512e5343a91080"
            ]
        ]
    },
    {
        "id": "353c886a95f8c0f8",
        "type": "inject",
        "z": "1c31412f8d65b8ab",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 940,
        "wires": [
            [
                "deeb0ce952756779"
            ]
        ]
    },
    {
        "id": "ed2fd5f5f908cfed",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "Store Flow Variables",
        "func": "let d = new Date().toJSON().slice(0, 10);\n//node.warn(d)\n\n// enter desired values below\nmsg.symbol = 'GOOG'\nmsg.window = 6 // lookback window\nmsg.cnt = 1 // get most recent value\nmsg.timestamp = d\nmsg.timespan = 'minute'\nmsg.algo_name = \"Trade GOOG on RSI [LIVE]\"\nmsg.psize = 150 // size of portfolio\nmsg.size = 1 // shares to trade\nmsg.account = 'live'\nmsg.rsi_buy = 40\nmsg.rsi_sell = 70\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "88b686b6f0eaadc0"
            ]
        ]
    },
    {
        "id": "2914236243ab3756",
        "type": "comment",
        "z": "1c31412f8d65b8ab",
        "name": "set orders_live or order_paper",
        "info": "",
        "x": 400,
        "y": 580,
        "wires": []
    },
    {
        "id": "1d50edd6e10b1a73",
        "type": "function-npm",
        "z": "1c31412f8d65b8ab",
        "name": "RSI vars",
        "func": "let symbol = msg.symbol\nlet window = msg.window\nlet cnt = msg.cnt\nlet timestamp = msg.timestamp\nlet timespan = msg.timespan\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    window: window,\n    limit: cnt,\n    timestamp: timestamp,\n    timespan: timespan,\n}\n\nmsg.symbol = symbol\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 400,
        "wires": [
            [
                "a29e2f66134e5a19"
            ]
        ]
    },
    {
        "id": "a29e2f66134e5a19",
        "type": "polygon-rsi",
        "z": "1c31412f8d65b8ab",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "timestamp": "",
        "timespan": "minute",
        "window": "",
        "limit": "",
        "x": 910,
        "y": 400,
        "wires": [
            [
                "d33823f76ad0c047"
            ]
        ]
    },
    {
        "id": "d33823f76ad0c047",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "store RSI",
        "func": "//node.warn(msg.payload.results)\nmsg.profit = flow.get(\"profit\")\nmsg.pos = flow.get(\"pos\")\nmsg.price = flow.get(\"price\")\n\nlet ux = 0\nlet rsi = 0\nlet item = 0\n\nfor (item of msg.payload.results.values) {\n    ux = item.timestamp\n    rsi = item.value\n}\n\nrsi = rsi.toFixed(2) \nmsg.rsi = rsi\n\nvar unixTimestamp = ux;\nvar d = new Date(unixTimestamp);\n\nlet lt = d.toLocaleTimeString(\"en-US\");\nnode.warn(\"Time: \" + lt + \" RSI: \" + rsi+ \" Position: \" +msg.pos+ \" Profit: \" +msg.profit+ \" Price: \" +msg.price)\nmsg.query = \"insert into goog_rsi (datetime, value, position, profit, price) values ('\" +lt+ \"',\" +rsi+ \",\" +msg.pos+ \",\" +msg.profit+ \",\" +msg.price+ \");\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 400,
        "wires": [
            [
                "246e388f4ec70324",
                "ce83da60a6608cf4"
            ]
        ]
    },
    {
        "id": "7540f3eaa58a354c",
        "type": "comment",
        "z": "1c31412f8d65b8ab",
        "name": "set RSI vars",
        "info": "",
        "x": 770,
        "y": 360,
        "wires": []
    },
    {
        "id": "88b686b6f0eaadc0",
        "type": "change",
        "z": "1c31412f8d65b8ab",
        "name": "Store flow vars",
        "rules": [
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "size",
                "pt": "flow",
                "to": "size",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "symbol",
                "pt": "flow",
                "to": "symbol",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 400,
        "wires": [
            [
                "1d50edd6e10b1a73"
            ]
        ]
    },
    {
        "id": "ce83da60a6608cf4",
        "type": "postgresql",
        "z": "1c31412f8d65b8ab",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "ec8e91bc26617728",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "create table goog_rsi",
        "func": "msg.query = \"create table IF NOT EXISTS goog_rsi (datetime VARCHAR(40), value FLOAT, position FLOAT, profit FLOAT, price FLOAT)\"\nmsg.query = \"select * from goog_rsi;\"\n//msg.query = \"drop table goog_rsi;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 300,
        "wires": [
            [
                "a8718a13fd383c08"
            ]
        ]
    },
    {
        "id": "6da9a3e06ff924af",
        "type": "inject",
        "z": "1c31412f8d65b8ab",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 890,
        "y": 300,
        "wires": [
            [
                "ec8e91bc26617728"
            ]
        ]
    },
    {
        "id": "3730c9ccc9060847",
        "type": "debug",
        "z": "1c31412f8d65b8ab",
        "name": "debug 398",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 300,
        "wires": []
    },
    {
        "id": "a8718a13fd383c08",
        "type": "postgresql",
        "z": "1c31412f8d65b8ab",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 300,
        "wires": [
            [
                "3730c9ccc9060847"
            ]
        ]
    },
    {
        "id": "12aace0ec07a536d",
        "type": "http in",
        "z": "1c31412f8d65b8ab",
        "name": "/api/download_goog_rsi",
        "url": "/api/download_goog_rsi",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 660,
        "wires": [
            [
                "dd506e69667c82de"
            ]
        ]
    },
    {
        "id": "0471ba7486a4474f",
        "type": "http response",
        "z": "1c31412f8d65b8ab",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 950,
        "y": 660,
        "wires": []
    },
    {
        "id": "53a98d7e547b9e1f",
        "type": "csv",
        "z": "1c31412f8d65b8ab",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 670,
        "y": 660,
        "wires": [
            [
                "aeac53c1c537027f"
            ]
        ]
    },
    {
        "id": "dd506e69667c82de",
        "type": "function",
        "z": "1c31412f8d65b8ab",
        "name": "export query",
        "func": "msg.query = \"select * from goog_rsi;\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 660,
        "wires": [
            [
                "15f80618b986fcb3"
            ]
        ]
    },
    {
        "id": "aeac53c1c537027f",
        "type": "file",
        "z": "1c31412f8d65b8ab",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 660,
        "wires": [
            [
                "0471ba7486a4474f"
            ]
        ]
    },
    {
        "id": "15f80618b986fcb3",
        "type": "postgresql",
        "z": "1c31412f8d65b8ab",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 660,
        "wires": [
            [
                "53a98d7e547b9e1f"
            ]
        ]
    },
    {
        "id": "810ce3520dc18040",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "AK7TS1878RQGLSTHFE7H",
        "paper": false
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]