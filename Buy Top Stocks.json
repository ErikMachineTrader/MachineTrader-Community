[
    {
        "id": "ed8049b9e3c87c75",
        "type": "tab",
        "label": "Buy Top Stocks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3f6d610f3ae03af1",
        "type": "comment",
        "z": "ed8049b9e3c87c75",
        "name": "The name of this strategy is \"Buy Top Stocks\"",
        "info": "",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "ac31fa1291ec528a",
        "type": "inject",
        "z": "ed8049b9e3c87c75",
        "name": "BUY at 7:00 am",
        "props": [],
        "repeat": "",
        "crontab": "00 07 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "29db3a449290e4fc",
                "d940aae8e08381ed"
            ]
        ]
    },
    {
        "id": "279f8f4b1afacec2",
        "type": "comment",
        "z": "ed8049b9e3c87c75",
        "name": "Flow 2: Buy Order",
        "info": "",
        "x": 170,
        "y": 480,
        "wires": []
    },
    {
        "id": "29db3a449290e4fc",
        "type": "function-npm",
        "z": "ed8049b9e3c87c75",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\nsymbol = 'SPY'\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 580,
        "wires": [
            [
                "6d2136952418e4ca"
            ]
        ]
    },
    {
        "id": "d5f8929cb24fb673",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\nnode.warn(\"Benchmark Price: \" +price)\n\nmsg.benchmark = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 580,
        "wires": [
            [
                "abd533bb203a5486",
                "787f628ae4d8c537"
            ]
        ]
    },
    {
        "id": "6d2136952418e4ca",
        "type": "polygon-last-trade-v3",
        "z": "ed8049b9e3c87c75",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 540,
        "y": 580,
        "wires": [
            [
                "d5f8929cb24fb673"
            ]
        ]
    },
    {
        "id": "abd533bb203a5486",
        "type": "change",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "benchmark_price",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "afc6aa15bc8aa78a",
        "type": "comment",
        "z": "ed8049b9e3c87c75",
        "name": "Flow #1: Enter strategy information in the \"set and store strategy variables function node",
        "info": "",
        "x": 630,
        "y": 480,
        "wires": []
    },
    {
        "id": "b7d05dfb59ed923c",
        "type": "inject",
        "z": "ed8049b9e3c87c75",
        "name": "At Start Up",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "ecc8b66dbb37b01a",
                "fd0e70a836109f29"
            ]
        ]
    },
    {
        "id": "ecc8b66dbb37b01a",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "set and store portfolio and ticker variables",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet tickers = ''\nlet name = \"Buy Top Stocks\"\nlet algotype = \"intraday\"\nlet status = \"running\"\nlet trade_freq = 20\nlet sharpe = 0\nlet unixtime = 0\nlet benchmark = 'SPY'\nlet tickertype = 'stocks'\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet starting_balance = 0\nlet balance_today = 0\nlet ending_balance_today = 0\nlet balance_end = 0\nlet benchmark_start = 0\nlet benchmark_start_today = 0\nlet benchmark_current = 0\nlet benchmark_end_today = 0\nlet benchmark_end = 0\nlet gain_today_realized = 0\nlet gain_today_unrealized = 0\nlet pctgain_today = 0\nlet gainloss_realized = 0\nlet gainloss_unrealized = 0\nlet gainlosspct = 0\nlet benchmarkgain_today = 0\nlet benchmarkgain = 0\nlet benchmarkpct_today = 0\nlet benchmarkpct = 0\n\n\nmsg.id = id\nmsg.name = name\nmsg.trade = trade_freq\nmsg.status = status\nmsg.benchmark = benchmark\nmsg.account = account\nmsg.tickertype = tickertype\nmsg.psize = psize\nmsg.tickers = tickers\n\nlet sql = \"replace into algo (id,name, tickers, algotype, status, trade_freq,sharpe,unixtime, portfolio,starting_balance,balance_today,ending_balance_today,balance_end,benchmark_start,benchmark_start_today,benchmark_current,benchmark_end_today,benchmark_end,gain_today_realized, gain_today_unrealized,pctgain_today,gainloss_realized,gainloss_unrealized,gainlosspct, benchmarkgain_today, benchmarkgain,benchmarkpct_today,benchmarkpct) values ('\"\nsql += id + \"', '\" + name + \"','\" + tickers + \"','\" + algotype + \"', '\" + status + \"', '\" + trade_freq + \"','\" + sharpe + \"', '\" + unixtime + \"','\" + psize + \"','\" + starting_balance + \"', '\" + balance_today + \"','\" + ending_balance_today + \"','\" + balance_end + \"', '\" + benchmark_start + \"','\" + benchmark_start_today + \"','\" + benchmark_current + \"', '\" + benchmark_end_today + \"','\" + benchmark_end + \"','\" + gain_today_realized + \"', '\" + gain_today_unrealized + \"','\" + pctgain_today + \"','\" + gainloss_realized + \"', '\" + gainloss_unrealized + \"','\" + gainlosspct + \"','\" + benchmarkgain_today + \"', '\" + benchmarkgain + \"','\" + benchmarkpct_today + \"','\" + benchmarkpct + \"');\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 140,
        "wires": [
            [
                "2b07bcaefa98b8fa",
                "f0a1e74ade3f3ffb"
            ]
        ]
    },
    {
        "id": "2b07bcaefa98b8fa",
        "type": "change",
        "z": "ed8049b9e3c87c75",
        "name": "set flow variable: ticker, qty,portfolioid",
        "rules": [
            {
                "t": "set",
                "p": "portfolioid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "name",
                "pt": "flow",
                "to": "name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "trades",
                "pt": "flow",
                "to": "trade",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickertype",
                "pt": "flow",
                "to": "tickertype",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f0a1e74ade3f3ffb",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "0ff8fe2630f9690e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 770,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "89cbe5d39e151200",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "0ff8fe2630f9690e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 1370,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "787f628ae4d8c537",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "set algo id",
        "func": "let id = flow.get(\"portfolioid\")\nlet sql = \"select tickers as a from algo where id = \" +id\n//node.warn(sql)\nmsg.topic = sql\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 580,
        "wires": [
            [
                "89cbe5d39e151200"
            ]
        ]
    },
    {
        "id": "98d6e4aa77e30723",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"50\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "0aabe7e9f06acc46"
            ]
        ]
    },
    {
        "id": "0aabe7e9f06acc46",
        "type": "alpaca-query-order",
        "z": "ed8049b9e3c87c75",
        "conf": "e535f42f1df1b25f",
        "x": 700,
        "y": 1000,
        "wires": [
            [
                "a0fcf23335e112e9"
            ]
        ]
    },
    {
        "id": "fd71972bc9002212",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((status == 'filled') && (clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  filled_type = '\" +type+ \"', filled_side = '\" + side + \"', filled_tif = '\" + time_in_force + \"', filled_status = '\" + status + \"', filled_at = '\" + filled_at + \"', filled_price = '\" + filled_avg_price + \"', filled_qty = '\" + filled_qty + \"', position = \" +position+ \" where clientorderid = '\" +clientorderid+ \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1000,
        "wires": [
            [
                "befc5e3e72959169"
            ]
        ]
    },
    {
        "id": "a0fcf23335e112e9",
        "type": "split",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 1000,
        "wires": [
            [
                "fd71972bc9002212"
            ]
        ]
    },
    {
        "id": "befc5e3e72959169",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1200,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "43e6584fbec9f9c1",
        "type": "comment",
        "z": "ed8049b9e3c87c75",
        "name": "Flow 3: Update portfolio table with order information when order is filled",
        "info": "",
        "x": 290,
        "y": 820,
        "wires": []
    },
    {
        "id": "4165a0bc0565abac",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select clientorderid from portfolio where portfolioid = \" +id\nmsg.topic = sql\n//node.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 940,
        "wires": [
            [
                "d2c0a37fb0e10f49"
            ]
        ]
    },
    {
        "id": "d2c0a37fb0e10f49",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 720,
        "y": 940,
        "wires": [
            [
                "8ba9da668ca06011"
            ]
        ]
    },
    {
        "id": "f75bb65b842ef61a",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"clientorderid\"]\nmsg.clientid = clientorderid\n//node.warn(msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 940,
        "wires": [
            [
                "98d6e4aa77e30723"
            ]
        ]
    },
    {
        "id": "8ba9da668ca06011",
        "type": "split",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 940,
        "wires": [
            [
                "8978f30feb7ffa3c"
            ]
        ]
    },
    {
        "id": "8978f30feb7ffa3c",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1010,
        "y": 940,
        "wires": [
            [
                "f75bb65b842ef61a"
            ]
        ]
    },
    {
        "id": "6113d12b9ecc3eac",
        "type": "inject",
        "z": "ed8049b9e3c87c75",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 940,
        "wires": [
            [
                "4165a0bc0565abac"
            ]
        ]
    },
    {
        "id": "6d11d4841bf0e939",
        "type": "function-npm",
        "z": "ed8049b9e3c87c75",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 180,
        "wires": [
            [
                "73b6bf8cee41f7a3"
            ]
        ]
    },
    {
        "id": "531d3cc417789445",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nlet sql = \"update algo set benchmark_start = \" +price+ \" where id = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 180,
        "wires": [
            [
                "e0e79ca65dba909f"
            ]
        ]
    },
    {
        "id": "73b6bf8cee41f7a3",
        "type": "polygon-last-trade-v3",
        "z": "ed8049b9e3c87c75",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 740,
        "y": 180,
        "wires": [
            [
                "531d3cc417789445"
            ]
        ]
    },
    {
        "id": "fd0e70a836109f29",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 180,
        "wires": [
            [
                "6d11d4841bf0e939",
                "1fc8e567bbbb861d"
            ]
        ]
    },
    {
        "id": "e0e79ca65dba909f",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "312de5ece428d452",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 1150,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7ae7c2d4189bdaf0",
        "type": "mysql",
        "z": "ed8049b9e3c87c75",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 670,
        "y": 280,
        "wires": [
            [
                "b059a444633382ca"
            ]
        ]
    },
    {
        "id": "bcbba4b659078598",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "Get top stocks list",
        "func": "let sql = \"select * from topstocks where close > 1 order by price_change_pct desc limit 20\"\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 280,
        "wires": [
            [
                "7ae7c2d4189bdaf0"
            ]
        ]
    },
    {
        "id": "d520e0cc887101bc",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "f78b6ecd30d6e647",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 1050,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1fc8e567bbbb861d",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 280,
        "wires": [
            [
                "bcbba4b659078598"
            ]
        ]
    },
    {
        "id": "098421d9a2594f56",
        "type": "change",
        "z": "ed8049b9e3c87c75",
        "name": "set number_of_tickers",
        "rules": [
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "count",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b059a444633382ca",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "update algos with tickers",
        "func": "let id = flow.get(\"portfolioid\")\n//let id = msg.id\n\nlet tickers = \"\"\n\nfor (var i = 0; i < msg.payload.length; i++) {\n\n    let ticker = msg.payload[i][\"symbol\"]\n    tickers += ticker+ \", \"\n}\n\nlet count = msg.payload.length\nnode.warn(tickers)\n//tickers += \"'\"\n//tickers = tickers.replace(\"''\",\"'\")\n//tickers = \"AEM,SEV,GOEV,HYFM,VLD,MQ,KD,CELH,PSTG,ADMA,ZIMV,CPNG,RNG,RPAY,ZIP\"\n//tickers = \"HUDI,ZIP,VLD,HYFM,GOEV\"\nlet sql = \"update algo set tickers = '\" + tickers + \"' where id = \" + id\nnode.warn(sql)\nmsg.topic = sql\nmsg.count = count\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            [
                "098421d9a2594f56",
                "d520e0cc887101bc"
            ]
        ]
    },
    {
        "id": "e9d0fc424cdca496",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "Create Portfolio",
        "func": "let tickers = msg.payload[\"symbol\"]\n//node.warn(\"Tickers: \" +tickers)\nmsg.ticker = tickers\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 640,
        "wires": [
            [
                "8916fb3a2cbf0b2e"
            ]
        ]
    },
    {
        "id": "8916fb3a2cbf0b2e",
        "type": "function-npm",
        "z": "ed8049b9e3c87c75",
        "name": "Get current price",
        "func": "let tickertype = flow.get(\"tickertype\")\nlet symbol = msg.ticker\n\nif ( tickertype == 'crypto'){\n\n    symbol = \"X:\" +symbol\n//    symbol = symbol.replace(\"/\", \"\");\n}\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nmsg.symbol = symbol\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1190,
        "y": 640,
        "wires": [
            [
                "6b48f96f3e4ea02e"
            ]
        ]
    },
    {
        "id": "02c6f951698c7c03",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get price last trade",
        "func": "let price = ''\nlet item = 0\nlet symbol = msg.symbol\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = parseFloat(price).toFixed(2);\nmsg.price = price\n//node.warn(\"Symbol: \" +symbol+ \" Current Price: \" +price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 720,
        "wires": [
            [
                "2e24215ca1e075ad"
            ]
        ]
    },
    {
        "id": "6b48f96f3e4ea02e",
        "type": "polygon-last-trade-v3",
        "z": "ed8049b9e3c87c75",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 480,
        "y": 720,
        "wires": [
            [
                "02c6f951698c7c03"
            ]
        ]
    },
    {
        "id": "eb857631c4b14816",
        "type": "alpaca-order",
        "z": "ed8049b9e3c87c75",
        "conf": "e535f42f1df1b25f",
        "x": 1130,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "6bd26d4f8c67f520",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "2ee6e03650c4bc06",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1120,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "d99f335e08106120",
        "type": "change",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "clientorderid",
                "pt": "flow",
                "to": "clientorderid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "2e24215ca1e075ad",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "place limit order ",
        "func": "let psize = flow.get(\"psize\")\nlet id = flow.get(\"portfolioid\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_price = flow.get(\"benchmark_price\")\nlet account = flow.get(\"account\")\nlet name = flow.get(\"name\")\n\nlet tickertype = flow.get(\"tickertype\")\n\nlet ticker = msg.symbol\n\n\nif (tickertype == 'crypto') {\n\n    ticker = ticker.replace(\"X:\", \"\");\n    ticker = ticker.replace(\"USD\", \"/USD\");  // this works only if the currency is USD\n\n}\n\n\nlet localtime = new Date();\n\n\nlet price = msg.price\n\n// use this to balance the portfolio equally\nlet number = flow.get(\"number\")\nlet qty = (psize / number) / price\nqty = Math.round(qty)\nnode.warn(\"Ticker: \" + ticker + \" Price: \" + price + \" Portfolio Size: \" + psize + \" Qty: \" + qty + \" Number:\" +number)\n\n\n// if crypto, Limit price must exceed current price by $1 \nif ((tickertype == 'crypto)')) {\nprice = (price + 1)  // Limit price must exceed current price by $1 \nprice = price.toFixed(2)\n}\n\n\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id\n\n\nlet sql = \"replace into portfolio (account,date,portfolioid,name,ticker, clientorderid,price,qty,benchmark,benchmark_start) values ('\" + account + \"', '\" + localtime + \"',\" + id + \",'\" + name + \"','\" + ticker + \"','\" + client_order_id + \"','\" +price+ \"',\" +qty+ \",'\" +benchmark+ \"',\" +benchmark_price+ \");\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\n// create a limit order for Alpaca\n    let temp = ''\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty, \n        \"side\": \"buy\",\n        \"type\": \"limit\",\n        \"limit_price\": price,\n        \"client_order_id\": client_order_id,\n        \"time_in_force\": \"gtc\"\n    };\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 720,
        "wires": [
            [
                "d99f335e08106120",
                "6bd26d4f8c67f520",
                "eb857631c4b14816"
            ]
        ]
    },
    {
        "id": "5e555c4d8d23258e",
        "type": "mysql",
        "z": "ed8049b9e3c87c75",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 550,
        "y": 640,
        "wires": [
            [
                "c25ace1080f4eca5"
            ]
        ]
    },
    {
        "id": "d940aae8e08381ed",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 640,
        "wires": [
            [
                "e9bd6b699c2998e7",
                "bc2dc9bedcaef1c6"
            ]
        ]
    },
    {
        "id": "c25ace1080f4eca5",
        "type": "split",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "540f620a0e223e20"
            ]
        ]
    },
    {
        "id": "540f620a0e223e20",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 640,
        "wires": [
            [
                "e9d0fc424cdca496"
            ]
        ]
    },
    {
        "id": "becccd5a277b928c",
        "type": "comment",
        "z": "ed8049b9e3c87c75",
        "name": "Flow #4: Place Sell Orders",
        "info": "",
        "x": 130,
        "y": 1160,
        "wires": []
    },
    {
        "id": "22b3144897fd559d",
        "type": "comment",
        "z": "ed8049b9e3c87c75",
        "name": "Flow 6: Update portfolio table with filled SELL orders",
        "info": "",
        "x": 250,
        "y": 1620,
        "wires": []
    },
    {
        "id": "eef5bb8c4b98bb4f",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1760,
        "wires": [
            [
                "6d85d5500cf9d13c"
            ]
        ]
    },
    {
        "id": "6d85d5500cf9d13c",
        "type": "alpaca-query-order",
        "z": "ed8049b9e3c87c75",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1760,
        "wires": [
            [
                "9f764165a396b899"
            ]
        ]
    },
    {
        "id": "2bccd0ad326b6755",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n//node.warn(clientid)\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  newfilled_type = '\" + type + \"', newfilled_side = '\" + side + \"', newfilled_tif = '\" + time_in_force + \"', newfilled_status = '\" + status + \"', newfilled_at = '\" + filled_at + \"', newfilled_price = '\" + filled_avg_price + \"', newfilled_qty = '\" + filled_qty + \"', newposition = \" + position + \" where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1760,
        "wires": [
            [
                "edf6daab264aa124"
            ]
        ]
    },
    {
        "id": "9f764165a396b899",
        "type": "split",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 1760,
        "wires": [
            [
                "2bccd0ad326b6755",
                "bac5a459aaaea918"
            ]
        ]
    },
    {
        "id": "edf6daab264aa124",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1140,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "04b316f7aee4d0cf",
        "type": "inject",
        "z": "ed8049b9e3c87c75",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1720,
        "wires": [
            [
                "7126a730671ed539"
            ]
        ]
    },
    {
        "id": "7126a730671ed539",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select newclient_order_id from portfolio where portfolioid = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1700,
        "wires": [
            [
                "f9564d929ab13809"
            ]
        ]
    },
    {
        "id": "f9564d929ab13809",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 640,
        "y": 1700,
        "wires": [
            [
                "9d9bf22224478047"
            ]
        ]
    },
    {
        "id": "95f88030ab8c5991",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"newclient_order_id\"]\nmsg.clientid = clientorderid\nnode.warn(\"msg.clientid: \" +msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1700,
        "wires": [
            [
                "eef5bb8c4b98bb4f"
            ]
        ]
    },
    {
        "id": "9d9bf22224478047",
        "type": "split",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 1700,
        "wires": [
            [
                "d78402f5cc4f7331"
            ]
        ]
    },
    {
        "id": "d78402f5cc4f7331",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 950,
        "y": 1700,
        "wires": [
            [
                "95f88030ab8c5991"
            ]
        ]
    },
    {
        "id": "3e6ad4dd6e213287",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "update portfolio",
        "func": "let clientorderid = msg.payload[\"client_order_id\"]\nlet clientid = msg.clientid\n\nif ((clientorderid == clientid)) { // filled  only\n\n\nlet sql = \"update portfolio SET  trade_profit = ((newfilled_qty * newfilled_price) - (filled_price * filled_qty)), benchmark_profit = (benchmark_end - benchmark_start) where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1800,
        "wires": [
            [
                "df34df81eb3ae59b"
            ]
        ]
    },
    {
        "id": "df34df81eb3ae59b",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1140,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "bac5a459aaaea918",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 1800,
        "wires": [
            [
                "3e6ad4dd6e213287"
            ]
        ]
    },
    {
        "id": "f7f26523a5f00114",
        "type": "inject",
        "z": "ed8049b9e3c87c75",
        "name": "COVER at 5:00 pm with Market Trades",
        "props": [],
        "repeat": "",
        "crontab": "00 17 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1200,
        "wires": [
            [
                "98142431b5269d9a",
                "15c76c116135f0ac"
            ]
        ]
    },
    {
        "id": "98142431b5269d9a",
        "type": "function-npm",
        "z": "ed8049b9e3c87c75",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n//let symbol = 'SPY'\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 1260,
        "wires": [
            [
                "211319d9c2410cc2"
            ]
        ]
    },
    {
        "id": "65c5bfd983b34a32",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\nnode.warn(\"Benchmark Price: \" +price)\nmsg.benchmark = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1260,
        "wires": [
            [
                "571cfd15e236fd0b"
            ]
        ]
    },
    {
        "id": "211319d9c2410cc2",
        "type": "polygon-last-trade-v3",
        "z": "ed8049b9e3c87c75",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 520,
        "y": 1260,
        "wires": [
            [
                "65c5bfd983b34a32"
            ]
        ]
    },
    {
        "id": "571cfd15e236fd0b",
        "type": "change",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "benchmark_end",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "07d9402be3f4e223",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1170,
        "y": 1340,
        "wires": [
            [
                "cf259f30b9be9568"
            ]
        ]
    },
    {
        "id": "79077bd4fb9101d9",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 1340,
        "wires": [
            [
                "a0daaf4a0e84d484"
            ]
        ]
    },
    {
        "id": "a0daaf4a0e84d484",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get tickers",
        "func": "msg.ticker = msg.payload[\"ticker\"]\nmsg.qty = msg.payload[\"filled_qty\"]\nmsg.clientid = msg.payload[\"clientorderid\"]\n\nnode.warn(\"Portfolioid: \" +msg.id+ \" Ticker: \" +msg.ticker+ \" Qty:\" +msg.qty+ \" Clientorderid: \" +msg.clientid)\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1340,
        "wires": [
            [
                "07d9402be3f4e223"
            ]
        ]
    },
    {
        "id": "c6235ddc8367a412",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "select tickers from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\nlet sql = \"select ticker,filled_qty,clientorderid from portfolio where filled_qty > 0 and trade_profit is null and portfolioid = \" +id\nnode.warn(sql)\nmsg.topic = sql\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1340,
        "wires": [
            [
                "1784c0a730c92a8e"
            ]
        ]
    },
    {
        "id": "1784c0a730c92a8e",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 560,
        "y": 1340,
        "wires": [
            [
                "5dfd364667576d7d"
            ]
        ]
    },
    {
        "id": "5dfd364667576d7d",
        "type": "split",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 1340,
        "wires": [
            [
                "79077bd4fb9101d9"
            ]
        ]
    },
    {
        "id": "c929feea1d73624b",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 840,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "91abc07ec621b351",
        "type": "alpaca-order",
        "z": "ed8049b9e3c87c75",
        "conf": "e535f42f1df1b25f",
        "x": 850,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "c5e4f5c1b1433a28",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "place market sell order",
        "func": "let id = flow.get(\"portfolioid\")\nlet tickertype = flow.get(\"tickertype\")\n\n\nlet benchmark_end = flow.get(\"benchmark_end\")\n\nlet ticker = msg.ticker\nlet qty = msg.qty\nlet price = msg.price\nlet position = qty * price \nlet clientid = msg.clientid\n\nlet d = Date.now()\nlet newclient_order_id = \"SELL\" + ticker + d\n\n\nlet sql = \"update portfolio set benchmark_end = \" + benchmark_end + \", newclient_order_id = '\" + newclient_order_id + \"', newqty = \" + qty + \", newprice = \" +price+ \", newposition = \" + position + \" where clientorderid = '\" + clientid + \"';\" \n\nmsg.topic = sql\n//node.warn(msg.topic)\n\n// create a limit order for Alpaca\nif (qty > 0){\n\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": \"sell\",\n    \"type\": \"limit\",\n    \"limit_price\": price,\n    \"client_order_id\": newclient_order_id,\n    \"time_in_force\": \"gtc\"\n};\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\n    return msg;\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1480,
        "wires": [
            [
                "91abc07ec621b351",
                "c929feea1d73624b"
            ]
        ]
    },
    {
        "id": "a9cce6c9261d6327",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get price last trade",
        "func": "let price = 0\nlet item = 0\n\nlet qty = msg.qty\nlet clientid = msg.clientid\nlet ticker = msg.ticker\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = parseFloat(price).toFixed(2);\nmsg.price = price\n//node.warn(\"Symbol: \" +ticker+ \" Current Price: \" +price+ \" Qty: \" +qty+ \" Client ID: \" +clientid)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1400,
        "wires": [
            [
                "c5e4f5c1b1433a28"
            ]
        ]
    },
    {
        "id": "da9aa24db1a76d71",
        "type": "polygon-last-trade-v3",
        "z": "ed8049b9e3c87c75",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 660,
        "y": 1400,
        "wires": [
            [
                "a9cce6c9261d6327"
            ]
        ]
    },
    {
        "id": "cf259f30b9be9568",
        "type": "function-npm",
        "z": "ed8049b9e3c87c75",
        "name": "Get current price",
        "func": "let symbol = msg.payload[\"ticker\"]\nlet tickertype = flow.get(\"tickertype\")\n\n\nif ( (tickertype == 'crypto') ){\nsymbol = \"X:\" +symbol\nsymbol = symbol.replace(\"/\", \"\");\n}\n\n//node.warn(\"Symbol: \" + symbol + \" Tickertype: \" + tickertype)\n\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(msg.payload)\n\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 1400,
        "wires": [
            [
                "da9aa24db1a76d71"
            ]
        ]
    },
    {
        "id": "15c76c116135f0ac",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 140,
        "y": 1340,
        "wires": [
            [
                "c6235ddc8367a412",
                "3071268827849dc4",
                "ab4ef8df2c04b768"
            ]
        ]
    },
    {
        "id": "3071268827849dc4",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "Run after 1 min ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1500,
        "wires": [
            [
                "7126a730671ed539"
            ]
        ]
    },
    {
        "id": "e9bd6b699c2998e7",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "Get top stocks list",
        "func": "let sql = \"select * from topstocks where close > 1 order by price_change_pct desc limit 20\"\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 640,
        "wires": [
            [
                "5e555c4d8d23258e"
            ]
        ]
    },
    {
        "id": "5e459d605d44ca05",
        "type": "inject",
        "z": "ed8049b9e3c87c75",
        "name": "Update closed order info every 5 mins",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 9 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 880,
        "wires": [
            [
                "4165a0bc0565abac"
            ]
        ]
    },
    {
        "id": "92645ad980b1d82d",
        "type": "comment",
        "z": "ed8049b9e3c87c75",
        "name": "Flow 3A: Delete orders from portfolio that weren't filled",
        "info": "",
        "x": 520,
        "y": 1060,
        "wires": []
    },
    {
        "id": "e9c2ebe68f8121ab",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "delete query",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"delete from portfolio where filled_qty is null and portfolioid = \" +id\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1100,
        "wires": [
            [
                "8ceea90c88c267c2"
            ]
        ]
    },
    {
        "id": "8ceea90c88c267c2",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "8e5e0c9ea803b75e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 800,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "889baa12b1f0faa3",
        "type": "alpaca-orders-close",
        "z": "ed8049b9e3c87c75",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 430,
        "y": 1100,
        "wires": [
            [
                "e9c2ebe68f8121ab"
            ]
        ]
    },
    {
        "id": "bc2dc9bedcaef1c6",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 760,
        "wires": [
            [
                "889baa12b1f0faa3"
            ]
        ]
    },
    {
        "id": "162330813ad8ae87",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "set and store portfolio and ticker variables",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet tickers = ''\nlet name = \"Buy Top Stocks\"\nlet algotype = \"intraday\"\nlet status = \"running\"\nlet trade_freq = 20\nlet sharpe = 0\nlet unixtime = 0\nlet benchmark = 'SPY'\nlet tickertype = 'stocks'\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet starting_balance = 0\nlet balance_today = 0\nlet ending_balance_today = 0\nlet balance_end = 0\nlet benchmark_start = 0\nlet benchmark_start_today = 0\nlet benchmark_current = 0\nlet benchmark_end_today = 0\nlet benchmark_end = 0\nlet gain_today_realized = 0\nlet gain_today_unrealized = 0\nlet pctgain_today = 0\nlet gainloss_realized = 0\nlet gainloss_unrealized = 0\nlet gainlosspct = 0\nlet benchmarkgain_today = 0\nlet benchmarkgain = 0\nlet benchmarkpct_today = 0\nlet benchmarkpct = 0\n\n\n//msg.id = id\nmsg.name = name\nmsg.trade = trade_freq\nmsg.status = status\nmsg.benchmark = benchmark\nmsg.account = account\nmsg.tickertype = tickertype\nmsg.psize = psize\nmsg.tickers = tickers\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 380,
        "wires": [
            [
                "1c21ee2088667e65"
            ]
        ]
    },
    {
        "id": "1c21ee2088667e65",
        "type": "change",
        "z": "ed8049b9e3c87c75",
        "name": "set flow variable: ticker, qty,portfolioid",
        "rules": [
            {
                "t": "set",
                "p": "portfolioid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "name",
                "pt": "flow",
                "to": "name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "trades",
                "pt": "flow",
                "to": "trade",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickertype",
                "pt": "flow",
                "to": "tickertype",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "132081358566f348",
        "type": "inject",
        "z": "ed8049b9e3c87c75",
        "name": "Reset flow variables after deploy",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 400,
        "wires": [
            [
                "162330813ad8ae87",
                "83cc9bb76425fc5c"
            ]
        ]
    },
    {
        "id": "83cc9bb76425fc5c",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "enter algo name to set id",
        "func": "let sql = \"select id from algo where name = 'Buy Top Stocks'\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "682363b5b0268993"
            ]
        ]
    },
    {
        "id": "aaf78862203faaf7",
        "type": "change",
        "z": "ed8049b9e3c87c75",
        "name": "set flow portfolioid",
        "rules": [
            {
                "t": "set",
                "p": "portfolioid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "682363b5b0268993",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "0ff8fe2630f9690e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 670,
        "y": 420,
        "wires": [
            [
                "867f1bb1166e53b8"
            ]
        ]
    },
    {
        "id": "867f1bb1166e53b8",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "set portfolioid",
        "func": "let id = 0\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    id = msg.payload[i][\"id\"]\n}\n\nmsg.id = id\nnode.warn(msg.id)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 420,
        "wires": [
            [
                "aaf78862203faaf7"
            ]
        ]
    },
    {
        "id": "ab4ef8df2c04b768",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "Run after 3 hours",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 1840,
        "wires": [
            [
                "6ef263efebd08ae8",
                "149bdbbd8fedbee6"
            ]
        ]
    },
    {
        "id": "97cbe94936b38592",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1960,
        "wires": [
            [
                "fd3235bda24d2b47"
            ]
        ]
    },
    {
        "id": "fd3235bda24d2b47",
        "type": "alpaca-query-order",
        "z": "ed8049b9e3c87c75",
        "conf": "e535f42f1df1b25f",
        "x": 600,
        "y": 1960,
        "wires": [
            [
                "965401025f199226"
            ]
        ]
    },
    {
        "id": "1f39dbeb3516ddd1",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n//node.warn(clientid)\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  newfilled_type = '\" + type + \"', newfilled_side = '\" + side + \"', newfilled_tif = '\" + time_in_force + \"', newfilled_status = '\" + status + \"', newfilled_at = '\" + filled_at + \"', newfilled_price = '\" + filled_avg_price + \"', newfilled_qty = '\" + filled_qty + \"', newposition = \" + position + \" where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1960,
        "wires": [
            [
                "730be05efe487b9e"
            ]
        ]
    },
    {
        "id": "965401025f199226",
        "type": "split",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1960,
        "wires": [
            [
                "1f39dbeb3516ddd1",
                "403828123d19c238"
            ]
        ]
    },
    {
        "id": "730be05efe487b9e",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1120,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "6ef263efebd08ae8",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select newclient_order_id from portfolio where portfolioid = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1900,
        "wires": [
            [
                "eb8b22d067cbc056"
            ]
        ]
    },
    {
        "id": "eb8b22d067cbc056",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 620,
        "y": 1900,
        "wires": [
            [
                "6374546db009a7fc"
            ]
        ]
    },
    {
        "id": "0e48fbb4322dafda",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"newclient_order_id\"]\nmsg.clientid = clientorderid\nnode.warn(\"msg.clientid: \" +msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1900,
        "wires": [
            [
                "97cbe94936b38592"
            ]
        ]
    },
    {
        "id": "6374546db009a7fc",
        "type": "split",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1900,
        "wires": [
            [
                "a9266aee0e353d06"
            ]
        ]
    },
    {
        "id": "a9266aee0e353d06",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 930,
        "y": 1900,
        "wires": [
            [
                "0e48fbb4322dafda"
            ]
        ]
    },
    {
        "id": "70c320ea4e0c7bce",
        "type": "function",
        "z": "ed8049b9e3c87c75",
        "name": "update portfolio",
        "func": "let clientorderid = msg.payload[\"client_order_id\"]\nlet clientid = msg.clientid\n\nif ((clientorderid == clientid)) { // filled  only\n\n\nlet sql = \"update portfolio SET  trade_profit = ((newfilled_qty * newfilled_price) - (filled_price * filled_qty)), benchmark_profit = (benchmark_end - benchmark_start) where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2000,
        "wires": [
            [
                "8634618569322726"
            ]
        ]
    },
    {
        "id": "8634618569322726",
        "type": "sqlite",
        "z": "ed8049b9e3c87c75",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1120,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "403828123d19c238",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 2000,
        "wires": [
            [
                "70c320ea4e0c7bce"
            ]
        ]
    },
    {
        "id": "29b97f8a92871c56",
        "type": "alpaca-orders-close",
        "z": "ed8049b9e3c87c75",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 630,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "149bdbbd8fedbee6",
        "type": "delay",
        "z": "ed8049b9e3c87c75",
        "name": "Run after 3 mins",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 2060,
        "wires": [
            [
                "29b97f8a92871c56"
            ]
        ]
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "0ff8fe2630f9690e",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK04XC8SPXUXFUJ5C0BO",
        "paper": true
    },
    {
        "id": "62235ced9bc35c5a",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "312de5ece428d452",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "f78b6ecd30d6e647",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    },
    {
        "id": "2ee6e03650c4bc06",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "8e5e0c9ea803b75e",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    }
]