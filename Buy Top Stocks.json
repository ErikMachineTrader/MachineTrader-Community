[
    {
        "id": "9360bfb4f2de3c97",
        "type": "tab",
        "label": "Buy Top Stocks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bfad60fa4392f989",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "The name of this strategy is \"Buy Top Stocks\"",
        "info": "",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "2585ba8560863a68",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "BUY at 7:00 am",
        "props": [],
        "repeat": "",
        "crontab": "00 07 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "417a43543a91dd8a",
                "c479ba0928ca4301"
            ]
        ]
    },
    {
        "id": "934655dbeadf2901",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "Flow 2: Buy Order",
        "info": "",
        "x": 170,
        "y": 480,
        "wires": []
    },
    {
        "id": "ae475d291f3e7ff0",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "Flow #1: Enter strategy information in the \"set and store strategy variables function node",
        "info": "",
        "x": 630,
        "y": 480,
        "wires": []
    },
    {
        "id": "e26689dbd40a9576",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"50\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "a97d9570b9348ad3"
            ]
        ]
    },
    {
        "id": "a97d9570b9348ad3",
        "type": "alpaca-query-order",
        "z": "9360bfb4f2de3c97",
        "conf": "e535f42f1df1b25f",
        "x": 700,
        "y": 1000,
        "wires": [
            [
                "36a89a60c3592826"
            ]
        ]
    },
    {
        "id": "85ec61328bd374da",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((status == 'filled') && (clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  filled_type = '\" +type+ \"', filled_side = '\" + side + \"', filled_tif = '\" + time_in_force + \"', filled_status = '\" + status + \"', filled_at = '\" + filled_at + \"', filled_price = '\" + filled_avg_price + \"', filled_qty = '\" + filled_qty + \"', position = \" +position+ \" where clientorderid = '\" +clientorderid+ \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1000,
        "wires": [
            [
                "46e75d22f76e3edb"
            ]
        ]
    },
    {
        "id": "36a89a60c3592826",
        "type": "split",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 1000,
        "wires": [
            [
                "85ec61328bd374da"
            ]
        ]
    },
    {
        "id": "46e75d22f76e3edb",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1200,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "e4bb6916b7725136",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "Flow 3: Update portfolio table with order information when order is filled",
        "info": "",
        "x": 290,
        "y": 820,
        "wires": []
    },
    {
        "id": "967d8e6a5b9f09d9",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select clientorderid from portfolio where portfolioid = \" +id\nmsg.topic = sql\n//node.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 940,
        "wires": [
            [
                "21e54460ca037ccf"
            ]
        ]
    },
    {
        "id": "21e54460ca037ccf",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 720,
        "y": 940,
        "wires": [
            [
                "b39962694f5e006a"
            ]
        ]
    },
    {
        "id": "f3cdbe91e317d546",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"clientorderid\"]\nmsg.clientid = clientorderid\n//node.warn(msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 940,
        "wires": [
            [
                "e26689dbd40a9576"
            ]
        ]
    },
    {
        "id": "b39962694f5e006a",
        "type": "split",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 940,
        "wires": [
            [
                "478bad8987364252"
            ]
        ]
    },
    {
        "id": "478bad8987364252",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1010,
        "y": 940,
        "wires": [
            [
                "f3cdbe91e317d546"
            ]
        ]
    },
    {
        "id": "98422d35790f69f5",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 940,
        "wires": [
            [
                "967d8e6a5b9f09d9"
            ]
        ]
    },
    {
        "id": "0a2766c0c8a8ec96",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "Create Portfolio",
        "func": "let tickers = msg.payload[\"symbol\"]\n//node.warn(\"Tickers: \" +tickers)\nmsg.ticker = tickers\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 640,
        "wires": [
            [
                "7b77bd3af26b6b97"
            ]
        ]
    },
    {
        "id": "7b77bd3af26b6b97",
        "type": "function-npm",
        "z": "9360bfb4f2de3c97",
        "name": "Get current price",
        "func": "let tickertype = flow.get(\"tickertype\")\nlet symbol = msg.ticker\n\nif ( tickertype == 'crypto'){\n\n    symbol = \"X:\" +symbol\n//    symbol = symbol.replace(\"/\", \"\");\n}\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nmsg.symbol = symbol\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1190,
        "y": 640,
        "wires": [
            [
                "7d95c80712476ab9"
            ]
        ]
    },
    {
        "id": "cba47b020ed4d125",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get price last trade",
        "func": "let price = ''\nlet item = 0\nlet symbol = msg.symbol\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = parseFloat(price).toFixed(2);\nmsg.price = price\n//node.warn(\"Symbol: \" +symbol+ \" Current Price: \" +price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 720,
        "wires": [
            [
                "96073db34e50d192"
            ]
        ]
    },
    {
        "id": "7d95c80712476ab9",
        "type": "polygon-last-trade-v3",
        "z": "9360bfb4f2de3c97",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 480,
        "y": 720,
        "wires": [
            [
                "cba47b020ed4d125"
            ]
        ]
    },
    {
        "id": "a10ab386b306ae78",
        "type": "alpaca-order",
        "z": "9360bfb4f2de3c97",
        "conf": "e535f42f1df1b25f",
        "x": 1130,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "8253430968c07a8a",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "c50a1b659b2650bb",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1120,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "84455a093e2939ae",
        "type": "change",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "clientorderid",
                "pt": "flow",
                "to": "clientorderid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "96073db34e50d192",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "place limit order ",
        "func": "let psize = flow.get(\"psize\")\nlet id = flow.get(\"portfolioid\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_price = flow.get(\"benchmark_price\")\nlet account = flow.get(\"account\")\nlet name = flow.get(\"name\")\n\nlet tickertype = flow.get(\"tickertype\")\n\nlet ticker = msg.symbol\n\n\nif (tickertype == 'crypto') {\n\n    ticker = ticker.replace(\"X:\", \"\");\n    ticker = ticker.replace(\"USD\", \"/USD\");  // this works only if the currency is USD\n\n}\n\n\nlet localtime = new Date();\n\n\nlet price = msg.price\n\n// use this to balance the portfolio equally\nlet number = flow.get(\"number\")\nlet qty = (psize / number) / price\nqty = Math.round(qty)\nnode.warn(\"Ticker: \" + ticker + \" Price: \" + price + \" Portfolio Size: \" + psize + \" Qty: \" + qty + \" Number:\" +number)\n\n\n// if crypto, Limit price must exceed current price by $1 \nif ((tickertype == 'crypto)')) {\nprice = (price + 1)  // Limit price must exceed current price by $1 \nprice = price.toFixed(2)\n}\n\n\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id\n\n\nlet sql = \"replace into portfolio (account,date,portfolioid,name,ticker, clientorderid,price,qty) values ('\" + account + \"', '\" + localtime + \"',\" + id + \",'\" + name + \"','\" + ticker + \"','\" + client_order_id + \"','\" +price+ \"',\" +qty+ \"');\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\n// create a limit order for Alpaca\n    let temp = ''\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty, \n        \"side\": \"buy\",\n        \"type\": \"limit\",\n        \"limit_price\": price,\n        \"client_order_id\": client_order_id,\n        \"time_in_force\": \"gtc\"\n    };\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 720,
        "wires": [
            [
                "84455a093e2939ae",
                "a10ab386b306ae78",
                "8253430968c07a8a"
            ]
        ]
    },
    {
        "id": "2ad86458813c2559",
        "type": "mysql",
        "z": "9360bfb4f2de3c97",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 550,
        "y": 640,
        "wires": [
            [
                "1780edacc7d1b28e"
            ]
        ]
    },
    {
        "id": "c479ba0928ca4301",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 640,
        "wires": [
            [
                "8883a6953340dd55",
                "17a987699e50949a"
            ]
        ]
    },
    {
        "id": "1780edacc7d1b28e",
        "type": "split",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "ac75bcc32c6f859b"
            ]
        ]
    },
    {
        "id": "ac75bcc32c6f859b",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 640,
        "wires": [
            [
                "0a2766c0c8a8ec96"
            ]
        ]
    },
    {
        "id": "c06508551fb8ec72",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "Flow #5: Place Sell Orders",
        "info": "",
        "x": 170,
        "y": 1580,
        "wires": []
    },
    {
        "id": "8d394c0bb9e24198",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "Flow 6: Update portfolio table with filled SELL orders",
        "info": "",
        "x": 270,
        "y": 2020,
        "wires": []
    },
    {
        "id": "0efcd5294edc4f63",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2160,
        "wires": [
            [
                "58b93ce079a4522e"
            ]
        ]
    },
    {
        "id": "58b93ce079a4522e",
        "type": "alpaca-query-order",
        "z": "9360bfb4f2de3c97",
        "conf": "e535f42f1df1b25f",
        "x": 640,
        "y": 2160,
        "wires": [
            [
                "2dcdb4d5fbf04039"
            ]
        ]
    },
    {
        "id": "4e8b9ab014890fab",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n//node.warn(clientid)\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  newfilled_type = '\" + type + \"', newfilled_side = '\" + side + \"', newfilled_tif = '\" + time_in_force + \"', newfilled_status = '\" + status + \"', newfilled_at = '\" + filled_at + \"', newfilled_price = '\" + filled_avg_price + \"', newfilled_qty = '\" + filled_qty + \"', newposition = \" + position + \" where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2160,
        "wires": [
            [
                "46e2415af4701c1b"
            ]
        ]
    },
    {
        "id": "2dcdb4d5fbf04039",
        "type": "split",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 2160,
        "wires": [
            [
                "4e8b9ab014890fab",
                "cfb27b383ce2c044"
            ]
        ]
    },
    {
        "id": "46e2415af4701c1b",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1160,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "f9c64bc7a56e1837",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 2120,
        "wires": [
            [
                "754f960811876190"
            ]
        ]
    },
    {
        "id": "754f960811876190",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select newclient_order_id from portfolio where portfolioid = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2100,
        "wires": [
            [
                "7a65d311042afbff"
            ]
        ]
    },
    {
        "id": "7a65d311042afbff",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 660,
        "y": 2100,
        "wires": [
            [
                "b04d2df0a430ccf2"
            ]
        ]
    },
    {
        "id": "67aa8e83fb7d3084",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"newclient_order_id\"]\nmsg.clientid = clientorderid\nnode.warn(\"msg.clientid: \" +msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 2100,
        "wires": [
            [
                "0efcd5294edc4f63"
            ]
        ]
    },
    {
        "id": "b04d2df0a430ccf2",
        "type": "split",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 2100,
        "wires": [
            [
                "6a829d688ec85cfe"
            ]
        ]
    },
    {
        "id": "6a829d688ec85cfe",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 970,
        "y": 2100,
        "wires": [
            [
                "67aa8e83fb7d3084"
            ]
        ]
    },
    {
        "id": "5114d93813ce0950",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "update portfolio",
        "func": "let clientorderid = msg.payload[\"client_order_id\"]\nlet clientid = msg.clientid\n\nif ((clientorderid == clientid)) { // filled  only\n\n\nlet sql = \"update portfolio SET  trade_profit = ((newfilled_qty * newfilled_price) - (filled_price * filled_qty)), benchmark_profit = (benchmark_end - benchmark_start) where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2200,
        "wires": [
            [
                "53fab3633d49fa5f"
            ]
        ]
    },
    {
        "id": "53fab3633d49fa5f",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1160,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "cfb27b383ce2c044",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 2200,
        "wires": [
            [
                "5114d93813ce0950"
            ]
        ]
    },
    {
        "id": "d1894d09518e93e1",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "COVER at 5:00 pm with Market Trades",
        "props": [],
        "repeat": "",
        "crontab": "00 17 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 1620,
        "wires": [
            [
                "95e010510d73d5cb",
                "aeb672233831d097"
            ]
        ]
    },
    {
        "id": "95e010510d73d5cb",
        "type": "function-npm",
        "z": "9360bfb4f2de3c97",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n//let symbol = 'SPY'\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 1680,
        "wires": [
            [
                "d11bbebbb140885f"
            ]
        ]
    },
    {
        "id": "854f8f156dba3ddf",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\nnode.warn(\"Benchmark Price: \" +price)\nmsg.benchmark = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1680,
        "wires": [
            [
                "fca39203c0de730b"
            ]
        ]
    },
    {
        "id": "d11bbebbb140885f",
        "type": "polygon-last-trade-v3",
        "z": "9360bfb4f2de3c97",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 1680,
        "wires": [
            [
                "854f8f156dba3ddf"
            ]
        ]
    },
    {
        "id": "fca39203c0de730b",
        "type": "change",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "benchmark_end",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "533041ae67a550c1",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1210,
        "y": 1760,
        "wires": [
            [
                "22f5293cdc15c0e5"
            ]
        ]
    },
    {
        "id": "248e7697542b429a",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 870,
        "y": 1760,
        "wires": [
            [
                "b00017b0cf71fbcc"
            ]
        ]
    },
    {
        "id": "b00017b0cf71fbcc",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get tickers",
        "func": "msg.ticker = msg.payload[\"ticker\"]\nmsg.qty = msg.payload[\"filled_qty\"]\nmsg.clientid = msg.payload[\"clientorderid\"]\n\nnode.warn(\"Portfolioid: \" +msg.id+ \" Ticker: \" +msg.ticker+ \" Qty:\" +msg.qty+ \" Clientorderid: \" +msg.clientid)\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1760,
        "wires": [
            [
                "533041ae67a550c1"
            ]
        ]
    },
    {
        "id": "2b51fb9406467f5c",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "select tickers from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\nlet sql = \"select ticker,filled_qty,clientorderid from portfolio where filled_qty > 0 and trade_profit is null and portfolioid = \" +id\nnode.warn(sql)\nmsg.topic = sql\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1760,
        "wires": [
            [
                "c0aa7fd0a13bb7e1"
            ]
        ]
    },
    {
        "id": "c0aa7fd0a13bb7e1",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 600,
        "y": 1760,
        "wires": [
            [
                "29c06ceed389b8ed"
            ]
        ]
    },
    {
        "id": "29c06ceed389b8ed",
        "type": "split",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 1760,
        "wires": [
            [
                "248e7697542b429a"
            ]
        ]
    },
    {
        "id": "8ef72719d05d13f4",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 880,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "d1b4ad7423b2f4fc",
        "type": "alpaca-order",
        "z": "9360bfb4f2de3c97",
        "conf": "e535f42f1df1b25f",
        "x": 890,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "e032a750320f908a",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "place market sell order",
        "func": "let id = flow.get(\"portfolioid\")\nlet tickertype = flow.get(\"tickertype\")\n\n\nlet ticker = msg.ticker\nlet qty = msg.qty\nlet price = msg.price\nlet position = qty * price \nlet clientid = msg.clientid\n\nlet d = Date.now()\nlet newclient_order_id = \"SELL\" + ticker + d\n\n\nlet sql = \"update portfolio set newclient_order_id = '\" + newclient_order_id + \"', newqty = \" + qty + \", newprice = \" +price+ \", newposition = \" + position + \" where clientorderid = '\" + clientid + \"';\" \n\nmsg.topic = sql\n//node.warn(msg.topic)\n\n// create a limit order for Alpaca\nif (qty > 0){\n\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": \"sell\",\n    \"type\": \"limit\",\n    \"limit_price\": price,\n    \"client_order_id\": newclient_order_id,\n    \"time_in_force\": \"gtc\"\n};\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\n    return msg;\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1900,
        "wires": [
            [
                "d1b4ad7423b2f4fc",
                "8ef72719d05d13f4"
            ]
        ]
    },
    {
        "id": "b90c6d13329cae0a",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get price last trade",
        "func": "let price = 0\nlet item = 0\n\nlet qty = msg.qty\nlet clientid = msg.clientid\nlet ticker = msg.ticker\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = parseFloat(price).toFixed(2);\nmsg.price = price\n//node.warn(\"Symbol: \" +ticker+ \" Current Price: \" +price+ \" Qty: \" +qty+ \" Client ID: \" +clientid)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1820,
        "wires": [
            [
                "e032a750320f908a"
            ]
        ]
    },
    {
        "id": "d52ae9f81ba5f08f",
        "type": "polygon-last-trade-v3",
        "z": "9360bfb4f2de3c97",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 700,
        "y": 1820,
        "wires": [
            [
                "b90c6d13329cae0a"
            ]
        ]
    },
    {
        "id": "22f5293cdc15c0e5",
        "type": "function-npm",
        "z": "9360bfb4f2de3c97",
        "name": "Get current price",
        "func": "let symbol = msg.payload[\"ticker\"]\nlet tickertype = flow.get(\"tickertype\")\n\n\nif ( (tickertype == 'crypto') ){\nsymbol = \"X:\" +symbol\nsymbol = symbol.replace(\"/\", \"\");\n}\n\n//node.warn(\"Symbol: \" + symbol + \" Tickertype: \" + tickertype)\n\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(msg.payload)\n\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 1820,
        "wires": [
            [
                "d52ae9f81ba5f08f"
            ]
        ]
    },
    {
        "id": "aeb672233831d097",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1760,
        "wires": [
            [
                "2b51fb9406467f5c",
                "3641a569ecbf2a8e",
                "04617042fe318947"
            ]
        ]
    },
    {
        "id": "3641a569ecbf2a8e",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "Run after 1 min ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 1920,
        "wires": [
            [
                "754f960811876190"
            ]
        ]
    },
    {
        "id": "8883a6953340dd55",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "Get top stocks list",
        "func": "let sql = \"select * from topstocks where close > 1 order by price_change_pct desc limit 20\"\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 640,
        "wires": [
            [
                "2ad86458813c2559"
            ]
        ]
    },
    {
        "id": "5c0ff719c6d937d9",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "Update closed order info every 5 mins",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 7-9 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 880,
        "wires": [
            [
                "967d8e6a5b9f09d9"
            ]
        ]
    },
    {
        "id": "56b04c20669f0d79",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "Flow 3A: Delete orders from portfolio that weren't filled",
        "info": "",
        "x": 520,
        "y": 1060,
        "wires": []
    },
    {
        "id": "99e1934223f82d9d",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "delete query",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"delete from portfolio where filled_qty is null and portfolioid = \" +id\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1100,
        "wires": [
            [
                "deec970008eefcad"
            ]
        ]
    },
    {
        "id": "deec970008eefcad",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "f7525ec45659a4d6",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 800,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "7e909ebd9301c22b",
        "type": "alpaca-orders-close",
        "z": "9360bfb4f2de3c97",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 430,
        "y": 1100,
        "wires": [
            [
                "99e1934223f82d9d"
            ]
        ]
    },
    {
        "id": "17a987699e50949a",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "04617042fe318947",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "Run after 3 hours",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 190,
        "y": 2240,
        "wires": [
            [
                "08386b36bde41610",
                "296c5006ed4b268e"
            ]
        ]
    },
    {
        "id": "c7304c87ab3c6335",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2360,
        "wires": [
            [
                "f4d9fcaf605fa089"
            ]
        ]
    },
    {
        "id": "f4d9fcaf605fa089",
        "type": "alpaca-query-order",
        "z": "9360bfb4f2de3c97",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 2360,
        "wires": [
            [
                "ded50d7cb5583443"
            ]
        ]
    },
    {
        "id": "2f41295d4f868808",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n//node.warn(clientid)\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  newfilled_type = '\" + type + \"', newfilled_side = '\" + side + \"', newfilled_tif = '\" + time_in_force + \"', newfilled_status = '\" + status + \"', newfilled_at = '\" + filled_at + \"', newfilled_price = '\" + filled_avg_price + \"', newfilled_qty = '\" + filled_qty + \"', newposition = \" + position + \" where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2360,
        "wires": [
            [
                "27825ad9efff5cdf"
            ]
        ]
    },
    {
        "id": "ded50d7cb5583443",
        "type": "split",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 2360,
        "wires": [
            [
                "2f41295d4f868808",
                "ac03ee952a42ed2e"
            ]
        ]
    },
    {
        "id": "27825ad9efff5cdf",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1140,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "08386b36bde41610",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select newclient_order_id from portfolio where portfolioid = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2300,
        "wires": [
            [
                "f8c4f183627e0f4c"
            ]
        ]
    },
    {
        "id": "f8c4f183627e0f4c",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 640,
        "y": 2300,
        "wires": [
            [
                "a44eedf270dd4324"
            ]
        ]
    },
    {
        "id": "307273f66388e504",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"newclient_order_id\"]\nmsg.clientid = clientorderid\nnode.warn(\"msg.clientid: \" +msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 2300,
        "wires": [
            [
                "c7304c87ab3c6335"
            ]
        ]
    },
    {
        "id": "a44eedf270dd4324",
        "type": "split",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 2300,
        "wires": [
            [
                "5545011a1cd55b34"
            ]
        ]
    },
    {
        "id": "5545011a1cd55b34",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 950,
        "y": 2300,
        "wires": [
            [
                "307273f66388e504"
            ]
        ]
    },
    {
        "id": "5c632d4b067b9813",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "update portfolio",
        "func": "let clientorderid = msg.payload[\"client_order_id\"]\nlet clientid = msg.clientid\n\nif ((clientorderid == clientid)) { // filled  only\n\n\nlet sql = \"update portfolio SET  trade_profit = ((newfilled_qty * newfilled_price) - (filled_price * filled_qty)), benchmark_profit = (benchmark_end - benchmark_start) where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2400,
        "wires": [
            [
                "fe5cd108c380dc0c"
            ]
        ]
    },
    {
        "id": "fe5cd108c380dc0c",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1140,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "ac03ee952a42ed2e",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 2400,
        "wires": [
            [
                "5c632d4b067b9813"
            ]
        ]
    },
    {
        "id": "ebcc0cfa99cc4673",
        "type": "alpaca-orders-close",
        "z": "9360bfb4f2de3c97",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 650,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "296c5006ed4b268e",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "Run after 3 mins",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 2460,
        "wires": [
            [
                "ebcc0cfa99cc4673"
            ]
        ]
    },
    {
        "id": "f2f7a9f34fdb6189",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "set and store portfolio and ticker variables",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet tickers = ''\nlet name = \"Buy Top Stocks\"\nlet algotype = \"intraday\"\nlet status = \"running\"\nlet trade_freq = 20\nlet sharpe = 0\nlet unixtime = 0\nlet benchmark = 'SPY'\nlet tickertype = 'stocks'\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet starting_balance = 0\nlet balance_today = 0\nlet ending_balance_today = 0\nlet balance_end = 0\nlet benchmark_start = 0\nlet benchmark_start_today = 0\nlet benchmark_current = 0\nlet benchmark_end_today = 0\nlet benchmark_end = 0\nlet gain_today_realized = 0\nlet gain_today_unrealized = 0\nlet pctgain_today = 0\nlet gainloss_realized = 0\nlet gainloss_unrealized = 0\nlet gainlosspct = 0\nlet benchmarkgain_today = 0\nlet benchmarkgain = 0\nlet benchmarkpct_today = 0\nlet benchmarkpct = 0\n\n\nmsg.id = id\nmsg.name = name\nmsg.trade = trade_freq\nmsg.status = status\nmsg.benchmark = benchmark\nmsg.account = account\nmsg.tickertype = tickertype\nmsg.psize = psize\nmsg.tickers = tickers\n\nlet sql = \"replace into algo (id,name, tickers, algotype, status, trade_freq,sharpe,unixtime, portfolio,starting_balance,balance_today,ending_balance_today,balance_end,benchmark_start,benchmark_start_today,benchmark_current,benchmark_end_today,benchmark_end,gain_today_realized, gain_today_unrealized,pctgain_today,gainloss_realized,gainloss_unrealized,gainlosspct, benchmarkgain_today, benchmarkgain,benchmarkpct_today,benchmarkpct) values ('\"\nsql += id + \"', '\" + name + \"','\" + tickers + \"','\" + algotype + \"', '\" + status + \"', '\" + trade_freq + \"','\" + sharpe + \"', '\" + unixtime + \"','\" + psize + \"','\" + starting_balance + \"', '\" + balance_today + \"','\" + ending_balance_today + \"','\" + balance_end + \"', '\" + benchmark_start + \"','\" + benchmark_start_today + \"','\" + benchmark_current + \"', '\" + benchmark_end_today + \"','\" + benchmark_end + \"','\" + gain_today_realized + \"', '\" + gain_today_unrealized + \"','\" + pctgain_today + \"','\" + gainloss_realized + \"', '\" + gainloss_unrealized + \"','\" + gainlosspct + \"','\" + benchmarkgain_today + \"', '\" + benchmarkgain + \"','\" + benchmarkpct_today + \"','\" + benchmarkpct + \"');\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            [
                "8537775e97dde297"
            ]
        ]
    },
    {
        "id": "7106874dcd4aca27",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "Describe the strategy in the \"set and store strategy variables\" node",
        "info": "",
        "x": 300,
        "y": 120,
        "wires": []
    },
    {
        "id": "262431ee3ffa4ec4",
        "type": "mysql",
        "z": "9360bfb4f2de3c97",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "5042f31cb36a6217"
            ]
        ]
    },
    {
        "id": "0ebcf22ca08d019b",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "0bff986810513a86",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 930,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "3e71c98e211a36b6",
        "type": "change",
        "z": "9360bfb4f2de3c97",
        "name": "set tickers, number_of_tickers",
        "rules": [
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "count",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "5042f31cb36a6217",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "update algos with tickers",
        "func": "let id = flow.get(\"portfolioid\")\n//let id = msg.id\n\nlet tickers = \"\"\n\nfor (var i = 0; i < msg.payload.length; i++) {\n\n    let ticker = msg.payload[i][\"symbol\"]\n    tickers += ticker+ \", \"\n}\n\nlet count = msg.payload.length\nnode.warn(tickers)\nlet sql = \"update algos set tickers = '\" + tickers + \"' where id = \" + id\nnode.warn(sql)\nmsg.tickers = tickers\nmsg.count = count\nmsg.topic = sql\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 320,
        "wires": [
            [
                "3e71c98e211a36b6",
                "0ebcf22ca08d019b"
            ]
        ]
    },
    {
        "id": "e95f3e8adb0b5773",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "Store Strategy in algos table",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 180,
        "wires": [
            [
                "f2f7a9f34fdb6189"
            ]
        ]
    },
    {
        "id": "09b3ed1da2e160c1",
        "type": "change",
        "z": "9360bfb4f2de3c97",
        "name": "set flow variable: ticker, qty,portfolioid",
        "rules": [
            {
                "t": "set",
                "p": "portfolioid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "name",
                "pt": "flow",
                "to": "name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "trades",
                "pt": "flow",
                "to": "trade",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickertype",
                "pt": "flow",
                "to": "tickertype",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8537775e97dde297",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "84af211eceb52712",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 750,
        "y": 180,
        "wires": [
            [
                "09b3ed1da2e160c1"
            ]
        ]
    },
    {
        "id": "14cf02b2391fc354",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "Display flow variables",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "ab22e2143aead97e"
            ]
        ]
    },
    {
        "id": "ab22e2143aead97e",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "Show variables",
        "func": "\nlet id = flow.get(\"portfolioid\")\nlet name = flow.get(\"name\")\nlet trade = flow.get(\"trades\")\nlet status = flow.get(\"status\")\nlet benchmark = flow.get(\"benchmark\")\nlet account = flow.get(\"account\")\nlet tickertype = flow.get(\"tickertype\")\nlet psize = flow.get(\"psize\")\nlet tickers = flow.get(\"tickers\")\nlet number = flow.get(\"number\")\n\nnode.warn(\"ID: \" +id+ \" Name: \" +name+ \" Trade: \" +trade+ \" Status: \" +status+ \" Benchmark: \" +benchmark+ \" Account: \" +account+ \" Tickertype: \" +tickertype+ \" Psize: \" +psize+ \" Tickers: \" +tickers+ \" Number of tickers: \" +number)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0b65617509290031",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "Optionally: get list of tickers from the Data Center and add to algos table",
        "info": "",
        "x": 320,
        "y": 260,
        "wires": []
    },
    {
        "id": "3bc9b73ccfdb26a2",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 320,
        "wires": [
            [
                "9df39e752bb09d34"
            ]
        ]
    },
    {
        "id": "417a43543a91dd8a",
        "type": "function-npm",
        "z": "9360bfb4f2de3c97",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n\n// use this to make sure we don't send an empty value to Polygon \nif ( symbol === null ){\n    symbol = 'SPY'}\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 580,
        "wires": [
            [
                "e660300e178d2dd9"
            ]
        ]
    },
    {
        "id": "aaa21892fd15da78",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nlet sql = \"update algos set bench_start = \" +price+ \" where id = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 580,
        "wires": [
            [
                "195d0d20c1473e5f"
            ]
        ]
    },
    {
        "id": "e660300e178d2dd9",
        "type": "polygon-last-trade-v3",
        "z": "9360bfb4f2de3c97",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 620,
        "y": 580,
        "wires": [
            [
                "aaa21892fd15da78"
            ]
        ]
    },
    {
        "id": "195d0d20c1473e5f",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2e7e1654e0b6e8f1",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 1030,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "4247912f566aa33e",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "set the benchmark_start value ",
        "info": "",
        "x": 440,
        "y": 540,
        "wires": []
    },
    {
        "id": "9df39e752bb09d34",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "Get top stocks list",
        "func": "let sql = \"select * from topstocks where close > 1 order by price_change_pct desc limit 20\"\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "262431ee3ffa4ec4"
            ]
        ]
    },
    {
        "id": "01c50bcac79e9ab0",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"50\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1360,
        "wires": [
            [
                "cd1aa3af71b470a9"
            ]
        ]
    },
    {
        "id": "cd1aa3af71b470a9",
        "type": "alpaca-query-order",
        "z": "9360bfb4f2de3c97",
        "conf": "e535f42f1df1b25f",
        "x": 700,
        "y": 1360,
        "wires": [
            [
                "49f43b5175d1b0fc"
            ]
        ]
    },
    {
        "id": "e365a60955679a0e",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((status == 'filled') && (clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  filled_type = '\" +type+ \"', filled_side = '\" + side + \"', filled_tif = '\" + time_in_force + \"', filled_status = '\" + status + \"', filled_at = '\" + filled_at + \"', filled_price = '\" + filled_avg_price + \"', filled_qty = '\" + filled_qty + \"', position = \" +position+ \" where clientorderid = '\" +clientorderid+ \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1360,
        "wires": [
            [
                "c34c93e12d196d9f"
            ]
        ]
    },
    {
        "id": "49f43b5175d1b0fc",
        "type": "split",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 1360,
        "wires": [
            [
                "e365a60955679a0e"
            ]
        ]
    },
    {
        "id": "c34c93e12d196d9f",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1200,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "36ed4e11785beb6e",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "Flow 4: Update portfolio table with order information when order is filled",
        "info": "",
        "x": 270,
        "y": 1180,
        "wires": []
    },
    {
        "id": "39352bf77ce94466",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select clientorderid from portfolio where portfolioid = \" +id\nmsg.topic = sql\n//node.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1300,
        "wires": [
            [
                "58f80e0328feb9b6"
            ]
        ]
    },
    {
        "id": "58f80e0328feb9b6",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 720,
        "y": 1300,
        "wires": [
            [
                "d45052431862c67e"
            ]
        ]
    },
    {
        "id": "75531f4783b170f6",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"clientorderid\"]\nmsg.clientid = clientorderid\n//node.warn(msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1300,
        "wires": [
            [
                "01c50bcac79e9ab0"
            ]
        ]
    },
    {
        "id": "d45052431862c67e",
        "type": "split",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 1300,
        "wires": [
            [
                "449bfaa14422703f"
            ]
        ]
    },
    {
        "id": "449bfaa14422703f",
        "type": "delay",
        "z": "9360bfb4f2de3c97",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1010,
        "y": 1300,
        "wires": [
            [
                "75531f4783b170f6"
            ]
        ]
    },
    {
        "id": "6e43dbad3a774c4e",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1300,
        "wires": [
            [
                "39352bf77ce94466"
            ]
        ]
    },
    {
        "id": "daf0e1c47af2f3fa",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "Update closed order info every 5 mins",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1240,
        "wires": [
            [
                "39352bf77ce94466"
            ]
        ]
    },
    {
        "id": "52116b014da9bc5b",
        "type": "comment",
        "z": "9360bfb4f2de3c97",
        "name": "Flow 3A: Delete orders from portfolio that weren't filled",
        "info": "",
        "x": 520,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0feb17df74b86974",
        "type": "function",
        "z": "9360bfb4f2de3c97",
        "name": "delete query",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"delete from portfolio where filled_qty is null and portfolioid = \" +id\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1460,
        "wires": [
            [
                "3d7b15773f7b7cde"
            ]
        ]
    },
    {
        "id": "3d7b15773f7b7cde",
        "type": "sqlite",
        "z": "9360bfb4f2de3c97",
        "mydb": "f7525ec45659a4d6",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 800,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "617a441bae7f074c",
        "type": "alpaca-orders-close",
        "z": "9360bfb4f2de3c97",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 430,
        "y": 1460,
        "wires": [
            [
                "0feb17df74b86974"
            ]
        ]
    },
    {
        "id": "5cf0c4d9ba178cd0",
        "type": "inject",
        "z": "9360bfb4f2de3c97",
        "name": "Csncels unfilled orders at 9:30 am",
        "props": [],
        "repeat": "",
        "crontab": "35 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 1460,
        "wires": [
            [
                "617a441bae7f074c"
            ]
        ]
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKJ2C0D69I05F8OOFZB0",
        "paper": true
    },
    {
        "id": "2a5b896e7d56f572",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "c50a1b659b2650bb",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "f7525ec45659a4d6",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "0bff986810513a86",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    },
    {
        "id": "84af211eceb52712",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    },
    {
        "id": "2e7e1654e0b6e8f1",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    }
]