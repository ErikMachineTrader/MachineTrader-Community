[
    {
        "id": "7cc4319909981033",
        "type": "tab",
        "label": "SPY One Second Trades",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "412dc8bf81cb12dd",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "This flow stores one second timeseries data, calculates moving average, and records difference between current price and moving average for BTCUSD",
        "info": "",
        "x": 540,
        "y": 40,
        "wires": []
    },
    {
        "id": "3cdcbc9c6c3683dd",
        "type": "inject",
        "z": "7cc4319909981033",
        "name": "Set symbol 1x only",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 280,
        "wires": [
            [
                "d24ab2c98c241b4b"
            ]
        ]
    },
    {
        "id": "b8c08401eec7d623",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "Specify ticker",
        "info": "",
        "x": 250,
        "y": 240,
        "wires": []
    },
    {
        "id": "d24ab2c98c241b4b",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "set and store ticker SPYvariables",
        "func": "let ticker = 'SPY'\nmsg.topic = ticker\n//node.warn(\"Global Ticker: \" +ticker)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 280,
        "wires": [
            [
                "371e470cdaf9a305"
            ]
        ]
    },
    {
        "id": "371e470cdaf9a305",
        "type": "change",
        "z": "7cc4319909981033",
        "name": "set global variables: ticker, avg_count",
        "rules": [
            {
                "t": "set",
                "p": "ticker",
                "pt": "global",
                "to": "topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "avg_count",
                "pt": "global",
                "to": "100",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "eccd11d50a3ce48a",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "Function node allows manipulation of the msg.payload",
        "info": "",
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "83430ea644574d9a",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "Change node used to stores flow variables ticker and count",
        "info": "",
        "x": 1060,
        "y": 240,
        "wires": []
    },
    {
        "id": "01ea32c930b7e944",
        "type": "sqlite",
        "z": "7cc4319909981033",
        "mydb": "7f069b118dd7946e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algo4 database",
        "x": 460,
        "y": 160,
        "wires": [
            [
                "52268e3fdee49d5b"
            ]
        ]
    },
    {
        "id": "8da367a7858f5557",
        "type": "inject",
        "z": "7cc4319909981033",
        "name": "CREATE sqlite table spy",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "create table IF NOT EXISTS spy (unixtime INTEGER PRIMARY KEY asc, ux INTEGER, cur_price REAL,avg_price REAL,price_dif REAL)",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "01ea32c930b7e944"
            ]
        ]
    },
    {
        "id": "52268e3fdee49d5b",
        "type": "debug",
        "z": "7cc4319909981033",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 160,
        "wires": []
    },
    {
        "id": "5a65832b3e760668",
        "type": "sqlite",
        "z": "7cc4319909981033",
        "mydb": "7f069b118dd7946e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algo4 database",
        "x": 700,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "8b661b37d6b041fe",
        "type": "inject",
        "z": "7cc4319909981033",
        "name": "Update current price each second",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 380,
        "wires": [
            [
                "54ef184ac2c6c994",
                "d24ab2c98c241b4b",
                "280f98f0890205fc"
            ]
        ]
    },
    {
        "id": "25ab07f8907130db",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "display polygon output",
        "func": "let ux = Date.now()\nlet nstime = '';\nlet price = '0';\nlet size = '';\nlet exchange = '';\nlet item = ''\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    nstime = item.participant_timestamp;\n    size = item.size;\n    exchange = item.exchange;\n   // node.warn(\"Current Price: \" +price)\n \n    msg.payload = price\n    \n}\n\nmsg.topic = ux\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "98ba0472c1a74a3e"
            ]
        ]
    },
    {
        "id": "951d059a0599d767",
        "type": "change",
        "z": "7cc4319909981033",
        "name": "global.price, global.ux",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ux",
                "pt": "global",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "23c18e21ad904cd1",
        "type": "polygon-last-trade-v3",
        "z": "7cc4319909981033",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 760,
        "y": 380,
        "wires": [
            [
                "25ab07f8907130db"
            ]
        ]
    },
    {
        "id": "54ef184ac2c6c994",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "prepay payload for polygon",
        "func": "let symbol = global.get(\"ticker\")\nlet count = 1 // get only one record\n\n// if crypto\n//symbol = symbol.replace(\"\",\"X:\")\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: count,\n}\n\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 380,
        "wires": [
            [
                "23c18e21ad904cd1"
            ]
        ]
    },
    {
        "id": "9018299094aaff7c",
        "type": "change",
        "z": "7cc4319909981033",
        "name": "global.average_price",
        "rules": [
            {
                "t": "set",
                "p": "average_price",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "82581c747b03c46e",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "export and save to a local csv file",
        "info": "",
        "x": 170,
        "y": 740,
        "wires": []
    },
    {
        "id": "975ecf9f5c322acd",
        "type": "sqlite",
        "z": "7cc4319909981033",
        "mydb": "7f069b118dd7946e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algo4 sqlite database",
        "x": 580,
        "y": 780,
        "wires": [
            [
                "d1fd47fc833ff0d2"
            ]
        ]
    },
    {
        "id": "7765b9625e671c53",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "Run every second. Calculate average and update tables",
        "info": "",
        "x": 380,
        "y": 520,
        "wires": []
    },
    {
        "id": "280f98f0890205fc",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "Store on local sqlite",
        "func": "let unixtime = Date.now()\nlet ticker = ''\nlet price = 0\n\nticker = global.get(\"ticker\")\nprice = global.get(\"price\")\n\n\nlet ux = (unixtime / 1000)\n\nlet sql = \"insert into \" +ticker+ \" (unixtime,ux,cur_price) values ('\" + unixtime + \"','\" +ux+ \"','\" + price+ \"');\"\n//node.warn(sql)\nmsg.topic = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 440,
        "wires": [
            [
                "5a65832b3e760668"
            ]
        ]
    },
    {
        "id": "c51f2017275bb35d",
        "type": "http in",
        "z": "7cc4319909981033",
        "name": "/api/download_spy",
        "url": "/api/download_spy",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 780,
        "wires": [
            [
                "31f87c5683b0bc5b"
            ]
        ]
    },
    {
        "id": "8a87f7454672e2d7",
        "type": "http response",
        "z": "7cc4319909981033",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"outfile.json\""
        },
        "x": 1090,
        "y": 780,
        "wires": []
    },
    {
        "id": "d1fd47fc833ff0d2",
        "type": "csv",
        "z": "7cc4319909981033",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "unixtime, local_time, cur_price, avg_price, price_dif",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 770,
        "y": 780,
        "wires": [
            [
                "7c8c61b00cadf6b9"
            ]
        ]
    },
    {
        "id": "31f87c5683b0bc5b",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "export query",
        "func": "let ticker = flow.get(\"ticker\")\n \n//msg.topic = \"select * from results_\" +ticker\nmsg.topic=\"select * from \" +ticker\nnode.warn(msg.topic)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 780,
        "wires": [
            [
                "975ecf9f5c322acd"
            ]
        ]
    },
    {
        "id": "7c8c61b00cadf6b9",
        "type": "file",
        "z": "7cc4319909981033",
        "name": "write report",
        "filename": "/data/store/algo3.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 930,
        "y": 780,
        "wires": [
            [
                "8a87f7454672e2d7"
            ]
        ]
    },
    {
        "id": "671484f61bea34c4",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "Flow #3",
        "info": "",
        "x": 90,
        "y": 340,
        "wires": []
    },
    {
        "id": "6f109524504b8290",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "Flow #4",
        "info": "",
        "x": 90,
        "y": 520,
        "wires": []
    },
    {
        "id": "3a9519273a32cad9",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "Flow #2",
        "info": "",
        "x": 90,
        "y": 240,
        "wires": []
    },
    {
        "id": "beb92d223226d1b9",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "Flow #1",
        "info": "",
        "x": 90,
        "y": 100,
        "wires": []
    },
    {
        "id": "19b9a5e99487cd0b",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "Flow #7",
        "info": "",
        "x": 90,
        "y": 700,
        "wires": []
    },
    {
        "id": "2f0bd009c1c4b517",
        "type": "inject",
        "z": "7cc4319909981033",
        "name": "calculate average price",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "0154d651204bae64"
            ]
        ]
    },
    {
        "id": "9ec3952c4e37f55a",
        "type": "sqlite",
        "z": "7cc4319909981033",
        "mydb": "7f069b118dd7946e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algo4 database",
        "x": 600,
        "y": 580,
        "wires": [
            [
                "b0d18bcceb61e9d9"
            ]
        ]
    },
    {
        "id": "0834d5db40f7d0af",
        "type": "calculator",
        "z": "7cc4319909981033",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "payload",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": 0,
        "x": 1040,
        "y": 580,
        "wires": [
            [
                "b4c9b7da79f249a1"
            ]
        ]
    },
    {
        "id": "b0d18bcceb61e9d9",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = ''\n\nfor (item of msg.payload) {\n    price = item.cur_price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 580,
        "wires": [
            [
                "0834d5db40f7d0af"
            ]
        ]
    },
    {
        "id": "908a6dcc4b4c4b94",
        "type": "comment",
        "z": "7cc4319909981033",
        "name": "Flow #8 Utilities",
        "info": "",
        "x": 120,
        "y": 900,
        "wires": []
    },
    {
        "id": "0154d651204bae64",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "select specified rows",
        "func": "let count = global.get(\"avg_count\") // number of rows to include in average\nlet ticker = global.get(\"ticker\")\nlet sql = \"select cur_price from \" +ticker+ \" order by unixtime desc limit \" +count \n//node.warn(sql)\nmsg.topic = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 580,
        "wires": [
            [
                "9ec3952c4e37f55a"
            ]
        ]
    },
    {
        "id": "ae9e3e1fbb6cdf6d",
        "type": "sqlite",
        "z": "7cc4319909981033",
        "mydb": "7f069b118dd7946e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algo4 database",
        "x": 540,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "cc2f6e1f16382884",
        "type": "inject",
        "z": "7cc4319909981033",
        "name": "each hour",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 960,
        "wires": [
            [
                "fde7c6e5d77e3c8d"
            ]
        ]
    },
    {
        "id": "26b6005234e85aed",
        "type": "inject",
        "z": "7cc4319909981033",
        "name": "select count(*) from dpy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select count(*) from spy",
        "payload": "",
        "payloadType": "date",
        "x": 800,
        "y": 960,
        "wires": [
            [
                "bf0256896d87f6f0"
            ]
        ]
    },
    {
        "id": "bf0256896d87f6f0",
        "type": "sqlite",
        "z": "7cc4319909981033",
        "mydb": "7f069b118dd7946e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algo4 database",
        "x": 1020,
        "y": 960,
        "wires": [
            [
                "809e8eb9d6d70e69"
            ]
        ]
    },
    {
        "id": "809e8eb9d6d70e69",
        "type": "debug",
        "z": "7cc4319909981033",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 960,
        "wires": []
    },
    {
        "id": "fde7c6e5d77e3c8d",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "delete past 2 hrs",
        "func": "let table = flow.get(\"ticker\")\nlet t = Date.now()\nt = (t -7200)\n\nlet sql = \"delete from \" +table+ \" where ux < \" +t  \nnode.warn(sql)\nmsg.topic = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 960,
        "wires": [
            [
                "ae9e3e1fbb6cdf6d"
            ]
        ]
    },
    {
        "id": "2f3de63a148b0b86",
        "type": "inject",
        "z": "7cc4319909981033",
        "name": "Display Flow Variables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 100,
        "wires": [
            [
                "49bb99275d6756b9"
            ]
        ]
    },
    {
        "id": "49bb99275d6756b9",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "display variables",
        "func": "let ticker = global.get(\"ticker\")\nlet count = global.get(\"avg_count\")\nlet ux = global.get(\"ux\")\nlet avg = global.get(\"average_price\")\nlet current_price = global.get(\"price\")\nlet current_diff = current_price - avg\nlet flow_diff = global.get(\"diff\")\n\nnode.warn(\"Ticker: \" +ticker+ \" Avg Count: \" +count+ \" Unixtime: \" +ux+ \" Current Price: \" + current_price + \" Avg Price: \" + avg + \" Price Difference: \" +current_diff+ \" Flow Diff: \" +flow_diff)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "97d5a0c7befe51fc",
        "type": "inject",
        "z": "7cc4319909981033",
        "name": "get count",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select count(*) from spy",
        "x": 880,
        "y": 100,
        "wires": [
            [
                "4f075bcc43daaa4e"
            ]
        ]
    },
    {
        "id": "4f075bcc43daaa4e",
        "type": "sqlite",
        "z": "7cc4319909981033",
        "mydb": "7f069b118dd7946e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algo4 database",
        "x": 1040,
        "y": 100,
        "wires": [
            [
                "43549ddaca7a644d"
            ]
        ]
    },
    {
        "id": "43549ddaca7a644d",
        "type": "debug",
        "z": "7cc4319909981033",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 100,
        "wires": []
    },
    {
        "id": "0dde4f93f9fd6a5f",
        "type": "inject",
        "z": "7cc4319909981033",
        "name": "Test algo4 table",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select cur_price from SPY order by unixtime desc limit 300",
        "x": 860,
        "y": 160,
        "wires": [
            [
                "bb5d431744bb4ab5"
            ]
        ]
    },
    {
        "id": "bb5d431744bb4ab5",
        "type": "sqlite",
        "z": "7cc4319909981033",
        "mydb": "7f069b118dd7946e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algo4 database",
        "x": 1040,
        "y": 160,
        "wires": [
            [
                "1a1ceef564c4c1b4"
            ]
        ]
    },
    {
        "id": "1a1ceef564c4c1b4",
        "type": "debug",
        "z": "7cc4319909981033",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 160,
        "wires": []
    },
    {
        "id": "98ba0472c1a74a3e",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "Format to 2 decimals",
        "func": "let price = msg.payload\nprice = price.toFixed(2)\nmsg.payload = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 380,
        "wires": [
            [
                "951d059a0599d767"
            ]
        ]
    },
    {
        "id": "b4c9b7da79f249a1",
        "type": "function",
        "z": "7cc4319909981033",
        "name": "Format to 2 decimals",
        "func": "let price = msg.payload\nprice = price.toFixed(2)\nmsg.payload = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 580,
        "wires": [
            [
                "9018299094aaff7c"
            ]
        ]
    },
    {
        "id": "7f069b118dd7946e",
        "type": "sqlitedb",
        "db": "/data/store/algo4",
        "mode": "RWC"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]