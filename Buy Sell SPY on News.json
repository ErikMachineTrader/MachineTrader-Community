[
    {
        "id": "5294b3fcaac2b7a8",
        "type": "tab",
        "label": "Buy/Short SPY on News Senetiment Daily",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1e0453e1ba620544",
        "type": "comment",
        "z": "5294b3fcaac2b7a8",
        "name": "The name of this strategy is \"Buy FANG Stocks\"",
        "info": "",
        "x": 220,
        "y": 60,
        "wires": []
    },
    {
        "id": "7e99e5c9706f0d9f",
        "type": "comment",
        "z": "5294b3fcaac2b7a8",
        "name": "The name of this strategy is \"Buy/Short SPY on News\"",
        "info": "",
        "x": 580,
        "y": 60,
        "wires": []
    },
    {
        "id": "cf9095822a65aeda",
        "type": "comment",
        "z": "5294b3fcaac2b7a8",
        "name": "This calculates current moving average of the news (last 100 items) and determins the sentiment score relative to the average sentiiment of all headlines (.1935)",
        "info": "",
        "x": 570,
        "y": 120,
        "wires": []
    },
    {
        "id": "e749155d4a58a545",
        "type": "function",
        "z": "5294b3fcaac2b7a8",
        "name": "create array for average",
        "func": "// this function reuses old variable names from time seeries arrays.  You can rename if you like.\n\nconst prices = [];\nlet item = 0\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload) {\n    price = item.sent;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 160,
        "wires": [
            [
                "8c575e25e2142ff5"
            ]
        ]
    },
    {
        "id": "b6175bc05cdbcc4f",
        "type": "function",
        "z": "5294b3fcaac2b7a8",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(3)\nnode.warn(\" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 160,
        "wires": [
            [
                "63fab94350512750"
            ]
        ]
    },
    {
        "id": "7ccffe1368343e94",
        "type": "mysql",
        "z": "5294b3fcaac2b7a8",
        "mydb": "f8ca5a41.3e1448",
        "name": "news",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "e749155d4a58a545"
            ]
        ]
    },
    {
        "id": "a269a392348f619c",
        "type": "inject",
        "z": "5294b3fcaac2b7a8",
        "name": "select sent from  headlines ",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 06 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select sent from headlines where sent is not null order by time_pub desc limit 1000;",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "7ccffe1368343e94"
            ]
        ]
    },
    {
        "id": "63fab94350512750",
        "type": "function",
        "z": "5294b3fcaac2b7a8",
        "name": "relative sentiment",
        "func": "let avg = msg.moving_avg\n//node.warn(\"Moving Avg: \" +avg)\nlet alltime = 0.19\nlet rel = avg - alltime\nrel = rel.toFixed(3)\nnode.warn(rel)\n\nif (rel > 0 && rel < .10){\n//    node.warn(\"positive\")\n}\n\nelse if (rel > .10){\n//  node.warn(\"strongly positive\")\n}\n\nelse if  (rel < 0) {\n//    node.warn(\"negative\")\n\n}\n\nmsg.sentiment = rel\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 160,
        "wires": [
            [
                "e6cf6243a8351ec8"
            ]
        ]
    },
    {
        "id": "8c575e25e2142ff5",
        "type": "calculator",
        "z": "5294b3fcaac2b7a8",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 740,
        "y": 160,
        "wires": [
            [
                "b6175bc05cdbcc4f"
            ]
        ]
    },
    {
        "id": "e6cf6243a8351ec8",
        "type": "change",
        "z": "5294b3fcaac2b7a8",
        "name": "sentiment",
        "rules": [
            {
                "t": "set",
                "p": "sentiment",
                "pt": "flow",
                "to": "sentiment",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1a1266b78c14e1a0",
        "type": "comment",
        "z": "5294b3fcaac2b7a8",
        "name": "Flow 1: Set values for portfoio and algos tables and launch strategy",
        "info": "",
        "x": 280,
        "y": 240,
        "wires": []
    },
    {
        "id": "09d6d5e2e238b61c",
        "type": "function",
        "z": "5294b3fcaac2b7a8",
        "name": "define values required for adding trade to portfolo",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet login = 'pta1b'\nlet ticker = 'SPY'\nlet name = \"Buy/Short SPY on New Sentiment\"\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 1 // number of tickers in portfolio\nlet account = 'paper'\nlet psize = 25000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet benchmark = 'SPY'\nlet algo_name = name\n\nmsg.id = id\nmsg.login = login\nmsg.account = account\nmsg.symbol = ticker\nmsg.name = name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.portfolio_size = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\nmsg.algo_type = algo_type\nmsg.algo_name = algo_name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 340,
        "wires": [
            [
                "3e783002f35fdbe6"
            ]
        ]
    },
    {
        "id": "bbfeb959b7cf7d94",
        "type": "inject",
        "z": "5294b3fcaac2b7a8",
        "name": "9:31 AM EST",
        "props": [],
        "repeat": "",
        "crontab": "31 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "09d6d5e2e238b61c"
            ]
        ]
    },
    {
        "id": "cbcdb0b9fa6d9d02",
        "type": "function",
        "z": "5294b3fcaac2b7a8",
        "name": "get list of tickers to buy",
        "func": "let ticker = msg.symbol\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 400,
        "wires": [
            [
                "37c57a282e7d1bc6"
            ]
        ]
    },
    {
        "id": "37c57a282e7d1bc6",
        "type": "split",
        "z": "5294b3fcaac2b7a8",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 400,
        "wires": [
            [
                "8598f462c52cdfb7"
            ]
        ]
    },
    {
        "id": "562202c191e9d1a6",
        "type": "function",
        "z": "5294b3fcaac2b7a8",
        "name": "place market or limit order ",
        "func": "let id = msg.id\nlet login = msg.login\nlet portfolioname = msg.name // name of the strategy\nlet ticker = msg.alpaca_symbol\nlet asset_class = msg.asset_class\nlet price = msg.price\nlet number = msg.number // number of tickers in portfolio \nlet psize = msg.portfolio_size\nlet account = msg.account\n//let target = flow.get(\"diff\")\n\nlet symbol = msg.symbol\n\n//node.warn(\"Psize: \" +psize+ \" Price: \" +price+ \" Number:\" +number)\n\n// use this to balance the portfolio equally\nlet qty = (psize / number) / price\nqty = Math.round(qty) // to get whole numbers \n\nlet order_value = price * qty\n\nlet localtime = new Date();\nlet cryptoticker = ''\n\n// crypto limit trades only\nif (asset_class == 'crypto') {\n    price = +price + +1 // price has to be $1 greater for cryptos\n}\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = symbol + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet order_type = 'limit'\n// add the order to the portfolio table\n\n\n// insert into portfolio table\n\nmsg.query = \"insert into portfolio (account,id,login,symbol,asset_class,portfolioname,order_time,order_qty,order_price,order_type,order_value,clientorderid) values ('\"\n        + account + \"', '\" + id + \"','\" + login + \"','\" + symbol + \"','\" + asset_class + \"','\" + portfolioname + \"','\" + localtime + \"','\" + qty + \"','\" + price + \"','\" + order_type + \"','\" + order_value + \"','\" + client_order_id + \"');\"\nnode.warn(msg.query)\n\nlet sentiment = flow.get(\"sentiment\")\nlet side = ''\n\nif (sentiment < 0) { side = 'sell' }\nelse (side == 'buy' )\n\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": side,\n    \"type\": order_type,\n     \"limit_price\": price,\n    \"client_order_id\": client_order_id,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 580,
        "wires": [
            [
                "3a8cb58bbd42d549",
                "f9cfe078bc4a6f63"
            ]
        ]
    },
    {
        "id": "3bd0b8f0b2e9801d",
        "type": "function",
        "z": "5294b3fcaac2b7a8",
        "name": "add values to algos table",
        "func": "let login = msg.login\nlet id = msg.id\nlet algo_name = msg.algo_name \nlet algo_type = msg.algo_type\nlet status = msg.status\nlet portfolio_size = msg.portfolio_size \nlet benchmark =  msg.benchmark\nlet benchmark_start = global.get(\"spy_current\")\n\nmsg.query = \"insert into algos (login,id,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values ('\" + login + \"','\" +id+ \"','\" +algo_name+ \"','\" +algo_type+ \"','\" +status+ \"','\" +portfolio_size+ \"','\" +benchmark+ \"','\" +benchmark_start+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 340,
        "wires": [
            [
                "cbcdb0b9fa6d9d02",
                "86382a58c64ae526"
            ]
        ]
    },
    {
        "id": "afb13cd3042a5482",
        "type": "function",
        "z": "5294b3fcaac2b7a8",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 400,
        "wires": [
            [
                "91e658e8eebdf809"
            ]
        ]
    },
    {
        "id": "45b2b1912dd4cf82",
        "type": "function-npm",
        "z": "5294b3fcaac2b7a8",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 460,
        "wires": [
            [
                "696dc8aa70f5ac35"
            ]
        ]
    },
    {
        "id": "c9de1b260a822455",
        "type": "function",
        "z": "5294b3fcaac2b7a8",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 460,
        "wires": [
            [
                "562202c191e9d1a6"
            ]
        ]
    },
    {
        "id": "696dc8aa70f5ac35",
        "type": "polygon-last-trade-v3",
        "z": "5294b3fcaac2b7a8",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 980,
        "y": 460,
        "wires": [
            [
                "c9de1b260a822455"
            ]
        ]
    },
    {
        "id": "3e783002f35fdbe6",
        "type": "delay",
        "z": "5294b3fcaac2b7a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 740,
        "y": 340,
        "wires": [
            [
                "3bd0b8f0b2e9801d"
            ]
        ]
    },
    {
        "id": "8598f462c52cdfb7",
        "type": "delay",
        "z": "5294b3fcaac2b7a8",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 730,
        "y": 400,
        "wires": [
            [
                "afb13cd3042a5482"
            ]
        ]
    },
    {
        "id": "8946f9a5bd69818a",
        "type": "function",
        "z": "5294b3fcaac2b7a8",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 460,
        "wires": [
            [
                "45b2b1912dd4cf82"
            ]
        ]
    },
    {
        "id": "91e658e8eebdf809",
        "type": "postgresql",
        "z": "5294b3fcaac2b7a8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1120,
        "y": 400,
        "wires": [
            [
                "b823961528ded5ce"
            ]
        ]
    },
    {
        "id": "b823961528ded5ce",
        "type": "split",
        "z": "5294b3fcaac2b7a8",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 290,
        "y": 460,
        "wires": [
            [
                "8946f9a5bd69818a"
            ]
        ]
    },
    {
        "id": "f9cfe078bc4a6f63",
        "type": "alpaca-order",
        "z": "5294b3fcaac2b7a8",
        "conf": "e535f42f1df1b25f",
        "x": 730,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "3a8cb58bbd42d549",
        "type": "postgresql",
        "z": "5294b3fcaac2b7a8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "86382a58c64ae526",
        "type": "postgresql",
        "z": "5294b3fcaac2b7a8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1160,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "f8ca5a41.3e1448",
        "type": "MySQLdatabase",
        "name": "news",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "news",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKIBIDH85QW5SV299MA9",
        "paper": true
    }
]