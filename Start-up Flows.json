[
    {
        "id": "ba4a0c20ed64a99c",
        "type": "tab",
        "label": "Globals",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b07b974808c3fb82",
        "type": "tab",
        "label": "Start-up",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cacf3ab122de5d63",
        "type": "tab",
        "label": "Update on Intervals",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eaf7eaba88ef790a",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 160,
                "y": 120,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 120,
                "wires": [
                    {
                        "id": "3f1e8332194aebfb",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "be835206.9115c",
        "type": "MySQLdatabase",
        "name": "fred",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "fred",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "f8ca5a41.3e1448",
        "type": "MySQLdatabase",
        "name": "news",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "news",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "AK5JJ8HEK9ID6JKPTBK0",
        "paper": false
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKN1N38TIEI4MG1ZT058",
        "paper": true
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "84bee360eed4f3ac",
        "type": "auth-database",
        "token": "arkgz9vzze"
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "17b30ba127a02c39",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "3f1e8332194aebfb",
        "type": "join",
        "z": "eaf7eaba88ef790a",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "parts.id",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "msg.parts.count.",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 950,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "d38eecffa05ba1d2",
        "type": "comment",
        "z": "ba4a0c20ed64a99c",
        "name": "Get benchmark SPY",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "c82f6ccfbed7afc4",
        "type": "polygon-last-trade-v3",
        "z": "ba4a0c20ed64a99c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 120,
        "wires": [
            [
                "a44e27a9f5b69aab"
            ]
        ]
    },
    {
        "id": "7a066a25ee3fc5dc",
        "type": "function-npm",
        "z": "ba4a0c20ed64a99c",
        "name": "Symbol",
        "func": "let symbol = 'SPY'\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nmsg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "c82f6ccfbed7afc4"
            ]
        ]
    },
    {
        "id": "a44e27a9f5b69aab",
        "type": "function",
        "z": "ba4a0c20ed64a99c",
        "name": "update query",
        "func": "let price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nmsg.price = price\n\nnode.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 120,
        "wires": [
            [
                "15acad4277848b97"
            ]
        ]
    },
    {
        "id": "c5d46db146bf14cf",
        "type": "inject",
        "z": "ba4a0c20ed64a99c",
        "name": "Get SPY at 6 AM",
        "props": [],
        "repeat": "",
        "crontab": "00 06 * * 1,2,3,4,5,6",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "7a066a25ee3fc5dc"
            ]
        ]
    },
    {
        "id": "15acad4277848b97",
        "type": "change",
        "z": "ba4a0c20ed64a99c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "spy_start",
                "pt": "global",
                "to": "price",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4e75d62a2a581944",
        "type": "polygon-last-trade-v3",
        "z": "ba4a0c20ed64a99c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 160,
        "wires": [
            [
                "8c2f6fe23af5b4e1"
            ]
        ]
    },
    {
        "id": "e99b47b7860fa68d",
        "type": "function-npm",
        "z": "ba4a0c20ed64a99c",
        "name": "Symbol",
        "func": "let symbol = 'SPY'\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nmsg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 160,
        "wires": [
            [
                "4e75d62a2a581944"
            ]
        ]
    },
    {
        "id": "8c2f6fe23af5b4e1",
        "type": "function",
        "z": "ba4a0c20ed64a99c",
        "name": "update query",
        "func": "let price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nmsg.price = price\n\nnode.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 160,
        "wires": [
            [
                "30fbfd249f0f1043"
            ]
        ]
    },
    {
        "id": "7beea6ee1f86665c",
        "type": "inject",
        "z": "ba4a0c20ed64a99c",
        "name": "Get SPY at 8 pm AM",
        "props": [],
        "repeat": "",
        "crontab": "00 20 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "e99b47b7860fa68d"
            ]
        ]
    },
    {
        "id": "30fbfd249f0f1043",
        "type": "change",
        "z": "ba4a0c20ed64a99c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "spy_close",
                "pt": "global",
                "to": "price",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2a2bf64426e450e0",
        "type": "polygon-last-trade-v3",
        "z": "ba4a0c20ed64a99c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 200,
        "wires": [
            [
                "6b07f5e48ede9e82"
            ]
        ]
    },
    {
        "id": "f20dbe6a53a03843",
        "type": "function-npm",
        "z": "ba4a0c20ed64a99c",
        "name": "Symbol",
        "func": "let symbol = 'SPY'\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nmsg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 200,
        "wires": [
            [
                "2a2bf64426e450e0"
            ]
        ]
    },
    {
        "id": "6b07f5e48ede9e82",
        "type": "function",
        "z": "ba4a0c20ed64a99c",
        "name": "update query",
        "func": "let price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nmsg.price = price\n\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 200,
        "wires": [
            [
                "7c5f957418699f12"
            ]
        ]
    },
    {
        "id": "f7b4eafdde2942d1",
        "type": "inject",
        "z": "ba4a0c20ed64a99c",
        "name": "Get current SPY ",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "f20dbe6a53a03843"
            ]
        ]
    },
    {
        "id": "7c5f957418699f12",
        "type": "change",
        "z": "ba4a0c20ed64a99c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "spy_current",
                "pt": "global",
                "to": "price",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "06053c76911ffbc5",
        "type": "function",
        "z": "ba4a0c20ed64a99c",
        "name": "create array for average",
        "func": "// this function reuses old variable names from time seeries arrays.  You can rename if you like.\n\nconst prices = [];\nlet item = 0\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload) {\n    price = item.sent;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 340,
        "wires": [
            [
                "30dc27240ea04bb0"
            ]
        ]
    },
    {
        "id": "70bfe78cdf265061",
        "type": "function",
        "z": "ba4a0c20ed64a99c",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(3)\n//node.warn(\" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 340,
        "wires": [
            [
                "a09c01734e854b9b"
            ]
        ]
    },
    {
        "id": "ac07d295f8af5d65",
        "type": "mysql",
        "z": "ba4a0c20ed64a99c",
        "mydb": "f8ca5a41.3e1448",
        "name": "news",
        "x": 390,
        "y": 340,
        "wires": [
            [
                "06053c76911ffbc5"
            ]
        ]
    },
    {
        "id": "4b1acbf433acc31c",
        "type": "inject",
        "z": "ba4a0c20ed64a99c",
        "name": "select sent from  headlines ",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select sent from headlines where sent is not null order by time_pub desc limit 1000;",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "ac07d295f8af5d65"
            ]
        ]
    },
    {
        "id": "a09c01734e854b9b",
        "type": "function",
        "z": "ba4a0c20ed64a99c",
        "name": "relative sentiment",
        "func": "let avg = msg.moving_avg\n//node.warn(\"Moving Avg: \" +avg)\nlet alltime = 0.19\nlet rel = avg - alltime\nrel = rel.toFixed(3)\n//node.warn(rel)\n\nif (rel > 0 && rel < .10){\n//    node.warn(\"positive\")\n}\n\nelse if (rel > .10){\n//  node.warn(\"strongly positive\")\n}\n\nelse if  (rel < 0) {\n//    node.warn(\"negative\")\n\n}\n\nmsg.sentiment = rel\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "6ff3db3ff6922102"
            ]
        ]
    },
    {
        "id": "1e3f502e16ff44fb",
        "type": "comment",
        "z": "ba4a0c20ed64a99c",
        "name": "Avg Sentiment on new headlines.  Set' look back' - 100 items . Avg sentiment for 100 items is 0.14.  Median = 0.09. Stddev = 13.0.  Max is 50.  Min is -.07. ",
        "info": "",
        "x": 570,
        "y": 300,
        "wires": []
    },
    {
        "id": "30dc27240ea04bb0",
        "type": "calculator",
        "z": "ba4a0c20ed64a99c",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 760,
        "y": 340,
        "wires": [
            [
                "70bfe78cdf265061"
            ]
        ]
    },
    {
        "id": "6ff3db3ff6922102",
        "type": "change",
        "z": "ba4a0c20ed64a99c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sentiment",
                "pt": "global",
                "to": "sentiment",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "avg_sentiment",
                "pt": "global",
                "to": "moving_avg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e621709b0c4ef670",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "Create table \"balances\"",
        "func": "let acct = \"balances\"\nmsg.query = \"create table IF NOT EXISTS \" +acct+ \" (account VARCHAR(10), unixtime BIGINT, balance FLOAT)\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 20,
        "wires": [
            [
                "631a469e18024430"
            ]
        ]
    },
    {
        "id": "078bf01dd0cbc9a8",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "Create  \"balances_daily\"",
        "func": "let acct = \"balances_daily\"\nmsg.query= \"create table IF NOT EXISTS \" +acct+ \" (account VARCHAR(10), unixtime BIGINT, balance FLOAT)\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 60,
        "wires": [
            [
                "bee75f0d6833360b"
            ]
        ]
    },
    {
        "id": "631a469e18024430",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 20,
        "wires": [
            [
                "3ff7c22ca9b1f0aa"
            ]
        ]
    },
    {
        "id": "3bf87b45a64e4651",
        "type": "inject",
        "z": "b07b974808c3fb82",
        "name": "Create tables on start up",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "e621709b0c4ef670",
                "078bf01dd0cbc9a8",
                "831ca851baa5084f",
                "f0dbd8e72afaa5cb",
                "0688f5948f88c1c9",
                "744da164a64bdc95",
                "4a4ba5d952c6dc53",
                "7c768c248b653964",
                "f7bd3f58b401658c",
                "6460ed56dca4fcf8",
                "02f7680b40c1ffb8",
                "04acfcf0862d344f",
                "257c4f67a3e378f0",
                "6df4d8421b49cd25",
                "6a41364a1e5352e0",
                "342e6dc22b669a94",
                "dd814a0d61d5ea0f",
                "b3e3fdeca7e1c7bc",
                "cbd1ce365a968804",
                "29c57a52bf3116e7",
                "490fa8830f4b82d8",
                "3e92d577b6d2c36a",
                "1043f31d3a025ec0",
                "37dc629170f7a1d7",
                "3488ab723abf7c9c"
            ]
        ]
    },
    {
        "id": "bee75f0d6833360b",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 60,
        "wires": [
            [
                "c4fb7079a9682f5c"
            ]
        ]
    },
    {
        "id": "754ce9e5fd5b34df",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "3cfcd80a3ec2adf3",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "831ca851baa5084f",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "Drop markets table",
        "func": "//msg.query = \"create table IF NOT EXISTS markets (symbol VARCHAR(10) PRIMARY KEY,name VARCHAR(100),polygon_symbol VARCHAR(10), alpaca_symbol VARCHAR(10), closing FLOAT,price24h FLOAT,price7d FLOAT, change24h FLOAT,change7d FLOAT,pct24 FLOAT,pct7d FLOAT)\"\nmsg.query = \"drop table markets\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 100,
        "wires": [
            [
                "754ce9e5fd5b34df"
            ]
        ]
    },
    {
        "id": "024a9946aedcf793",
        "type": "comment",
        "z": "b07b974808c3fb82",
        "name": "RUN ONCE AT START: ",
        "info": "",
        "x": 160,
        "y": 60,
        "wires": []
    },
    {
        "id": "f0dbd8e72afaa5cb",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "drop portfolio table",
        "func": "msg.query = \"drop table portfolio\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 340,
        "wires": [
            [
                "0e6f81eda18bd98a"
            ]
        ]
    },
    {
        "id": "0688f5948f88c1c9",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "drop algos table",
        "func": "msg.query = \"drop table algos\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 420,
        "wires": [
            [
                "3d107c14e3e942c7"
            ]
        ]
    },
    {
        "id": "668fa0aaf76cd1ff",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "744da164a64bdc95",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "drop positions table",
        "func": "msg.query = \"drop table positions\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 500,
        "wires": [
            [
                "668fa0aaf76cd1ff"
            ]
        ]
    },
    {
        "id": "0e6f81eda18bd98a",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "3d107c14e3e942c7",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5d9ea230dd5c6aec",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "market tickers",
        "func": "msg.payload = \"SPY,QQQ,TSLA,VXX,BTCUSD,ETHUSD\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 180,
        "wires": [
            [
                "ec227c7966efac05"
            ]
        ]
    },
    {
        "id": "4a4ba5d952c6dc53",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "5d9ea230dd5c6aec"
            ]
        ]
    },
    {
        "id": "ec227c7966efac05",
        "type": "split",
        "z": "b07b974808c3fb82",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 180,
        "wires": [
            [
                "64c079ca6b80ce8e"
            ]
        ]
    },
    {
        "id": "64c079ca6b80ce8e",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "insert markets query",
        "func": "let symbol = msg.payload\nmsg.query = \"insert into markets (symbol) values ('\" +symbol+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "76a92cdbbdfa5c55"
            ]
        ]
    },
    {
        "id": "76a92cdbbdfa5c55",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f177f200d38914de",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "watchlist tickers",
        "func": "msg.payload = \"AAPL,JPM,BAC,GLD\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 300,
        "wires": [
            [
                "2ab6d6e028e3f402"
            ]
        ]
    },
    {
        "id": "7c768c248b653964",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 300,
        "wires": [
            [
                "f177f200d38914de"
            ]
        ]
    },
    {
        "id": "2ab6d6e028e3f402",
        "type": "split",
        "z": "b07b974808c3fb82",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 300,
        "wires": [
            [
                "32375c38228fb456"
            ]
        ]
    },
    {
        "id": "b3abb19951f149e6",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "4849b334d80cf851",
        "type": "comment",
        "z": "b07b974808c3fb82",
        "name": "RUN ONCE AT START: Create alpaca_assets table",
        "info": "",
        "x": 230,
        "y": 1200,
        "wires": []
    },
    {
        "id": "ab3a4e144962d0a0",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "get crypto symbols from alpaca_assets",
        "func": "msg.query = \"select symbol from alpaca_assets where exchange = 'FTXU'\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1400,
        "wires": [
            [
                "a56eb669bafb62d7"
            ]
        ]
    },
    {
        "id": "019c7fbd2a564b14",
        "type": "split",
        "z": "b07b974808c3fb82",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 1400,
        "wires": [
            [
                "b089191ce6309173"
            ]
        ]
    },
    {
        "id": "a56eb669bafb62d7",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 1400,
        "wires": [
            [
                "019c7fbd2a564b14"
            ]
        ]
    },
    {
        "id": "32375c38228fb456",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "insert watchlist query",
        "func": "let symbol = msg.payload\nmsg.query = \"insert into watchlist (symbol) values ('\" +symbol+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "b3abb19951f149e6"
            ]
        ]
    },
    {
        "id": "f7bd3f58b401658c",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "Drop watchlist table",
        "func": "//msg.query = \"create table IF NOT EXISTS watchlist (symbol VARCHAR(10) PRIMARY KEY,name VARCHAR(100),polygon_symbol VARCHAR(10), alpaca_symbol VARCHAR(10), closing FLOAT,price24h FLOAT,price7d FLOAT, change24h FLOAT,change7d FLOAT,pct24 FLOAT,pct7d FLOAT)\"\n//msg.query = \"delete from watchlist\"\nmsg.query = \"drop table watchlist\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 220,
        "wires": [
            [
                "3cfcd80a3ec2adf3"
            ]
        ]
    },
    {
        "id": "acc0f874a96410a1",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "update markets from alpaca_assets",
        "func": "msg.query = \"UPDATE markets SET name = alpaca_assets.name, polygon_symbol = alpaca_assets.polygon_symbol, alpaca_symbol = alpaca_assets.alpaca_symbol  FROM alpaca_assets where markets.symbol = alpaca_assets.symbol\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1440,
        "wires": [
            [
                "dca92390d4171d69"
            ]
        ]
    },
    {
        "id": "dca92390d4171d69",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "0e3e69521b81e040",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "5fcece070e188235",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "update watchlist from alpaca_assets",
        "func": "msg.query = \"UPDATE watchlist SET name = alpaca_assets.name, polygon_symbol = alpaca_assets.polygon_symbol, alpaca_symbol = alpaca_assets.alpaca_symbol  FROM alpaca_assets where watchlist.symbol = alpaca_assets.symbol\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1480,
        "wires": [
            [
                "0e3e69521b81e040"
            ]
        ]
    },
    {
        "id": "210fb456c8780b4e",
        "type": "comment",
        "z": "b07b974808c3fb82",
        "name": "Orders Table",
        "info": "",
        "x": 90,
        "y": 1620,
        "wires": []
    },
    {
        "id": "cbe4ed377a5ab611",
        "type": "split",
        "z": "b07b974808c3fb82",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1820,
        "wires": [
            [
                "603c766993d5d200"
            ]
        ]
    },
    {
        "id": "859e864af1fab66e",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "385288e79d55d297",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "get closed orders - live",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1820,
        "wires": [
            [
                "ae486abdfa3ac74b"
            ]
        ]
    },
    {
        "id": "ae486abdfa3ac74b",
        "type": "alpaca-query-order",
        "z": "b07b974808c3fb82",
        "conf": "0c86a5f06a42b505",
        "x": 620,
        "y": 1820,
        "wires": [
            [
                "cbe4ed377a5ab611"
            ]
        ]
    },
    {
        "id": "603c766993d5d200",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'live');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1820,
        "wires": [
            [
                "859e864af1fab66e"
            ]
        ]
    },
    {
        "id": "ea667445062b8dad",
        "type": "split",
        "z": "b07b974808c3fb82",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1860,
        "wires": [
            [
                "712e2f28fc4b29d0"
            ]
        ]
    },
    {
        "id": "e55ce53c5389bf94",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "5e0a28eddb6a4c95",
        "type": "alpaca-query-order",
        "z": "b07b974808c3fb82",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1860,
        "wires": [
            [
                "ea667445062b8dad"
            ]
        ]
    },
    {
        "id": "8052af0ed2714ec0",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "truncate orders table",
        "func": "//msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\nmsg.query = \"truncate table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1660,
        "wires": [
            [
                "d292a7801e9252c2"
            ]
        ]
    },
    {
        "id": "d292a7801e9252c2",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "d49cbeee06c7ad4e",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "get closed orders - paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1860,
        "wires": [
            [
                "5e0a28eddb6a4c95"
            ]
        ]
    },
    {
        "id": "712e2f28fc4b29d0",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1860,
        "wires": [
            [
                "e55ce53c5389bf94"
            ]
        ]
    },
    {
        "id": "d8337404815c0083",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "eb2c6cac4bdf5ccb",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "update symbol from alpaca_assets",
        "func": "msg.query = \"UPDATE orders SET symbol = alpaca_assets.symbol FROM alpaca_assets where orders.symbol = alpaca_assets.alpaca_symbol\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1900,
        "wires": [
            [
                "d8337404815c0083"
            ]
        ]
    },
    {
        "id": "e5394ab9123c8fd1",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "Create portfolio table",
        "func": "msg.query = \"CREATE table IF NOT EXISTS portfolio (login VARCHAR(20), id BIGINT, account VARCHAR(10), portfolioname VARCHAR(100), asset_id VARCHAR(50), symbol VARCHAR(10), name VARCHAR(100), exchange VARCHAR(10), asset_class VARCHAR(10), asset_marginable VARCHAR(10), order_time VARCHAR(100), order_price FLOAT, order_qty FLOAT,order_value float, order_type VARCHAR(10), filled_at VARCHAR(100), qty FLOAT, avg_entry_price FLOAT, side VARCHAR(10), market_value FLOAT, market_value_today FLOAT,cost_basis FLOAT, unrealized_pl FLOAT, unrealized_plpc FLOAT, unrealized_intraday_pl FLOAT, unrealized_intraday_plpc FLOAT, current_price FLOAT, lastday_price FLOAT, change_today FLOAT, clientorderid VARCHAR(100), newqty FLOAT, newside VARCHAR(10), newfilled_at VARCHAR(100), newavg_entry_price FLOAT, newcost_basis FLOAT, newclient_order_id VARCHAR(100))\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 380,
        "wires": [
            [
                "b67ac1485b88b9a2"
            ]
        ]
    },
    {
        "id": "a2a5390621e59bc7",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "Create algos table",
        "func": "msg.query = \"create table IF NOT EXISTS algos (login varchar(20), id BIGINT, algo_name VARCHAR(100), algo_type VARCHAR(10), status VARCHAR(10), benchmark VARCHAR(10), benchmark_start FLOAT,portfolio_size FLOAT, gain_today FLOAT, pctgain_today FLOAT, gain_alltime FLOAT, pctgain_alltime FLOAT,pctbench_today FLOAT, pctbench_alltime FLOAT, info_ratio FLOAT, tickers VARCHAR(5000),asset_class VARCHAR(10), number INT );\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 460,
        "wires": [
            [
                "fddcdb8202fadbfc"
            ]
        ]
    },
    {
        "id": "beeaeef8f9baca11",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "create positions table",
        "func": "msg.query = \"create table IF NOT EXISTS positions (id BIGINT, asset_id VARCHAR(100), portfolioname VARCHAR(100), symbol VARCHAR(10) PRIMARY KEY, name VARCHAR(500), account VARCHAR(10), exchange VARCHAR(100), asset_class VARCHAR(100), asset_marginable VARCHAR(100), qty FLOAT, avg_entry_price FLOAT, side VARCHAR(100), market_value FLOAT, cost_basis FLOAT, unrealized_pl FLOAT, unrealized_plpc FLOAT, unrealized_intraday_pl FLOAT, unrealized_intraday_plpc FLOAT, current_price FLOAT, lastday_price FLOAT, change_today FLOAT, qty_available FLOAT, status VARCHAR(10), orderid VARCHAR(100))\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 540,
        "wires": [
            [
                "fb6b5904d12145ae"
            ]
        ]
    },
    {
        "id": "6460ed56dca4fcf8",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 380,
        "wires": [
            [
                "e5394ab9123c8fd1"
            ]
        ]
    },
    {
        "id": "fb6b5904d12145ae",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "b67ac1485b88b9a2",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "fddcdb8202fadbfc",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "02f7680b40c1ffb8",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 460,
        "wires": [
            [
                "a2a5390621e59bc7"
            ]
        ]
    },
    {
        "id": "04acfcf0862d344f",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 540,
        "wires": [
            [
                "beeaeef8f9baca11"
            ]
        ]
    },
    {
        "id": "cb48ef1552c981fe",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1900,
        "wires": [
            [
                "eb2c6cac4bdf5ccb"
            ]
        ]
    },
    {
        "id": "ea59d43ca0776a4e",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "delete from balances",
        "func": "msg.query = \"delete from balances\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 20,
        "wires": [
            [
                "9c003794fd476ec4"
            ]
        ]
    },
    {
        "id": "9c003794fd476ec4",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "3ff7c22ca9b1f0aa",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 20,
        "wires": [
            [
                "ea59d43ca0776a4e"
            ]
        ]
    },
    {
        "id": "b6b6ee8c8b4a875b",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "delete from balances_daily",
        "func": "msg.query = \"delete from balances_daily\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 60,
        "wires": [
            [
                "0fee799bd3a34932"
            ]
        ]
    },
    {
        "id": "0fee799bd3a34932",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "c4fb7079a9682f5c",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 60,
        "wires": [
            [
                "b6b6ee8c8b4a875b"
            ]
        ]
    },
    {
        "id": "392ee7e088091e8e",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "create order_confirms table",
        "func": "//msg.query = \"DROP TABLE order_confirms\"\nmsg.query = \"create table IF NOT EXISTS order_confirms (id VARCHAR(200), client_order_id VARCHAR(200), created_at VARCHAR(200), updated_at VARCHAR(200), submitted_at VARCHAR(200), filled_at VARCHAR(200), expired_at VARCHAR(200), canceled_at VARCHAR(200), failed_at VARCHAR(200), replaced_at VARCHAR(200), replaced_by VARCHAR(200), replaces VARCHAR(200), asset_id VARCHAR(200), symbol VARCHAR(40), asset_class VARCHAR(40), notional FLOAT, qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(40), order_type VARCHAR(40), type VARCHAR(40), side VARCHAR(40),  time_in_force VARCHAR(40), limit_price FLOAT, stop_price FLOAT, status VARCHAR(40), extended_hours BOOLEAN, legs BOOLEAN, trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(40), subtag VARCHAR(200), source VARCHAR(40))\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 620,
        "wires": [
            [
                "51a2d4d909afb43c"
            ]
        ]
    },
    {
        "id": "51a2d4d909afb43c",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "257c4f67a3e378f0",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 620,
        "wires": [
            [
                "392ee7e088091e8e"
            ]
        ]
    },
    {
        "id": "6df4d8421b49cd25",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "drop orders_confirms table",
        "func": "msg.query = \"drop table orders_confirms\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 580,
        "wires": [
            [
                "9097d460d5b1a7d6"
            ]
        ]
    },
    {
        "id": "9097d460d5b1a7d6",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a37be957761c0202",
        "type": "inject",
        "z": "b07b974808c3fb82",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1240,
        "wires": [
            [
                "80ec860f2b4d361f",
                "0e6d04573ca27580",
                "da588b3e44787b5b",
                "889b32faee534b68",
                "0351f8a4ef61977a",
                "c3500c079570fc15",
                "84cee910a9b76899"
            ]
        ]
    },
    {
        "id": "6e492e64280c58ac",
        "type": "alpaca-asset-query",
        "z": "b07b974808c3fb82",
        "conf": "e535f42f1df1b25f",
        "x": 470,
        "y": 1280,
        "wires": [
            [
                "c04bdce5a23c869f"
            ]
        ]
    },
    {
        "id": "80ec860f2b4d361f",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "truncate alpaca_assets",
        "func": "msg.query = \"truncate table alpaca_assets\"\n//msg.query = \"CREATE TABLE IF NOT EXISTS alpaca_assets (id VARCHAR(100), symbol varchar(10) PRIMARY KEY, name VARCHAR(200), alpaca_symbol VARCHAR(10), polygon_symbol VARCHAR(10), easy_to_borrow BOOLEAN, exchange VARCHAR(10), shortable BOOLEAN, fractionable BOOLEAN, marginable BOOLEAN, status VARCHAR(10), tradable BOOLEAN)\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1240,
        "wires": [
            [
                "3017122c50daf028"
            ]
        ]
    },
    {
        "id": "3017122c50daf028",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "0e6d04573ca27580",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1280,
        "wires": [
            [
                "6e492e64280c58ac"
            ]
        ]
    },
    {
        "id": "c04bdce5a23c869f",
        "type": "split",
        "z": "b07b974808c3fb82",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 1280,
        "wires": [
            [
                "8e5bd6d3012453c4"
            ]
        ]
    },
    {
        "id": "89ec8205ed8d8d50",
        "type": "split",
        "z": "b07b974808c3fb82",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1740,
        "wires": [
            [
                "9dfca1fa77e417a1"
            ]
        ]
    },
    {
        "id": "faa5bd39656ac758",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "8f8fec0a4583bb42",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "get open orders - live",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"open\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1740,
        "wires": [
            [
                "edbfe65cbd67e164"
            ]
        ]
    },
    {
        "id": "edbfe65cbd67e164",
        "type": "alpaca-query-order",
        "z": "b07b974808c3fb82",
        "conf": "0c86a5f06a42b505",
        "x": 620,
        "y": 1740,
        "wires": [
            [
                "89ec8205ed8d8d50"
            ]
        ]
    },
    {
        "id": "9dfca1fa77e417a1",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'open', 'live');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1740,
        "wires": [
            [
                "faa5bd39656ac758"
            ]
        ]
    },
    {
        "id": "5d7fc80d484db54d",
        "type": "split",
        "z": "b07b974808c3fb82",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1780,
        "wires": [
            [
                "b3448449065a9522"
            ]
        ]
    },
    {
        "id": "636598d00dc1cbed",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "8a554ddefd1ca373",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "get open orders - paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"open\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1780,
        "wires": [
            [
                "d25ef21247d7ddba"
            ]
        ]
    },
    {
        "id": "d25ef21247d7ddba",
        "type": "alpaca-query-order",
        "z": "b07b974808c3fb82",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1780,
        "wires": [
            [
                "5d7fc80d484db54d"
            ]
        ]
    },
    {
        "id": "b3448449065a9522",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'open', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1780,
        "wires": [
            [
                "636598d00dc1cbed"
            ]
        ]
    },
    {
        "id": "562714b420a4f935",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1740,
        "wires": [
            [
                "8f8fec0a4583bb42"
            ]
        ]
    },
    {
        "id": "d7fcf78acb5be758",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1780,
        "wires": [
            [
                "8a554ddefd1ca373"
            ]
        ]
    },
    {
        "id": "3459c5fa43cee2f5",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1820,
        "wires": [
            [
                "385288e79d55d297"
            ]
        ]
    },
    {
        "id": "f9f97a79e85820cb",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1860,
        "wires": [
            [
                "d49cbeee06c7ad4e"
            ]
        ]
    },
    {
        "id": "a6a442ca6539e065",
        "type": "inject",
        "z": "b07b974808c3fb82",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1660,
        "wires": [
            [
                "8052af0ed2714ec0",
                "562714b420a4f935",
                "d7fcf78acb5be758",
                "3459c5fa43cee2f5",
                "f9f97a79e85820cb",
                "cb48ef1552c981fe"
            ]
        ]
    },
    {
        "id": "e2356977199fd9df",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "create orders table ",
        "func": "msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100), client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\n//msg.query = \"drop table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 700,
        "wires": [
            [
                "e823387639e0398f"
            ]
        ]
    },
    {
        "id": "e823387639e0398f",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "490fa8830f4b82d8",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 700,
        "wires": [
            [
                "e2356977199fd9df"
            ]
        ]
    },
    {
        "id": "6a41364a1e5352e0",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "drop orders table",
        "func": "msg.query = \"drop table orders\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 660,
        "wires": [
            [
                "1a72ad3e6d08f045"
            ]
        ]
    },
    {
        "id": "1a72ad3e6d08f045",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "bbd81bff90f7ca49",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "create orders_open table ",
        "func": "msg.query = \"create table IF NOT EXISTS orders_open (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\n//msg.query = \"drop table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 840,
        "wires": [
            [
                "ab7ef561965b9c07"
            ]
        ]
    },
    {
        "id": "ab7ef561965b9c07",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "3e92d577b6d2c36a",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 840,
        "wires": [
            [
                "bbd81bff90f7ca49"
            ]
        ]
    },
    {
        "id": "342e6dc22b669a94",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "drop orders table",
        "func": "msg.query = \"drop table orders_open\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 800,
        "wires": [
            [
                "b5415773ceb24f6c"
            ]
        ]
    },
    {
        "id": "b5415773ceb24f6c",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "7d4c7dee4eb620d6",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "create temp_orders table ",
        "func": "msg.query = \"create table IF NOT EXISTS temp_orders (symbol VARCHAR(10) PRIMARY KEY, open Boolean)\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 920,
        "wires": [
            [
                "e9f983f04f44606a"
            ]
        ]
    },
    {
        "id": "e9f983f04f44606a",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "1043f31d3a025ec0",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 920,
        "wires": [
            [
                "7d4c7dee4eb620d6"
            ]
        ]
    },
    {
        "id": "dd814a0d61d5ea0f",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "drop temp_orders table",
        "func": "msg.query = \"drop table temp_orders\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 880,
        "wires": [
            [
                "10b4988e57078231"
            ]
        ]
    },
    {
        "id": "10b4988e57078231",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "8e5bd6d3012453c4",
        "type": "switch",
        "z": "b07b974808c3fb82",
        "name": "active only",
        "property": "payload[\"status\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 1280,
        "wires": [
            [
                "fdb5edc2d8e53d44"
            ],
            []
        ]
    },
    {
        "id": "fdb5edc2d8e53d44",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "insert into alpaca_assets",
        "func": "let symbol = msg.payload[\"symbol\"]\nlet name = msg.payload[\"name\"]\nlet exchange = msg.payload[\"exchange\"]\nlet status = msg.payload[\"status\"]\nlet shortable = msg.payload[\"shortable\"]\nlet tradable = msg.payload[\"tradable\"]\nlet fractionable = msg.payload[\"fractionable\"]\nlet marginable = msg.payload[\"marginable\"]\nlet easy = msg.payload[\"easy_to_borrow\"]\nname = name.replace(\"'\",\"\")\nsymbol = symbol.replace(\"/\",\"\")\n\n//msg.query = \"insert into alpaca_assets (symbol, name, exchange, tradable, shortable, fractionable, marginable, easy_to_borrow, status)  values ('\" + symbol + \"','\" + name + \"','\" + exchange + \"','\" + tradable + \"','\" + shortable + \"','\" +fractionable+ \"','\" +marginable+ \"','\" +easy+ \"','\" +status+ \"');\"\nmsg.query = \"insert into alpaca_assets (symbol, exchange, tradable, shortable, fractionable, marginable, easy_to_borrow, status)  values ('\" + symbol + \"','\" + exchange + \"','\" + tradable + \"','\" + shortable + \"','\" + fractionable + \"','\" + marginable + \"','\" + easy + \"','\" + status + \"');\"\n\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1280,
        "wires": [
            [
                "0ce9f0656dde1283"
            ]
        ]
    },
    {
        "id": "0ce9f0656dde1283",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1160,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "ef50a17233e14030",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "drop alpaca_assets",
        "func": "msg.query = \"drop table alpaca_assets\"\n//msg.query = \"CREATE TABLE IF NOT EXISTS alpaca_assets (id VARCHAR(100), symbol varchar(10) PRIMARY KEY, name VARCHAR(200), alpaca_symbol VARCHAR(10), polygon_symbol VARCHAR(10), easy_to_borrow BOOLEAN, exchange VARCHAR(10), shortable BOOLEAN, fractionable BOOLEAN, marginable BOOLEAN, status VARCHAR(10), tradable BOOLEAN)\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 960,
        "wires": [
            [
                "245237e26a29c64b"
            ]
        ]
    },
    {
        "id": "245237e26a29c64b",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "d66cd8dfaaa879c3",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "create alpaca_assets",
        "func": "//msg.query = \"truncate table alpaca_assets\"\nmsg.query = \"CREATE TABLE IF NOT EXISTS alpaca_assets (id VARCHAR(100), symbol varchar(20) PRIMARY KEY, name VARCHAR(200), alpaca_symbol VARCHAR(20), polygon_symbol VARCHAR(20), easy_to_borrow BOOLEAN, exchange VARCHAR(10), shortable BOOLEAN, fractionable BOOLEAN, marginable BOOLEAN, status VARCHAR(10), tradable BOOLEAN)\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1000,
        "wires": [
            [
                "eef90f0aadd69d6a"
            ]
        ]
    },
    {
        "id": "eef90f0aadd69d6a",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "37dc629170f7a1d7",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 1000,
        "wires": [
            [
                "d66cd8dfaaa879c3"
            ]
        ]
    },
    {
        "id": "0351f8a4ef61977a",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "35",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1440,
        "wires": [
            [
                "acc0f874a96410a1"
            ]
        ]
    },
    {
        "id": "c3500c079570fc15",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1480,
        "wires": [
            [
                "5fcece070e188235"
            ]
        ]
    },
    {
        "id": "aa1988ac237a6a35",
        "type": "alpaca-asset-query",
        "z": "b07b974808c3fb82",
        "conf": "e535f42f1df1b25f",
        "x": 470,
        "y": 1320,
        "wires": [
            [
                "ef1a701f3c1b1fac"
            ]
        ]
    },
    {
        "id": "da588b3e44787b5b",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1320,
        "wires": [
            [
                "aa1988ac237a6a35"
            ]
        ]
    },
    {
        "id": "ef1a701f3c1b1fac",
        "type": "split",
        "z": "b07b974808c3fb82",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 1320,
        "wires": [
            [
                "1fec149e437bb892"
            ]
        ]
    },
    {
        "id": "1fec149e437bb892",
        "type": "switch",
        "z": "b07b974808c3fb82",
        "name": "active only",
        "property": "payload[\"status\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 1320,
        "wires": [
            [
                "e6acbe672f94a7fe"
            ],
            []
        ]
    },
    {
        "id": "e6acbe672f94a7fe",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "insert into alpaca_assets",
        "func": "let symbol = msg.payload[\"symbol\"]\nlet name = msg.payload[\"name\"]\n\nname = name.substring(0, 100);\nname = name.replace(\"'\",\"\")\nsymbol = symbol.replace(\"/\",\"\")\n\nmsg.query = \"update alpaca_assets set name = '\" + name + \"' where symbol = '\" +symbol+ \"';\"\n//msg.query = \"insert into alpaca_assets (symbol, exchange, tradable, shortable, fractionable, marginable, easy_to_borrow, status)  values ('\" + symbol + \"','\" + exchange + \"','\" + tradable + \"','\" + shortable + \"','\" + fractionable + \"','\" + marginable + \"','\" + easy + \"','\" + status + \"');\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1320,
        "wires": [
            [
                "3cc7aaa67e6efd33"
            ]
        ]
    },
    {
        "id": "3cc7aaa67e6efd33",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1160,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "b089191ce6309173",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "update alpaca_symbol",
        "func": "let symbol = msg.payload[\"symbol\"]\nsymbol = symbol.substring(0, 19);\n//node.warn(\"Symbol: \" +symbol)\n\nlet polygon_symbol = \"X:\" + symbol\nlet alpaca_symbol = symbol.replace(\"USD\",\"/USD\")\n\n\nalpaca_symbol = alpaca_symbol.substring(0, 19);\npolygon_symbol = polygon_symbol.substring(0, 19);\n\n\nmsg.query = \"update alpaca_assets set alpaca_symbol = '\" +alpaca_symbol+ \"', polygon_symbol = '\" +polygon_symbol+ \"' where symbol = '\" +symbol+ \"' and status = 'active';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1400,
        "wires": [
            [
                "a9c79aa24007aa23"
            ]
        ]
    },
    {
        "id": "a9c79aa24007aa23",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "889b32faee534b68",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1400,
        "wires": [
            [
                "ab3a4e144962d0a0"
            ]
        ]
    },
    {
        "id": "9c6aed00631ef656",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "Create markets table",
        "func": "msg.query = \"create table IF NOT EXISTS markets (symbol VARCHAR(20) PRIMARY KEY,name VARCHAR(100),polygon_symbol VARCHAR(20), alpaca_symbol VARCHAR(20), closing FLOAT,price24h FLOAT,price7d FLOAT, change24h FLOAT,change7d FLOAT,pct24 FLOAT,pct7d FLOAT)\"\n//msg.query = \"drop table markets\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 140,
        "wires": [
            [
                "fc18e6b29a0b24e9"
            ]
        ]
    },
    {
        "id": "cbd1ce365a968804",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 140,
        "wires": [
            [
                "9c6aed00631ef656"
            ]
        ]
    },
    {
        "id": "fc18e6b29a0b24e9",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b3e3fdeca7e1c7bc",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "drop tickers",
        "func": "msg.query = \"drop table tickers\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1060,
        "wires": [
            [
                "fa9d3f6b66d41932"
            ]
        ]
    },
    {
        "id": "fa9d3f6b66d41932",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "696f10baaf9ff4fe",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "create tickers",
        "func": "//msg.query = \"truncate table alpaca_assets\"\nmsg.query = \"CREATE TABLE IF NOT EXISTS tickers (id BIGINT, symbol varchar(20) PRIMARY KEY, name VARCHAR(200), portfolioname VARCHAR(100), orderid VARCHAR(100) )\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1120,
        "wires": [
            [
                "daef152d07f66683"
            ]
        ]
    },
    {
        "id": "daef152d07f66683",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "3488ab723abf7c9c",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 1120,
        "wires": [
            [
                "696f10baaf9ff4fe"
            ]
        ]
    },
    {
        "id": "b3af57fd90894348",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "Create watchlist table",
        "func": "msg.query = \"create table IF NOT EXISTS watchlist (symbol VARCHAR(20) PRIMARY KEY,name VARCHAR(100),polygon_symbol VARCHAR(20), alpaca_symbol VARCHAR(20), closing FLOAT,price24h FLOAT,price7d FLOAT, change24h FLOAT,change7d FLOAT,pct24 FLOAT,pct7d FLOAT)\"\n//msg.query = \"delete from watchlist\"\n//msg.query = \"drop table watchlist\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 260,
        "wires": [
            [
                "fa0d4c389df5796b"
            ]
        ]
    },
    {
        "id": "29c57a52bf3116e7",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 260,
        "wires": [
            [
                "b3af57fd90894348"
            ]
        ]
    },
    {
        "id": "fa0d4c389df5796b",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6319618a5a1833c2",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "get polygon, alpaca symbols from alpaca_assets",
        "func": "msg.query = \"select symbol from alpaca_assets where exchange not like 'FTXU'\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1360,
        "wires": [
            [
                "227b4f8728c4a383"
            ]
        ]
    },
    {
        "id": "b03ab43fcaf0959d",
        "type": "split",
        "z": "b07b974808c3fb82",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 970,
        "y": 1360,
        "wires": [
            [
                "dc1821f217c60953"
            ]
        ]
    },
    {
        "id": "227b4f8728c4a383",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 1360,
        "wires": [
            [
                "b03ab43fcaf0959d"
            ]
        ]
    },
    {
        "id": "dc1821f217c60953",
        "type": "function",
        "z": "b07b974808c3fb82",
        "name": "update alpaca_symbol",
        "func": "let symbol = msg.payload[\"symbol\"]\nsymbol = symbol.substring(0, 19);\n//node.warn(\"Symbol: \" +symbol)\n\nlet polygon_symbol = symbol\nlet alpaca_symbol = symbol\n\n\nalpaca_symbol = alpaca_symbol.substring(0, 19);\npolygon_symbol = polygon_symbol.substring(0, 19);\n\n\nmsg.query = \"update alpaca_assets set alpaca_symbol = '\" +alpaca_symbol+ \"', polygon_symbol = '\" +polygon_symbol+ \"' where symbol = '\" +symbol+ \"' and status = 'active';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1360,
        "wires": [
            [
                "dc2a3f90d76d8d2b"
            ]
        ]
    },
    {
        "id": "dc2a3f90d76d8d2b",
        "type": "postgresql",
        "z": "b07b974808c3fb82",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1320,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "84cee910a9b76899",
        "type": "delay",
        "z": "b07b974808c3fb82",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1360,
        "wires": [
            [
                "6319618a5a1833c2"
            ]
        ]
    },
    {
        "id": "9af1161ac9c4f891",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "049f5541cd163f51",
                "8436e0b108394fb2"
            ]
        ]
    },
    {
        "id": "049f5541cd163f51",
        "type": "alpaca-account-query",
        "z": "cacf3ab122de5d63",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "5f13610f7bea58b0"
            ]
        ]
    },
    {
        "id": "5f13610f7bea58b0",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "Insert into live balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'live'\nbalance = parseInt(balance)\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 140,
        "wires": [
            [
                "983d8a49b3d2e111"
            ]
        ]
    },
    {
        "id": "cd59ee5af261001a",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "Daily at Midnight",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "6bc2077959fdce84",
                "d3fdd09947a0ee7a"
            ]
        ]
    },
    {
        "id": "6bc2077959fdce84",
        "type": "alpaca-account-query",
        "z": "cacf3ab122de5d63",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "561e1c4eea963fbc"
            ]
        ]
    },
    {
        "id": "7004b97efecedb95",
        "type": "comment",
        "z": "cacf3ab122de5d63",
        "name": "Store account balances to sqlite tables",
        "info": "",
        "x": 190,
        "y": 80,
        "wires": []
    },
    {
        "id": "8436e0b108394fb2",
        "type": "alpaca-account-query",
        "z": "cacf3ab122de5d63",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 180,
        "wires": [
            [
                "74d44f6e33bf4daa"
            ]
        ]
    },
    {
        "id": "d3fdd09947a0ee7a",
        "type": "alpaca-account-query",
        "z": "cacf3ab122de5d63",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 260,
        "wires": [
            [
                "335d1c0b19ab5136"
            ]
        ]
    },
    {
        "id": "74d44f6e33bf4daa",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "Insert into paper balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n//node.warn(Number.isInteger(balance))\nbalance = parseInt(balance)\n\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "b79b5ba245a53fbc"
            ]
        ]
    },
    {
        "id": "335d1c0b19ab5136",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "e5ddaff07e7a5d86"
            ]
        ]
    },
    {
        "id": "983d8a49b3d2e111",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b79b5ba245a53fbc",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c1b9a95e79dd34fa",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e5ddaff07e7a5d86",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "561e1c4eea963fbc",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "c1b9a95e79dd34fa"
            ]
        ]
    },
    {
        "id": "fb82faf91bd4224b",
        "type": "polygon-last-trade-v3",
        "z": "cacf3ab122de5d63",
        "conf": "17b30ba127a02c39",
        "symbol": "",
        "x": 900,
        "y": 420,
        "wires": [
            [
                "620ecabff9d595e4"
            ]
        ]
    },
    {
        "id": "6837616bf3b92d6e",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select * from markets",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "583ff54b5d1b5ca1"
            ]
        ]
    },
    {
        "id": "620ecabff9d595e4",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n    //node.warn(\"Price: \" +price)\n}\n\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "679cd3f80da48124"
            ]
        ]
    },
    {
        "id": "5b99be5d3f721095",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "d1c90d6d3c37567d"
            ]
        ]
    },
    {
        "id": "d1c90d6d3c37567d",
        "type": "function-npm",
        "z": "cacf3ab122de5d63",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 420,
        "wires": [
            [
                "fb82faf91bd4224b"
            ]
        ]
    },
    {
        "id": "d0cc8887b168a9ed",
        "type": "polygon-last-trade-v3",
        "z": "cacf3ab122de5d63",
        "conf": "17b30ba127a02c39",
        "symbol": "",
        "x": 900,
        "y": 460,
        "wires": [
            [
                "7481609e4fa5bc7c"
            ]
        ]
    },
    {
        "id": "856856e60d6d47d8",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "38d056a05db57b11"
            ]
        ]
    },
    {
        "id": "7481609e4fa5bc7c",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "23255dffd36beab1"
            ]
        ]
    },
    {
        "id": "a6fb163289de48ba",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "3ac33266cbfc1233"
            ]
        ]
    },
    {
        "id": "8efc94f7fc231751",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "a144f2251a774cc2"
            ]
        ]
    },
    {
        "id": "e377b07a9c7df1e0",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 520,
        "wires": [
            [
                "f2016a1fb4b741c4"
            ]
        ]
    },
    {
        "id": "f2016a1fb4b741c4",
        "type": "function-npm",
        "z": "cacf3ab122de5d63",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 520,
        "wires": [
            [
                "e3721f1ebb3ce51c"
            ]
        ]
    },
    {
        "id": "5b06fa5bb68b5f1b",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "calculate changes",
        "func": "msg.query = \"update markets set change24h =  (price24h - closing), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            [
                "77b009559f296cc6"
            ]
        ]
    },
    {
        "id": "5c4685af0c945f79",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "calculate pct changes",
        "func": "msg.query = \"update markets set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100)\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "be965025ba3da1a5"
            ]
        ]
    },
    {
        "id": "399a06173fde7286",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update markets set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "3f5b8a875350d42d"
            ]
        ]
    },
    {
        "id": "e3721f1ebb3ce51c",
        "type": "polygon-trades-min-agg-rest",
        "z": "cacf3ab122de5d63",
        "conf": "17b30ba127a02c39",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 520,
        "wires": [
            [
                "399a06173fde7286"
            ]
        ]
    },
    {
        "id": "5503b256ef2e1741",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "5b06fa5bb68b5f1b"
            ]
        ]
    },
    {
        "id": "1f18d3c961624215",
        "type": "comment",
        "z": "cacf3ab122de5d63",
        "name": "Watchlist Prices",
        "info": "",
        "x": 120,
        "y": 640,
        "wires": []
    },
    {
        "id": "c374c69516dbb16b",
        "type": "polygon-last-trade-v3",
        "z": "cacf3ab122de5d63",
        "conf": "17b30ba127a02c39",
        "symbol": "",
        "x": 900,
        "y": 680,
        "wires": [
            [
                "155fded512bb828b"
            ]
        ]
    },
    {
        "id": "155fded512bb828b",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 680,
        "wires": [
            [
                "341ee3916aeff17c"
            ]
        ]
    },
    {
        "id": "dc4e5a379083510d",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 680,
        "wires": [
            [
                "5b63ae066c478a31"
            ]
        ]
    },
    {
        "id": "61e013d98019ca4c",
        "type": "polygon-last-trade-v3",
        "z": "cacf3ab122de5d63",
        "conf": "17b30ba127a02c39",
        "symbol": "",
        "x": 860,
        "y": 740,
        "wires": [
            [
                "185acb8a9f61d917"
            ]
        ]
    },
    {
        "id": "185acb8a9f61d917",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 740,
        "wires": [
            [
                "0f6e147324e16b02"
            ]
        ]
    },
    {
        "id": "7240d3cbe40d1c5f",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 740,
        "wires": [
            [
                "36e110f3c6af0be1"
            ]
        ]
    },
    {
        "id": "08cb95699ac1c3a5",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 800,
        "wires": [
            [
                "ecc069d596fb5ea0"
            ]
        ]
    },
    {
        "id": "cf6fe13611932a6b",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "calculate changes",
        "func": "msg.query = \"update watchlist set change24h =  (price24h - closing), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 860,
        "wires": [
            [
                "51ed6b442c3edd1b"
            ]
        ]
    },
    {
        "id": "5c6f4f9a801efd8f",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "calculate pct changes",
        "func": "msg.query = \"update watchlist set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100)\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 860,
        "wires": [
            [
                "24a17b1954f2ba33"
            ]
        ]
    },
    {
        "id": "49424225d368490c",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update watchlist set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "520ab61a358060c3"
            ]
        ]
    },
    {
        "id": "64cebd70667138c3",
        "type": "polygon-trades-min-agg-rest",
        "z": "cacf3ab122de5d63",
        "conf": "17b30ba127a02c39",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 800,
        "wires": [
            [
                "49424225d368490c"
            ]
        ]
    },
    {
        "id": "f2a46163443d4c55",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 860,
        "wires": [
            [
                "cf6fe13611932a6b"
            ]
        ]
    },
    {
        "id": "583ff54b5d1b5ca1",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 420,
        "wires": [
            [
                "5b99be5d3f721095"
            ]
        ]
    },
    {
        "id": "679cd3f80da48124",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "38d056a05db57b11",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 460,
        "wires": [
            [
                "a6fb163289de48ba"
            ]
        ]
    },
    {
        "id": "23255dffd36beab1",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a144f2251a774cc2",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 520,
        "wires": [
            [
                "e377b07a9c7df1e0"
            ]
        ]
    },
    {
        "id": "3f5b8a875350d42d",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "77b009559f296cc6",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 580,
        "wires": [
            [
                "5c4685af0c945f79"
            ]
        ]
    },
    {
        "id": "da0caf1e0bf7b8bf",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 680,
        "wires": [
            [
                "dc4e5a379083510d"
            ]
        ]
    },
    {
        "id": "341ee3916aeff17c",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "5a3925837c369232",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 740,
        "wires": [
            [
                "7240d3cbe40d1c5f"
            ]
        ]
    },
    {
        "id": "0f6e147324e16b02",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "520ab61a358060c3",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "9195dcc7d9143c82",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 800,
        "wires": [
            [
                "08cb95699ac1c3a5"
            ]
        ]
    },
    {
        "id": "51ed6b442c3edd1b",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 860,
        "wires": [
            [
                "5c6f4f9a801efd8f"
            ]
        ]
    },
    {
        "id": "be965025ba3da1a5",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "24a17b1954f2ba33",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "574a1a4548eab797",
        "type": "comment",
        "z": "cacf3ab122de5d63",
        "name": "Markets Prices",
        "info": "",
        "x": 120,
        "y": 360,
        "wires": []
    },
    {
        "id": "3ac33266cbfc1233",
        "type": "function-npm",
        "z": "cacf3ab122de5d63",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 460,
        "wires": [
            [
                "d0cc8887b168a9ed"
            ]
        ]
    },
    {
        "id": "5b63ae066c478a31",
        "type": "function-npm",
        "z": "cacf3ab122de5d63",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nmsg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 680,
        "wires": [
            [
                "c374c69516dbb16b"
            ]
        ]
    },
    {
        "id": "36e110f3c6af0be1",
        "type": "function-npm",
        "z": "cacf3ab122de5d63",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 740,
        "wires": [
            [
                "61e013d98019ca4c"
            ]
        ]
    },
    {
        "id": "553d417983dd65ba",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "da0caf1e0bf7b8bf"
            ]
        ]
    },
    {
        "id": "50b41a14830ee645",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "5a3925837c369232"
            ]
        ]
    },
    {
        "id": "70cbaf10b64dc638",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "9195dcc7d9143c82"
            ]
        ]
    },
    {
        "id": "ecc069d596fb5ea0",
        "type": "function-npm",
        "z": "cacf3ab122de5d63",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 800,
        "wires": [
            [
                "64cebd70667138c3"
            ]
        ]
    },
    {
        "id": "c12159875fd2d046",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "0394e68b113428c5"
            ]
        ]
    },
    {
        "id": "0081f3ba326ff2c5",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "63e5bc4db8a43aa8",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "get 500 closed orders live",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "0883dbc0904c85e3"
            ]
        ]
    },
    {
        "id": "0883dbc0904c85e3",
        "type": "alpaca-query-order",
        "z": "cacf3ab122de5d63",
        "conf": "0c86a5f06a42b505",
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "c12159875fd2d046"
            ]
        ]
    },
    {
        "id": "0394e68b113428c5",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'live');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1020,
        "wires": [
            [
                "0081f3ba326ff2c5"
            ]
        ]
    },
    {
        "id": "5ce159adedff9cbf",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "8e47727b8e3379a9"
            ]
        ]
    },
    {
        "id": "abed16270c1426b9",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "3ab07b45193f2949",
        "type": "alpaca-query-order",
        "z": "cacf3ab122de5d63",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "5ce159adedff9cbf"
            ]
        ]
    },
    {
        "id": "439585bbc2aa0b84",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "get 500 closed orders paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "3ab07b45193f2949"
            ]
        ]
    },
    {
        "id": "8e47727b8e3379a9",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1060,
        "wires": [
            [
                "abed16270c1426b9"
            ]
        ]
    },
    {
        "id": "44bcb1a3ff314114",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "9eb55e624e9ee255",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "update symbol from alpaca_assets",
        "func": "msg.query = \"UPDATE orders SET symbol = alpaca_assets.symbol FROM alpaca_assets where orders.symbol = alpaca_assets.alpaca_symbol\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "44bcb1a3ff314114"
            ]
        ]
    },
    {
        "id": "393d8a1e9cdf4efb",
        "type": "delay",
        "z": "cacf3ab122de5d63",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "78569bcd4e683770",
        "type": "comment",
        "z": "cacf3ab122de5d63",
        "name": "Upload Recent Orders",
        "info": "",
        "x": 140,
        "y": 960,
        "wires": []
    },
    {
        "id": "c7829a21882bcbe5",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "4:30 am",
        "props": [],
        "repeat": "",
        "crontab": "30 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1020,
        "wires": [
            [
                "63e5bc4db8a43aa8",
                "439585bbc2aa0b84",
                "393d8a1e9cdf4efb"
            ]
        ]
    },
    {
        "id": "0cf8b392c70b38ab",
        "type": "alpaca-orders-close",
        "z": "cacf3ab122de5d63",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 410,
        "y": 1260,
        "wires": [
            [
                "b48533932e597159"
            ]
        ]
    },
    {
        "id": "3e1060131a7eb30b",
        "type": "comment",
        "z": "cacf3ab122de5d63",
        "name": "Close all orders at 4 AM",
        "info": "",
        "x": 140,
        "y": 1220,
        "wires": []
    },
    {
        "id": "ab6dbeab0a55ec20",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "Close paper account",
        "props": [],
        "repeat": "",
        "crontab": "00 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1260,
        "wires": [
            [
                "0cf8b392c70b38ab"
            ]
        ]
    },
    {
        "id": "b48533932e597159",
        "type": "debug",
        "z": "cacf3ab122de5d63",
        "name": "debug 176",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1260,
        "wires": []
    },
    {
        "id": "a76a92a61ca2e02a",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "truncate positions table",
        "func": "msg.query = \"truncate table positions\"\n//msg.query = \"drop table positions\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1460,
        "wires": [
            [
                "8f839a20c3350061"
            ]
        ]
    },
    {
        "id": "8f839a20c3350061",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 1460,
        "wires": [
            [
                "0df7a5a1f9680df2"
            ]
        ]
    },
    {
        "id": "f999ec18924584cb",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "insert vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('paper', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn(sql)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1520,
        "wires": [
            [
                "81f805e6e4fb3578"
            ]
        ]
    },
    {
        "id": "0df7a5a1f9680df2",
        "type": "alpaca-position-query",
        "z": "cacf3ab122de5d63",
        "conf": "e535f42f1df1b25f",
        "x": 350,
        "y": 1520,
        "wires": [
            [
                "61daa4908a2c7e07"
            ]
        ]
    },
    {
        "id": "81f805e6e4fb3578",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "c4793b1fb5e852ad",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1460,
        "wires": [
            [
                "a76a92a61ca2e02a",
                "144a072a3596ef56"
            ]
        ]
    },
    {
        "id": "578e0cfa71440b1b",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "update positions from tickers",
        "func": "msg.query = \"UPDATE positions SET id = tickers.id, portfolioname = tickers.portfolioname, name = tickers.name, orderid = tickers.orderid FROM tickers where tickers.symbol = positions.symbol\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1580,
        "wires": [
            [
                "d9d3dfe137ed93b3"
            ]
        ]
    },
    {
        "id": "d9d3dfe137ed93b3",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "a92726e78ec4da4e",
        "type": "comment",
        "z": "cacf3ab122de5d63",
        "name": "Update positions table",
        "info": "",
        "x": 140,
        "y": 1420,
        "wires": []
    },
    {
        "id": "61daa4908a2c7e07",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 1520,
        "wires": [
            [
                "f999ec18924584cb"
            ]
        ]
    },
    {
        "id": "144a072a3596ef56",
        "type": "delay",
        "z": "cacf3ab122de5d63",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 150,
        "y": 1580,
        "wires": [
            [
                "578e0cfa71440b1b"
            ]
        ]
    },
    {
        "id": "0be02c87a111d71c",
        "type": "comment",
        "z": "cacf3ab122de5d63",
        "name": "Update Orders Table ",
        "info": "",
        "x": 130,
        "y": 1660,
        "wires": []
    },
    {
        "id": "834456c9f27c158b",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 1760,
        "wires": [
            [
                "32c0203c68340544"
            ]
        ]
    },
    {
        "id": "a3abbe2c8ea23017",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "c36ab21eddb4450f",
        "type": "alpaca-query-order",
        "z": "cacf3ab122de5d63",
        "conf": "e535f42f1df1b25f",
        "x": 660,
        "y": 1760,
        "wires": [
            [
                "834456c9f27c158b"
            ]
        ]
    },
    {
        "id": "e7b2a0b3faf1a2e3",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "get last 100 closed paper orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"100\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1760,
        "wires": [
            [
                "c36ab21eddb4450f"
            ]
        ]
    },
    {
        "id": "32c0203c68340544",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1760,
        "wires": [
            [
                "a3abbe2c8ea23017"
            ]
        ]
    },
    {
        "id": "241328f98015192d",
        "type": "delay",
        "z": "cacf3ab122de5d63",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "e7b2a0b3faf1a2e3"
            ]
        ]
    },
    {
        "id": "6036b820a446e9f0",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1700,
        "wires": [
            [
                "6f192f4deefe7b60"
            ]
        ]
    },
    {
        "id": "4acb51c895775318",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "update order_confirms from orders",
        "func": "msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created_at,filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\n//msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created.at, filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1820,
        "wires": [
            [
                "8152ba049f44ddc5"
            ]
        ]
    },
    {
        "id": "8152ba049f44ddc5",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "bdd5938d0a4dd31a",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "truncate orders table",
        "func": "//msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\nmsg.query = \"truncate table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1700,
        "wires": [
            [
                "f39592d95c9a97f8"
            ]
        ]
    },
    {
        "id": "f39592d95c9a97f8",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "6f192f4deefe7b60",
        "type": "delay",
        "z": "cacf3ab122de5d63",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1700,
        "wires": [
            [
                "bdd5938d0a4dd31a",
                "241328f98015192d",
                "f9baaa7b491df8d0"
            ]
        ]
    },
    {
        "id": "f9baaa7b491df8d0",
        "type": "delay",
        "z": "cacf3ab122de5d63",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1820,
        "wires": [
            [
                "4acb51c895775318"
            ]
        ]
    },
    {
        "id": "207f11b0c2b378d0",
        "type": "comment",
        "z": "cacf3ab122de5d63",
        "name": "Update from algos table current day performance",
        "info": "",
        "x": 200,
        "y": 1980,
        "wires": []
    },
    {
        "id": "3f9ad84b6061dbe6",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 2040,
        "wires": [
            [
                "153b3fe9cd1c7b5b"
            ]
        ]
    },
    {
        "id": "6aa1109ff1e380d2",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "get totals from positions",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(unrealized_pl) as b, sum(market_value) as c from positions where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 2040,
        "wires": [
            [
                "065c2b9dd66abfdf"
            ]
        ]
    },
    {
        "id": "d12c98864e25e620",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "store sums",
        "func": "let gain_alltime = msg.payload[\"a\"]\nlet gain_today = msg.payload[\"b\"]\nlet total_value = msg.payload[\"c\"]\nmsg.totalvalue = total_value\nmsg.gainalltime = gain_alltime\nmsg.gaintoday = gain_today\nlet id = msg.name\n//node.warn(\"Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" +total_value+ \", gain_today = \" +gain_today+ \", gain_alltime = \" +gain_alltime+ \" where algo_name = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2100,
        "wires": [
            [
                "6debdfb6578ca0d9",
                "f08c999493561e9e"
            ]
        ]
    },
    {
        "id": "a8ba9cf5684396f7",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 350,
        "y": 2100,
        "wires": [
            [
                "d12c98864e25e620"
            ]
        ]
    },
    {
        "id": "065c2b9dd66abfdf",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 220,
        "y": 2100,
        "wires": [
            [
                "a8ba9cf5684396f7"
            ]
        ]
    },
    {
        "id": "6debdfb6578ca0d9",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "f08c999493561e9e",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday + \", pctgain_alltime  = \" + pctgainalltime + \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2160,
        "wires": [
            [
                "07f801b88f529e84"
            ]
        ]
    },
    {
        "id": "07f801b88f529e84",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "3977862ca4c19782",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2040,
        "wires": [
            [
                "ebc7b3b8b1b9eb6c"
            ]
        ]
    },
    {
        "id": "ebc7b3b8b1b9eb6c",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 2040,
        "wires": [
            [
                "b95b2941ca8b92ce"
            ]
        ]
    },
    {
        "id": "b95b2941ca8b92ce",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 2040,
        "wires": [
            [
                "cbe76c2dea2f55bb"
            ]
        ]
    },
    {
        "id": "cbe76c2dea2f55bb",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2040,
        "wires": [
            [
                "6aa1109ff1e380d2"
            ]
        ]
    },
    {
        "id": "373a7eac07b2d708",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 2580,
        "wires": [
            [
                "9a972fc047c01d88"
            ]
        ]
    },
    {
        "id": "b687cf8b80fbfe5a",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "calculate benchmark changes",
        "func": "let start = msg.payload[\"benchmark_start\"]\nlet close = global.get(\"spy_close\")\nlet current = global.get(\"spy_current\")\n//node.warn(\"Start: \" +start+ \" Close: \" +close+ \" Current: \" +current) \n\nlet gain_alltime = (current - start)\nlet gain_today = (current - close)\n\nlet pctbench_today = (gain_today / start) * 100\nlet pctbench_alltime = (gain_alltime / start) * 100\n\n\nmsg.query = \"update algos set pctbench_today = \" + pctbench_today + \", pctbench_alltime = \" + pctbench_alltime+ \", info_ratio = (pctgain_alltime - pctbench_alltime);\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2640,
        "wires": [
            [
                "79a1244801db9c5c"
            ]
        ]
    },
    {
        "id": "9a972fc047c01d88",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1150,
        "y": 2580,
        "wires": [
            [
                "b687cf8b80fbfe5a"
            ]
        ]
    },
    {
        "id": "441c53606044da33",
        "type": "comment",
        "z": "cacf3ab122de5d63",
        "name": "Update benchmarks",
        "info": "",
        "x": 150,
        "y": 2520,
        "wires": []
    },
    {
        "id": "72cd997b2e9e5c20",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2580,
        "wires": [
            [
                "d69a064162a1eab5"
            ]
        ]
    },
    {
        "id": "b9f50d4543658f36",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2580,
        "wires": [
            [
                "52647b8ba93a52f4"
            ]
        ]
    },
    {
        "id": "52647b8ba93a52f4",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 2580,
        "wires": [
            [
                "515db16c639751f7"
            ]
        ]
    },
    {
        "id": "515db16c639751f7",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 2580,
        "wires": [
            [
                "a6556ccdec12c390"
            ]
        ]
    },
    {
        "id": "a6556ccdec12c390",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.query = \"select benchmark_start from algos where algo_name = '\" + name + \"';\"\nmsg.name = name\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2580,
        "wires": [
            [
                "373a7eac07b2d708"
            ]
        ]
    },
    {
        "id": "79a1244801db9c5c",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "d69a064162a1eab5",
        "type": "delay",
        "z": "cacf3ab122de5d63",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 2580,
        "wires": [
            [
                "b9f50d4543658f36"
            ]
        ]
    },
    {
        "id": "36d1c8f49e69c622",
        "type": "inject",
        "z": "cacf3ab122de5d63",
        "name": "Every Min",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 2260,
        "wires": [
            [
                "80b9c68074578082"
            ]
        ]
    },
    {
        "id": "f8b7bcab367444f5",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "store sums",
        "func": "let gain_alltime = msg.payload[\"a\"]\nlet gain_today = msg.payload[\"b\"]\nlet total_value = msg.payload[\"c\"]\nmsg.totalvalue = total_value\nmsg.gainalltime = gain_alltime\nmsg.gaintoday = gain_today\nlet id = msg.name\n//node.warn(\"Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" +total_value+ \", gain_today = \" +gain_today+ \", gain_alltime = \" +gain_alltime+ \" where algo_name = '\" +id+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "155c7c12969bef4c",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 370,
        "y": 2320,
        "wires": [
            [
                "f8b7bcab367444f5"
            ]
        ]
    },
    {
        "id": "a2ae7ea6981d876c",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 240,
        "y": 2320,
        "wires": [
            [
                "155c7c12969bef4c"
            ]
        ]
    },
    {
        "id": "6af4b50472cae566",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "2038d570f6e8b402",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday + \", pctgain_alltime  = \" + pctgainalltime + \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2380,
        "wires": [
            [
                "38e296c095dedaf5"
            ]
        ]
    },
    {
        "id": "38e296c095dedaf5",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "153b3fe9cd1c7b5b",
        "type": "delay",
        "z": "cacf3ab122de5d63",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 2040,
        "wires": [
            [
                "3977862ca4c19782"
            ]
        ]
    },
    {
        "id": "fd6a4c173435a263",
        "type": "comment",
        "z": "cacf3ab122de5d63",
        "name": "Update from \"interday\" algos table all time performance",
        "info": "",
        "x": 220,
        "y": 2220,
        "wires": []
    },
    {
        "id": "30949137b9291750",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "get totals from order_confirms",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(unrealized_pl) as b, sum(market_value) as c from order_confirms where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "93fc8a3a99477dc2",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos where algo_type = 'interday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2260,
        "wires": [
            [
                "6c8cfc0320e4c5c7"
            ]
        ]
    },
    {
        "id": "6c8cfc0320e4c5c7",
        "type": "postgresql",
        "z": "cacf3ab122de5d63",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 2260,
        "wires": [
            [
                "c80168a4d2670c40"
            ]
        ]
    },
    {
        "id": "c80168a4d2670c40",
        "type": "split",
        "z": "cacf3ab122de5d63",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 2260,
        "wires": [
            [
                "d1b5fefbb5e42de6"
            ]
        ]
    },
    {
        "id": "d1b5fefbb5e42de6",
        "type": "function",
        "z": "cacf3ab122de5d63",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\nnode.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2260,
        "wires": [
            [
                "30949137b9291750"
            ]
        ]
    },
    {
        "id": "80b9c68074578082",
        "type": "delay",
        "z": "cacf3ab122de5d63",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 2260,
        "wires": [
            [
                "93fc8a3a99477dc2"
            ]
        ]
    }
]