[
    {
        "id": "025f7d025c64fa47",
        "type": "tab",
        "label": "Research Ticker",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "561b9f2366ea4b19",
        "type": "inject",
        "z": "025f7d025c64fa47",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "e01833997e41063a"
            ]
        ]
    },
    {
        "id": "e01833997e41063a",
        "type": "function-npm",
        "z": "025f7d025c64fa47",
        "name": "Get past 1000 trades",
        "func": "let symbol = flow.get(\"ticker\")\n\n// use polygon format for cryptos\n//let symbol = \"X:BTCUSD\"\n\n\n\nlet cnt = 1000 // set count here\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 140,
        "wires": [
            [
                "d052e478ae990e0e"
            ]
        ]
    },
    {
        "id": "d052e478ae990e0e",
        "type": "polygon-last-trade-v3",
        "z": "025f7d025c64fa47",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 540,
        "y": 140,
        "wires": [
            [
                "91cd683631ceee2a"
            ]
        ]
    },
    {
        "id": "91cd683631ceee2a",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 140,
        "wires": [
            [
                "b59cd2121f70ad41"
            ]
        ]
    },
    {
        "id": "aec85a01d11cfc1a",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\nnode.warn(\"Ticker: \" +symbol+ \" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 140,
        "wires": [
            [
                "10c14ea7f7729c82"
            ]
        ]
    },
    {
        "id": "10c14ea7f7729c82",
        "type": "function-npm",
        "z": "025f7d025c64fa47",
        "name": "Get last trade",
        "func": "let symbol = msg.symbol\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 200,
        "wires": [
            [
                "07af316a7de8c58b"
            ]
        ]
    },
    {
        "id": "07af316a7de8c58b",
        "type": "polygon-last-trade-v3",
        "z": "025f7d025c64fa47",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 520,
        "y": 200,
        "wires": [
            [
                "1936f2162a3c864d"
            ]
        ]
    },
    {
        "id": "1936f2162a3c864d",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "display diff",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price; // this is the price of the last trade\n\n}\n\n\nlet avg = msg.moving_avg\nlet ticker = msg.symbol\n\nlet diff = price - avg\ndiff = diff.toFixed(2)\n\nnode.warn(\"Ticker: \" + ticker + \" Current Price: \" + price + \" Avg Price: \" + avg + \" Diff: \" + diff)\nmsg.diff = diff\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 200,
        "wires": [
            [
                "f43b14319ef941eb"
            ]
        ]
    },
    {
        "id": "f43b14319ef941eb",
        "type": "change",
        "z": "025f7d025c64fa47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "diff",
                "pt": "flow",
                "to": "diff",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b59cd2121f70ad41",
        "type": "calculator",
        "z": "025f7d025c64fa47",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 980,
        "y": 140,
        "wires": [
            [
                "aec85a01d11cfc1a"
            ]
        ]
    },
    {
        "id": "aacbf5c74e74e47b",
        "type": "comment",
        "z": "025f7d025c64fa47",
        "name": "FLOW 1: Calculate the difference between the current price and the moving average and store as flow variable",
        "info": "",
        "x": 390,
        "y": 40,
        "wires": []
    },
    {
        "id": "f7d6b1af995c86aa",
        "type": "inject",
        "z": "025f7d025c64fa47",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 360,
        "wires": [
            [
                "e5526d68f0ef3304"
            ]
        ]
    },
    {
        "id": "e5526d68f0ef3304",
        "type": "function-npm",
        "z": "025f7d025c64fa47",
        "name": "Get past 1000 trades",
        "func": "let symbol = flow.get(\"ticker\")\n\nlet cnt = 10000 // set count here\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 360,
        "wires": [
            [
                "bc7a87d7e655d4b7"
            ]
        ]
    },
    {
        "id": "bc7a87d7e655d4b7",
        "type": "polygon-last-trade-v3",
        "z": "025f7d025c64fa47",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 480,
        "y": 360,
        "wires": [
            [
                "4a4d9c4e37bc35f4",
                "6c71f30b6e4c3e4d"
            ]
        ]
    },
    {
        "id": "4a4d9c4e37bc35f4",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 360,
        "wires": [
            [
                "67e976dcf331adac",
                "9e39870ce0f1f1c0",
                "502f1ff970123a04"
            ]
        ]
    },
    {
        "id": "2322767f4e71f1c3",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\nnode.warn(\"Ticker: \" +symbol+ \" Maximum: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 300,
        "wires": [
            [
                "31384579adfc524e"
            ]
        ]
    },
    {
        "id": "67e976dcf331adac",
        "type": "calculator",
        "z": "025f7d025c64fa47",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "max",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 940,
        "y": 300,
        "wires": [
            [
                "2322767f4e71f1c3"
            ]
        ]
    },
    {
        "id": "732896c20377f80c",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\nnode.warn(\"Ticker: \" +symbol+ \" Minimum: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "e0a684c3d8385ae6"
            ]
        ]
    },
    {
        "id": "9e39870ce0f1f1c0",
        "type": "calculator",
        "z": "025f7d025c64fa47",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "min",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 940,
        "y": 360,
        "wires": [
            [
                "732896c20377f80c"
            ]
        ]
    },
    {
        "id": "4e94771430a873ad",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\nnode.warn(\"Ticker: \" +symbol+ \" Average: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 420,
        "wires": [
            [
                "b7df9aec1d539264"
            ]
        ]
    },
    {
        "id": "502f1ff970123a04",
        "type": "calculator",
        "z": "025f7d025c64fa47",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 940,
        "y": 420,
        "wires": [
            [
                "4e94771430a873ad"
            ]
        ]
    },
    {
        "id": "31384579adfc524e",
        "type": "change",
        "z": "025f7d025c64fa47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "max",
                "pt": "flow",
                "to": "moving_avg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e0a684c3d8385ae6",
        "type": "change",
        "z": "025f7d025c64fa47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "min",
                "pt": "flow",
                "to": "moving_avg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "b7df9aec1d539264",
        "type": "change",
        "z": "025f7d025c64fa47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "avg",
                "pt": "flow",
                "to": "moving_avg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "6de4fe25e09bbf19",
        "type": "inject",
        "z": "025f7d025c64fa47",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "d9663d1c8e9ede55"
            ]
        ]
    },
    {
        "id": "d9663d1c8e9ede55",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "Display calculated values",
        "func": "let max = flow.get(\"max\")\nlet min = flow.get(\"min\")\nlet avg = flow.get(\"avg\")\nlet first = flow.get(\"first\")\nlet last = flow.get(\"last\")\nlet num = flow.get(\"number\")\n\n\nlet change = (last - first)\nlet pctchange = (change / avg) * 100\nlet spread = (max - min)\nlet pctspread = (spread / avg) * 100\n\nspread = spread.toFixed(4)\npctspread = pctspread.toFixed(4)\nchange = change.toFixed(4)\npctchange = pctchange.toFixed(4)\n\nnode.warn(\"Sample: \" +num+ \" Spread: \" +spread+ \" Pct Spread: \" +pctspread+ \"% Change: \" +change+ \" Pct Change: \" +pctchange)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6c71f30b6e4c3e4d",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "get first and last values",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);\n    //    node.warn(price)\n\n}\n\nlet len = prices.length\nlet f = prices[0]\nlet l = prices[prices.length - 1];\n\nnode.warn(\"Length: \" +len+ \" First: \" +f+ \" Last: \" +l)\nmsg.first = f\nmsg.last = l\nmsg.num = len\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 480,
        "wires": [
            [
                "40c73ed9cbe91322"
            ]
        ]
    },
    {
        "id": "40c73ed9cbe91322",
        "type": "change",
        "z": "025f7d025c64fa47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "first",
                "pt": "flow",
                "to": "first",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "last",
                "pt": "flow",
                "to": "last",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "num",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "be9e7b32d82f9fbd",
        "type": "inject",
        "z": "025f7d025c64fa47",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 760,
        "wires": [
            [
                "58e2784064a7401f"
            ]
        ]
    },
    {
        "id": "58e2784064a7401f",
        "type": "function-npm",
        "z": "025f7d025c64fa47",
        "name": "Get past 10000 trades",
        "func": "let symbol = flow.get(\"ticker\")\n\nlet cnt = 10000 // set count here\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 760,
        "wires": [
            [
                "923e9be7d4dbbe19"
            ]
        ]
    },
    {
        "id": "923e9be7d4dbbe19",
        "type": "polygon-last-trade-v3",
        "z": "025f7d025c64fa47",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 520,
        "y": 760,
        "wires": [
            [
                "82f191535a02fcc5"
            ]
        ]
    },
    {
        "id": "8ea1b356705cf14f",
        "type": "comment",
        "z": "025f7d025c64fa47",
        "name": "Store in Postgres table",
        "info": "",
        "x": 160,
        "y": 720,
        "wires": []
    },
    {
        "id": "82f191535a02fcc5",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "insert into table",
        "func": "let symbol = flow.get(\"ticker\")\n\nlet item = ''\nlet ux = 0\nlet price = 0\nlet size = 0\nlet exchange = 0\nlet sql = ''\n\nfor (item of msg.payload.results) {\n    ux = item.participant_timestamp;\n    price = item.price;\n    size = item.size;\n    exchange = item.exchange;\n    sql += \"insert into \" +symbol+ \" (ux, price, size, exchange)  values (\" + ux + \", \" + price + \", \" + size + \", \" + exchange + \");\\n\"\n}\n\nmsg.payload = sql\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 760,
        "wires": [
            [
                "48bf710bb714455e"
            ]
        ]
    },
    {
        "id": "48bf710bb714455e",
        "type": "split",
        "z": "025f7d025c64fa47",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 760,
        "wires": [
            [
                "38f906d67024bde0"
            ]
        ]
    },
    {
        "id": "38bb280de7fdfb95",
        "type": "postgresql",
        "z": "025f7d025c64fa47",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "38f906d67024bde0",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "insert into table",
        "func": "msg.query = msg.payload\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 760,
        "wires": [
            [
                "38bb280de7fdfb95"
            ]
        ]
    },
    {
        "id": "256d129e6bbcb44f",
        "type": "http in",
        "z": "025f7d025c64fa47",
        "name": "/api/download_output",
        "url": "/api/download_output",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 980,
        "wires": [
            [
                "e9f6f0d60795eb34"
            ]
        ]
    },
    {
        "id": "3e081d49c038475e",
        "type": "http response",
        "z": "025f7d025c64fa47",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"outfile.csv\""
        },
        "x": 990,
        "y": 980,
        "wires": []
    },
    {
        "id": "8e51434ecbe8c1f5",
        "type": "csv",
        "z": "025f7d025c64fa47",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 670,
        "y": 980,
        "wires": [
            [
                "7dcf806a5046d104"
            ]
        ]
    },
    {
        "id": "e9f6f0d60795eb34",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "export query",
        "func": "let ticker = flow.get(\"ticker\") \nmsg.query= \"select * from \" +ticker+ \";\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 980,
        "wires": [
            [
                "b1407e22a6d070f7"
            ]
        ]
    },
    {
        "id": "7dcf806a5046d104",
        "type": "file",
        "z": "025f7d025c64fa47",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 980,
        "wires": [
            [
                "3e081d49c038475e"
            ]
        ]
    },
    {
        "id": "8ba58236fd536fc3",
        "type": "comment",
        "z": "025f7d025c64fa47",
        "name": "This flow downloads the research table ",
        "info": "",
        "x": 190,
        "y": 940,
        "wires": []
    },
    {
        "id": "b1407e22a6d070f7",
        "type": "postgresql",
        "z": "025f7d025c64fa47",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 980,
        "wires": [
            [
                "8e51434ecbe8c1f5"
            ]
        ]
    },
    {
        "id": "f301e922fd59bcdd",
        "type": "comment",
        "z": "025f7d025c64fa47",
        "name": "FLOW 2: Calculate and store other useful statistics",
        "info": "",
        "x": 210,
        "y": 300,
        "wires": []
    },
    {
        "id": "3c4ebafa88b9d4be",
        "type": "comment",
        "z": "025f7d025c64fa47",
        "name": "FLOW 3: Display the statistics",
        "info": "",
        "x": 140,
        "y": 500,
        "wires": []
    },
    {
        "id": "a76b5718437c27fa",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "create table to store ticker values",
        "func": "let ticker = flow.get(\"ticker\")\nmsg.query = \"create table IF NOT EXISTS \" +ticker+ \" (ux BIGINT, price FLOAT, size FLOAT, exchange FLOAT, datetime VARCHAR(40))\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 660,
        "wires": [
            [
                "49731c98d4b914fb"
            ]
        ]
    },
    {
        "id": "f2f355df6a953fe3",
        "type": "inject",
        "z": "025f7d025c64fa47",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "a76b5718437c27fa"
            ]
        ]
    },
    {
        "id": "49731c98d4b914fb",
        "type": "postgresql",
        "z": "025f7d025c64fa47",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "6c44223cf55c6ee3",
        "type": "inject",
        "z": "025f7d025c64fa47",
        "name": "Set ticker flow variable: flow.ticker",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "QQQ",
        "payloadType": "str",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "55b6f82b1fb4572c"
            ]
        ]
    },
    {
        "id": "55b6f82b1fb4572c",
        "type": "change",
        "z": "025f7d025c64fa47",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "622fdf63a1a592e5",
        "type": "function",
        "z": "025f7d025c64fa47",
        "name": "display table ",
        "func": "let ticker = flow.get(\"ticker\")\nmsg.query = \"select * from \" +ticker+ \";\" \nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 820,
        "wires": [
            [
                "a19b33d6869c7832"
            ]
        ]
    },
    {
        "id": "86aa85a097816222",
        "type": "inject",
        "z": "025f7d025c64fa47",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "622fdf63a1a592e5"
            ]
        ]
    },
    {
        "id": "a19b33d6869c7832",
        "type": "postgresql",
        "z": "025f7d025c64fa47",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 820,
        "wires": [
            [
                "07bf1219acd83b2d"
            ]
        ]
    },
    {
        "id": "07bf1219acd83b2d",
        "type": "debug",
        "z": "025f7d025c64fa47",
        "name": "debug 333",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 820,
        "wires": []
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]