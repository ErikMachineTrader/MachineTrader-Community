[
    {
        "id": "436328c67b2b20cd",
        "type": "tab",
        "label": "Long Alpaca",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ded49e57f2ed4d0b",
        "type": "function",
        "z": "436328c67b2b20cd",
        "name": "Trading algo - long only",
        "func": "let pos = flow.get(\"position\")\nlet orders = flow.get(\"orders\")\nlet ux = (Date.now()) / 1000\nux = Math.trunc(ux)\nlet ticker = global.get(\"ticker\")\nlet results = \"results_\" + ticker\nlet avg = global.get(\"average_price\")\nlet current_price = global.get(\"price\")\nlet d = (current_price - avg)\nlet buytarget = (20 * -1)\nlet cvrtarget = (0.01)\nlet type = \"market\"\nlet tif = \"gtc\"\nlet side = \"buy\"\n\n// Alpaca requires limit price > 0.10\nlet newprice = parseFloat(current_price);\n//node.warn(\"Current Price: \" +current_price+ \" New Price: \" +newprice)\ncurrent_price = (newprice + .11)\ncurrent_price = current_price.toFixed(2);\n\n\n\nlet buyqty = 50\nlet sellqty = -50\nlet temp = ''\n\n//node.warn(\"Price diff (buy if negative & < -0.20):  \" +d+ \" Position: \" +pos)\n//node.warn(\"Ticker: \" + ticker + \" Position: \" + pos + \" Orders: \" + orders + \" Unixtime: \" + ux + \" Current Price: \" + current_price + \" Avg Price: \" + avg+ \" Shares: \" +buyqty+ \" Type: \" +type+ \" TIF: \" +tif)\n//node.warn(\"Ticker: \" + ticker + \" Position: \" + pos + \" Orders: \" + orders + \" Unixtime: \" + ux + \" Current Price: \" + current_price + \" Avg Price: \" + avg + \" Diff: \" + d)\n\n// testing\n//buytarget = 10\n//pos = 0\n//orders = 0\n\n\n\nif (d < buytarget && pos == 0 && orders == 0) {\n    node.warn(\"buy 100 shares where pos = 0\")\n    side = \"buy\"\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": buyqty,\n        \"side\": side,\n        \"type\": \"market\",\n //       \"type\": \"limit\",\n //       \"limit_price\": current_price,\n        \"time_in_force\": tif\n    };\n    msg.payload = temp;\n    node.warn(msg.payload)\n    return msg\n}\n\nelse if (d > cvrtarget && pos > 0) {\n    node.warn(\"cover long position by selling\")\n    let side = \"sell\"\n    buyqty = pos\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": buyqty,\n        \"side\": side,\n        \"type\": \"market\",\n     //   \"limit_price\": current_price,\n        \"time_in_force\": tif\n    };\n    msg.payload = temp;\n    node.warn(msg.payload)\n    return msg\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 320,
        "wires": [
            [
                "0d9e3f6896ef8e8c"
            ]
        ]
    },
    {
        "id": "68fac2108011a2fb",
        "type": "inject",
        "z": "436328c67b2b20cd",
        "name": "Trade every second ",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "ded49e57f2ed4d0b"
            ]
        ]
    },
    {
        "id": "8d4733513d39810c",
        "type": "inject",
        "z": "436328c67b2b20cd",
        "name": "Display Flow Variables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "99b63f4026ab067f"
            ]
        ]
    },
    {
        "id": "99b63f4026ab067f",
        "type": "function",
        "z": "436328c67b2b20cd",
        "name": "display variables",
        "func": "let ticker = global.get(\"ticker\")\nlet count = global.get(\"avg_count\")\nlet ux = global.get(\"ux\")\nlet avg = global.get(\"average_price\")\nlet current_price = global.get(\"price\")\nlet pos = flow.get(\"position\")\nlet orders = flow.get(\"orders\")\nlet current_diff = current_price - avg\n\nnode.warn(\"Ticker: \" +ticker+ \" Position: \" +pos+ \" Orders: \" +orders+ \" Avg Count: \" +count+ \" Unixtime: \" +ux+ \" Current Price: \" + current_price + \" Avg Price: \" + avg + \" Price Difference: \" +current_diff)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ce091978ba3cee28",
        "type": "alpaca-position-query",
        "z": "436328c67b2b20cd",
        "conf": "0c86a5f06a42b505",
        "x": 370,
        "y": 80,
        "wires": [
            [
                "1a328307188496f3"
            ]
        ]
    },
    {
        "id": "4056e3189086a6c9",
        "type": "alpaca-query-order",
        "z": "436328c67b2b20cd",
        "conf": "0c86a5f06a42b505",
        "x": 540,
        "y": 120,
        "wires": [
            [
                "2b4493b3875f4ddc"
            ]
        ]
    },
    {
        "id": "88acd9742daaf910",
        "type": "alpaca-orders-close",
        "z": "436328c67b2b20cd",
        "conf": "0c86a5f06a42b505",
        "name": "",
        "x": 350,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "edcda93bf267f9a0",
        "type": "inject",
        "z": "436328c67b2b20cd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "ce091978ba3cee28",
                "f5569bd785d2ae97"
            ]
        ]
    },
    {
        "id": "1a328307188496f3",
        "type": "function",
        "z": "436328c67b2b20cd",
        "name": "get position ",
        "func": "let ticker = global.get(\"ticker\")\n\nlet symbol = ''\nlet asset_id = '';\nlet exchange = '';\nlet asset_class = '';\nlet asset_marginable = '';\nlet qty = '';\nlet avg_entry_price = '';\nlet side = '';\nlet market_value = '';\nlet cost_basis = '';\nlet unrealized_pl = '';\nlet unrealized_plpc = '';\nlet unrealized_intraday_pl = '';\nlet unrealized_intraday_plpc = '';\nlet current_price = '';\nlet lastday_price = '';\nlet change_today = '';\nlet qty_available = '';\n\n\nfor (let i=0;i<msg.payload.length;i++)\n{\n\nasset_id = msg.payload[i][\"asset_id\"]\nsymbol = msg.payload[i][\"symbol\"]\nexchange = msg.payload[i][\"exchange\"]\nasset_class = msg.payload[i][\"asset_class\"]\nasset_marginable = msg.payload[i][\"asset_marginable\"]\nqty = msg.payload[i][\"qty\"]\navg_entry_price = msg.payload[i][\"avg_entry_price\"]\nside = msg.payload[i][\"side\"]\nmarket_value = msg.payload[i][\"market_value\"]\ncost_basis = msg.payload[i][\"cost_basis\"]\nunrealized_pl = msg.payload[i][\"unrealized_pl\"]\nunrealized_plpc = msg.payload[i][\"unrealized_plpc\"]\nunrealized_intraday_pl = msg.payload[i][\"unrealized_intraday_pl\"]\nunrealized_intraday_plpc = msg.payload[i][\"unrealized_intraday_plpc\"]\ncurrent_price = msg.payload[i][\"current_price\"]\nlastday_price = msg.payload[i][\"lastday_price\"]\nchange_today = msg.payload[i][\"change_today\"]\nqty_available = msg.payload[i][\"qty_available\"]\n\nif (symbol == ticker){\n    msg.payload = qty\n    }\n\n}\n\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            [
                "8addc3429c9f03bc"
            ]
        ]
    },
    {
        "id": "f5569bd785d2ae97",
        "type": "function",
        "z": "436328c67b2b20cd",
        "name": "get open orders",
        "func": "/* Get Flow variables */\n\n//let ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nlet ordertype = \"open\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"1\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 120,
        "wires": [
            [
                "4056e3189086a6c9"
            ]
        ]
    },
    {
        "id": "2b4493b3875f4ddc",
        "type": "function",
        "z": "436328c67b2b20cd",
        "name": "get open orders for SPY",
        "func": "\nlet id = '';\nlet client_order_id = '';\nlet created_at = '';\nlet updated_at = '';\nlet submitted_at = '';\nlet filled_at = '';\nlet expired_at = '';\nlet canceled_at = '';\nlet failed_at = '';\nlet replaced_at = '';\nlet replaced_by = '';\nlet replaces = '';\nlet asset_id = '';\nlet symbol = '';\nlet asset_class = '';\nlet notional = '';\nlet qty = '';\nlet filled_qty = '';\nlet filled_avg_price = '';\nlet order_class = '';\nlet order_type = '';\nlet type = '';\nlet side = '';\nlet time_in_force = '';\nlet limit_price = '';\nlet stop_price = '';\nlet status = '';\nlet extended_hours = '';\nlet legs = '';\nlet trail_percent = '';\nlet trail_price = '';\nlet hwm = '';\nlet subtag = '';\nlet source = '';\n\n\nfor (let i = 0; i < msg.payload.length; i++) {\n\n    id = msg.payload[i][\"id\"]\n    client_order_id = msg.payload[i][\"client_order_id\"]\n    created_at = msg.payload[i][\"created_at\"]\n    updated_at = msg.payload[i][\"updated_at\"]\n    submitted_at = msg.payload[i][\"submitted_at\"]\n    filled_at = msg.payload[i][\"filled_at\"]\n    expired_at = msg.payload[i][\"expired_at\"]\n    canceled_at = msg.payload[i][\"canceled_at\"]\n    failed_at = msg.payload[i][\"failed_at\"]\n    replaced_at = msg.payload[i][\"replaced_at\"]\n    replaced_by = msg.payload[i][\"replaced_by\"]\n    replaces = msg.payload[i][\"replaces\"]\n    asset_id = msg.payload[i][\"asset_id\"]\n    symbol = msg.payload[i][\"symbol\"]\n    asset_class = msg.payload[i][\"asset_class\"]\n    notional = msg.payload[i][\"notional\"]\n    qty = msg.payload[i][\"qty\"]\n    filled_qty = msg.payload[i][\"filled_qty\"]\n    filled_avg_price = msg.payload[i][\"filled_avg_price\"]\n    order_class = msg.payload[i][\"order_class\"]\n    order_type = msg.payload[i][\"order_type\"]\n    type = msg.payload[i][\"type\"]\n    side = msg.payload[i][\"side\"]\n    time_in_force = msg.payload[i][\"time_in_force\"]\n    limit_price = msg.payload[i][\"limit_price\"]\n    stop_price = msg.payload[i][\"stop_price\"]\n    status = msg.payload[i][\"status\"]\n    extended_hours = msg.payload[i][\"extended_hours\"]\n    legs = msg.payload[i][\"legs\"]\n    trail_percent = msg.payload[i][\"trail_percent\"]\n    trail_price = msg.payload[i][\"trail_price\"]\n    hwm = msg.payload[i][\"hwm\"]\n    subtag = msg.payload[i][\"subtag\"]\n    source = msg.payload[i][\"source\"]\n    \n //   node.warn(\"Symbol: \" +symbol)\n\n    if (symbol == 'SPY'){\n    msg.payload = qty\n    }\n\n}\n\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 120,
        "wires": [
            [
                "838c1a8b04507e25"
            ]
        ]
    },
    {
        "id": "4d9473bf379b0eb3",
        "type": "change",
        "z": "436328c67b2b20cd",
        "name": "flow position",
        "rules": [
            {
                "t": "set",
                "p": "position",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8addc3429c9f03bc",
        "type": "function",
        "z": "436328c67b2b20cd",
        "name": "Change empty to 0",
        "func": "let x = msg.payload;\n\n// if the array is empty, n = 0\nlet n = x.length\n//node.warn(n)\n\nif (n === 0)\n{ msg.payload = n}\n\nelse {\n msg.payload = x\n }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "4d9473bf379b0eb3"
            ]
        ]
    },
    {
        "id": "335ba657a14190b9",
        "type": "change",
        "z": "436328c67b2b20cd",
        "name": "flow orders",
        "rules": [
            {
                "t": "set",
                "p": "orders",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "838c1a8b04507e25",
        "type": "function",
        "z": "436328c67b2b20cd",
        "name": "Change empty to 0",
        "func": "let x = msg.payload;\n\n// if the array is empty, n = 0\nlet n = x.length\n//node.warn(n)\n\nif (n === 0)\n{ msg.payload = n}\n\nelse {\n msg.payload = x\n }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 120,
        "wires": [
            [
                "335ba657a14190b9"
            ]
        ]
    },
    {
        "id": "f064a5a5ee1ac4ea",
        "type": "inject",
        "z": "436328c67b2b20cd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "88acd9742daaf910"
            ]
        ]
    },
    {
        "id": "2428ec32faa08f78",
        "type": "debug",
        "z": "436328c67b2b20cd",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 320,
        "wires": []
    },
    {
        "id": "da6af0b88b4ac203",
        "type": "comment",
        "z": "436328c67b2b20cd",
        "name": "Trades in the live account",
        "info": "",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "0d9e3f6896ef8e8c",
        "type": "alpaca-order",
        "z": "436328c67b2b20cd",
        "conf": "0c86a5f06a42b505",
        "x": 610,
        "y": 320,
        "wires": [
            [
                "2428ec32faa08f78"
            ]
        ]
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PK6PYBK2XRDW0RF4OR2W",
        "paper": true
    }
]