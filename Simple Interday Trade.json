[
    {
        "id": "50a53a61faaed122",
        "type": "tab",
        "label": "Simple Interday Trade",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a4a81ab5a824d7c2",
        "type": "inject",
        "z": "50a53a61faaed122",
        "name": "Set symbol 1x only",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 140,
        "wires": [
            [
                "aed7ac6386d2675f"
            ]
        ]
    },
    {
        "id": "e922b6b1bd4acffa",
        "type": "comment",
        "z": "50a53a61faaed122",
        "name": "Specify ticker",
        "info": "",
        "x": 270,
        "y": 100,
        "wires": []
    },
    {
        "id": "aed7ac6386d2675f",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "set and store ticker SPY variables",
        "func": "let ticker = 'SPY'\nmsg.topic = ticker // this pass the ticker value to the flow variable\nnode.warn(\" Ticker: \" +ticker)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "9ec948b990a76cd1"
            ]
        ]
    },
    {
        "id": "9ec948b990a76cd1",
        "type": "change",
        "z": "50a53a61faaed122",
        "name": "set flow variable: ticker",
        "rules": [
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0b394d37e7e1ac95",
        "type": "comment",
        "z": "50a53a61faaed122",
        "name": "Function node allows manipulation of the msg.payload",
        "info": "",
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "94fe7411a08ca6a6",
        "type": "comment",
        "z": "50a53a61faaed122",
        "name": "Change node used to store flow variables ",
        "info": "",
        "x": 980,
        "y": 100,
        "wires": []
    },
    {
        "id": "436629a9d513b834",
        "type": "comment",
        "z": "50a53a61faaed122",
        "name": "Flow #1",
        "info": "",
        "x": 110,
        "y": 100,
        "wires": []
    },
    {
        "id": "fd947e7f6370bf4e",
        "type": "inject",
        "z": "50a53a61faaed122",
        "name": "Display ticker",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ticker",
        "payloadType": "flow",
        "x": 1210,
        "y": 140,
        "wires": [
            [
                "461991e0bf364942"
            ]
        ]
    },
    {
        "id": "461991e0bf364942",
        "type": "debug",
        "z": "50a53a61faaed122",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 140,
        "wires": []
    },
    {
        "id": "e35f9d3d4e18da0a",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "display polygon output",
        "func": "let ux = (Date.now()) / 1000\nux = Math.trunc(ux)\n\nlet nstime = '';\nlet price = '' ;\nlet size = '';\nlet exchange = '';\nlet item = ''\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    nstime = item.participant_timestamp;\n    size = item.size;\n    exchange = item.exchange;\n\n   // node.warn(\"Current Price: \" +price)\n    msg.payload = price\n    \n}\n\n//node.warn(\"Unixtime: \" +ux+ \" Price: \" +price)\nmsg.topic = ux\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 320,
        "wires": [
            [
                "d201b0a9a87a6b84"
            ]
        ]
    },
    {
        "id": "16714201d6039f09",
        "type": "polygon-last-trade-v3",
        "z": "50a53a61faaed122",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 1020,
        "y": 320,
        "wires": [
            [
                "e35f9d3d4e18da0a"
            ]
        ]
    },
    {
        "id": "16f272ef73a5e697",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "prepare payload for polygon",
        "func": "let symbol = flow.get(\"ticker\")\nlet count = 1 // get only one record\n\n// if crypto\n//symbol = symbol.replace(\"\",\"X:\")\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: count,\n}\n\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 320,
        "wires": [
            [
                "16714201d6039f09"
            ]
        ]
    },
    {
        "id": "d2f301a206b1c8de",
        "type": "comment",
        "z": "50a53a61faaed122",
        "name": "Create buy side trading algos",
        "info": "",
        "x": 340,
        "y": 240,
        "wires": []
    },
    {
        "id": "75db06c3a207140e",
        "type": "inject",
        "z": "50a53a61faaed122",
        "name": "Buy at 3:55 PM and hold",
        "props": [],
        "repeat": "",
        "crontab": "55 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 320,
        "wires": [
            [
                "3814784958f7c592",
                "e863ccefd62f1040",
                "5c2f049ef30f76c6"
            ]
        ]
    },
    {
        "id": "d80c54bfc7fd1605",
        "type": "comment",
        "z": "50a53a61faaed122",
        "name": "Flow #2",
        "info": "",
        "x": 110,
        "y": 240,
        "wires": []
    },
    {
        "id": "d7c15433f0634f1a",
        "type": "inject",
        "z": "50a53a61faaed122",
        "name": "Sell at 9:31 AM ",
        "props": [],
        "repeat": "",
        "crontab": "31 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 540,
        "wires": [
            [
                "42c8c1129d498856",
                "6bb93779f9f13cd0",
                "a4f0c617fc7abdde"
            ]
        ]
    },
    {
        "id": "3814784958f7c592",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "set and store ticker SPY variables",
        "func": "let ticker = 'SPY'\nmsg.topic = ticker // this pass the ticker value to the flow variable\nnode.warn(\" Ticker: \" +ticker)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "15a7e7bbead15bb8"
            ]
        ]
    },
    {
        "id": "15a7e7bbead15bb8",
        "type": "change",
        "z": "50a53a61faaed122",
        "name": "set flow variable: ticker",
        "rules": [
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "e863ccefd62f1040",
        "type": "delay",
        "z": "50a53a61faaed122",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 340,
        "wires": [
            [
                "16f272ef73a5e697",
                "1a8f92b2f81ac642"
            ]
        ]
    },
    {
        "id": "20b987ce80ebba5e",
        "type": "inject",
        "z": "50a53a61faaed122",
        "name": "Display Flow Variables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "8679e85bbdf7fb96"
            ]
        ]
    },
    {
        "id": "8679e85bbdf7fb96",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "display variables",
        "func": "let ticker = flow.get(\"ticker\")\nlet pos = flow.get(\"position\")\nlet price = flow.get(\"price\")\n\nnode.warn(\"Ticker: \" +ticker+ \" Position: \" +pos+ \" Price: \" +price)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "a056932b989bc490",
        "type": "change",
        "z": "50a53a61faaed122",
        "name": "flow.price, flow.ux",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ux",
                "pt": "flow",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "d201b0a9a87a6b84",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "format price",
        "func": "let price = msg.payload\nprice = price.toFixed(2)\nmsg.payload = price\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 320,
        "wires": [
            [
                "a056932b989bc490"
            ]
        ]
    },
    {
        "id": "1a8f92b2f81ac642",
        "type": "alpaca-position-query",
        "z": "50a53a61faaed122",
        "conf": "e535f42f1df1b25f",
        "x": 770,
        "y": 360,
        "wires": [
            [
                "8b846759de05e243"
            ]
        ]
    },
    {
        "id": "8b846759de05e243",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "get position for SPY",
        "func": "let ticker = flow.get(\"ticker\")\n\nlet symbol = ''\nlet asset_id = '';\nlet exchange = '';\nlet asset_class = '';\nlet asset_marginable = '';\nlet qty = '';\nlet avg_entry_price = '';\nlet side = '';\nlet market_value = '';\nlet cost_basis = '';\nlet unrealized_pl = '';\nlet unrealized_plpc = '';\nlet unrealized_intraday_pl = '';\nlet unrealized_intraday_plpc = '';\nlet current_price = '';\nlet lastday_price = '';\nlet change_today = '';\nlet qty_available = '';\n\n\nfor (let i=0;i<msg.payload.length;i++)\n{\n\nasset_id = msg.payload[i][\"asset_id\"]\nsymbol = msg.payload[i][\"symbol\"]\nexchange = msg.payload[i][\"exchange\"]\nasset_class = msg.payload[i][\"asset_class\"]\nasset_marginable = msg.payload[i][\"asset_marginable\"]\nqty = msg.payload[i][\"qty\"]\navg_entry_price = msg.payload[i][\"avg_entry_price\"]\nside = msg.payload[i][\"side\"]\nmarket_value = msg.payload[i][\"market_value\"]\ncost_basis = msg.payload[i][\"cost_basis\"]\nunrealized_pl = msg.payload[i][\"unrealized_pl\"]\nunrealized_plpc = msg.payload[i][\"unrealized_plpc\"]\nunrealized_intraday_pl = msg.payload[i][\"unrealized_intraday_pl\"]\nunrealized_intraday_plpc = msg.payload[i][\"unrealized_intraday_plpc\"]\ncurrent_price = msg.payload[i][\"current_price\"]\nlastday_price = msg.payload[i][\"lastday_price\"]\nchange_today = msg.payload[i][\"change_today\"]\nqty_available = msg.payload[i][\"qty_available\"]\n\nif (symbol == ticker){\n    msg.payload = qty\n    }\n\n}\n\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 360,
        "wires": [
            [
                "7b67c48e43a54ec6"
            ]
        ]
    },
    {
        "id": "9d89899dfa725ba8",
        "type": "change",
        "z": "50a53a61faaed122",
        "name": "flow position",
        "rules": [
            {
                "t": "set",
                "p": "position",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "7b67c48e43a54ec6",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "Change empty to 0",
        "func": "let x = msg.payload;\n\n// if the array is empty, n = 0\nlet n = x.length\n//node.warn(n)\n\nif (n === 0)\n{ msg.payload = n}\n\nelse {\n msg.payload = x\n }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 360,
        "wires": [
            [
                "9d89899dfa725ba8"
            ]
        ]
    },
    {
        "id": "2eb921e2ae3f8fd4",
        "type": "alpaca-order",
        "z": "50a53a61faaed122",
        "conf": "e535f42f1df1b25f",
        "x": 950,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "2d30e57417add1c6",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "Alpaca buy order",
        "func": "let ux = (Date.now()) / 1000\nux = Math.trunc(ux)\nlet ticker = flow.get(\"ticker\")\nlet current_price = flow.get(\"price\")\nlet position = flow.get(\"position\")\nlet orders = flow.get(\"orders\")\nlet table = \"results_\" +ticker\n\nlet side = \"buy\" // for buy orders\nlet qty = 100\nlet type = \"limit\" // requires a price\nlet tif = \"gtc\"\n\n\nlet temp = ''\n\n// this is a limit order \nif (position === 0)\n    qty = position\n{   \n    temp = { \n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": side,\n    \"type\": type,\n    \"limit_price\": current_price,\n    \"time_in_force\":tif\n \n    }\n\n}\n\n// update the results table \n\nlet cashin = 0\nlet cashout = 0\n\nif (side == 'buy') {\n    cashout = (qty * current_price * -1)\n}\nelse if (side == 'buy') {\n    cashout = (qty * current_price)\n}\n\nlet sql = \"insert into \" + table + \" (unixtime, ticker, qty, price, side, type, tif,qtyheld,cashin,cashout) values\"\nsql += \" ('\" + ux + \"','\" + ticker + \"','\" + qty + \"','\" + current_price + \"','\" + side + \"','\" + type + \"','\" + tif + \"','\" + qty + \"','\" + cashin + \"','\" + cashout + \"');\"\n\nnode.warn(sql)\nmsg.topic = sql\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 400,
        "wires": [
            [
                "2eb921e2ae3f8fd4"
            ]
        ]
    },
    {
        "id": "5c2f049ef30f76c6",
        "type": "delay",
        "z": "50a53a61faaed122",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 570,
        "y": 400,
        "wires": [
            [
                "2d30e57417add1c6"
            ]
        ]
    },
    {
        "id": "698eff686fd5f269",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "display polygon output",
        "func": "let ux = (Date.now()) / 1000\nux = Math.trunc(ux)\n\nlet nstime = '';\nlet price = '' ;\nlet size = '';\nlet exchange = '';\nlet item = ''\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    nstime = item.participant_timestamp;\n    size = item.size;\n    exchange = item.exchange;\n\n   // node.warn(\"Current Price: \" +price)\n    msg.payload = price\n    \n}\n\n//node.warn(\"Unixtime: \" +ux+ \" Price: \" +price)\nmsg.topic = ux\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 520,
        "wires": [
            [
                "4f339235b0a61419"
            ]
        ]
    },
    {
        "id": "b98de2bf54beb45f",
        "type": "polygon-last-trade-v3",
        "z": "50a53a61faaed122",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 1020,
        "y": 520,
        "wires": [
            [
                "698eff686fd5f269"
            ]
        ]
    },
    {
        "id": "7e3f30bac075bb9f",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "prepare payload for polygon",
        "func": "let symbol = flow.get(\"ticker\")\nlet count = 1 // get only one record\n\n// if crypto\n//symbol = symbol.replace(\"\",\"X:\")\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: count,\n}\n\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 520,
        "wires": [
            [
                "b98de2bf54beb45f"
            ]
        ]
    },
    {
        "id": "42c8c1129d498856",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "set and store ticker SPY variables",
        "func": "let ticker = 'SPY'\nmsg.topic = ticker // this pass the ticker value to the flow variable\nnode.warn(\" Ticker: \" +ticker)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 480,
        "wires": [
            [
                "18c1d2b94d98e44b"
            ]
        ]
    },
    {
        "id": "18c1d2b94d98e44b",
        "type": "change",
        "z": "50a53a61faaed122",
        "name": "set flow variable: ticker",
        "rules": [
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "6bb93779f9f13cd0",
        "type": "delay",
        "z": "50a53a61faaed122",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 540,
        "wires": [
            [
                "7e3f30bac075bb9f",
                "df4ecde16d67c493"
            ]
        ]
    },
    {
        "id": "aef3296884cc3a09",
        "type": "inject",
        "z": "50a53a61faaed122",
        "name": "Display Flow Variables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1180,
        "y": 480,
        "wires": [
            [
                "f55c475015197477"
            ]
        ]
    },
    {
        "id": "f55c475015197477",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "display variables",
        "func": "let ticker = flow.get(\"ticker\")\nlet pos = flow.get(\"position\")\nlet price = flow.get(\"price\")\n\nnode.warn(\"Ticker: \" +ticker+ \" Position: \" +pos+ \" Price: \" +price)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "ec0462202bf91cae",
        "type": "change",
        "z": "50a53a61faaed122",
        "name": "flow.price, flow.ux",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ux",
                "pt": "flow",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "4f339235b0a61419",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "format price",
        "func": "let price = msg.payload\nprice = price.toFixed(2)\nmsg.payload = price\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 520,
        "wires": [
            [
                "ec0462202bf91cae"
            ]
        ]
    },
    {
        "id": "df4ecde16d67c493",
        "type": "alpaca-position-query",
        "z": "50a53a61faaed122",
        "conf": "e535f42f1df1b25f",
        "x": 770,
        "y": 560,
        "wires": [
            [
                "1d04f48e5f8666e5"
            ]
        ]
    },
    {
        "id": "1d04f48e5f8666e5",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "get position for SPY",
        "func": "let ticker = flow.get(\"ticker\")\n\nlet symbol = ''\nlet asset_id = '';\nlet exchange = '';\nlet asset_class = '';\nlet asset_marginable = '';\nlet qty = '';\nlet avg_entry_price = '';\nlet side = '';\nlet market_value = '';\nlet cost_basis = '';\nlet unrealized_pl = '';\nlet unrealized_plpc = '';\nlet unrealized_intraday_pl = '';\nlet unrealized_intraday_plpc = '';\nlet current_price = '';\nlet lastday_price = '';\nlet change_today = '';\nlet qty_available = '';\n\n\nfor (let i=0;i<msg.payload.length;i++)\n{\n\nasset_id = msg.payload[i][\"asset_id\"]\nsymbol = msg.payload[i][\"symbol\"]\nexchange = msg.payload[i][\"exchange\"]\nasset_class = msg.payload[i][\"asset_class\"]\nasset_marginable = msg.payload[i][\"asset_marginable\"]\nqty = msg.payload[i][\"qty\"]\navg_entry_price = msg.payload[i][\"avg_entry_price\"]\nside = msg.payload[i][\"side\"]\nmarket_value = msg.payload[i][\"market_value\"]\ncost_basis = msg.payload[i][\"cost_basis\"]\nunrealized_pl = msg.payload[i][\"unrealized_pl\"]\nunrealized_plpc = msg.payload[i][\"unrealized_plpc\"]\nunrealized_intraday_pl = msg.payload[i][\"unrealized_intraday_pl\"]\nunrealized_intraday_plpc = msg.payload[i][\"unrealized_intraday_plpc\"]\ncurrent_price = msg.payload[i][\"current_price\"]\nlastday_price = msg.payload[i][\"lastday_price\"]\nchange_today = msg.payload[i][\"change_today\"]\nqty_available = msg.payload[i][\"qty_available\"]\n\nif (symbol == ticker){\n    msg.payload = qty\n    }\n\n}\n\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 560,
        "wires": [
            [
                "53dc7c523d8b8d68"
            ]
        ]
    },
    {
        "id": "4552508cc04a193c",
        "type": "change",
        "z": "50a53a61faaed122",
        "name": "flow position",
        "rules": [
            {
                "t": "set",
                "p": "position",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "53dc7c523d8b8d68",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "Change empty to 0",
        "func": "let x = msg.payload;\n\n// if the array is empty, n = 0\nlet n = x.length\n//node.warn(n)\n\nif (n === 0)\n{ msg.payload = n}\n\nelse {\n msg.payload = x\n }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 560,
        "wires": [
            [
                "4552508cc04a193c"
            ]
        ]
    },
    {
        "id": "513030a271aa2dc4",
        "type": "alpaca-order",
        "z": "50a53a61faaed122",
        "conf": "e535f42f1df1b25f",
        "x": 950,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "ca731bdd4a2ad62d",
        "type": "function",
        "z": "50a53a61faaed122",
        "name": "Alpaca sell order",
        "func": "let ux = (Date.now()) / 1000\nux = Math.trunc(ux)\nlet ticker = flow.get(\"ticker\")\nlet current_price = flow.get(\"price\")\nlet position = flow.get(\"position\")\nlet orders = flow.get(\"orders\")\nlet table = \"results_\" +ticker\n\nlet side = \"sell\" // for sell orders\nlet qty = 100\nlet type = \"limit\" // requires a price\nlet tif = \"gtc\"\n\n\nlet temp = ''\n\n// this is a limit order \nif (position === 0)\n    qty = position\n{   \n    temp = { \n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": side,\n    \"type\": type,\n    \"limit_price\": current_price,\n    \"time_in_force\":tif\n \n    }\n\n}\n\n// update the results table \n\nlet cashin = 0\nlet cashout = 0\n\nif (side == 'buy') {\n    cashout = (qty * current_price * -1)\n}\nelse if (side == 'sell') {\n    cashout = (qty * current_price)\n}\n\nlet sql = \"insert into \" + table + \" (unixtime, ticker, qty, price, side, type, tif,qtyheld,cashin,cashout) values\"\nsql += \" ('\" + ux + \"','\" + ticker + \"','\" + qty + \"','\" + current_price + \"','\" + side + \"','\" + type + \"','\" + tif + \"','\" + qty + \"','\" + cashin + \"','\" + cashout + \"');\"\n\nnode.warn(sql)\nmsg.topic = sql\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 600,
        "wires": [
            [
                "513030a271aa2dc4"
            ]
        ]
    },
    {
        "id": "a4f0c617fc7abdde",
        "type": "delay",
        "z": "50a53a61faaed122",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 570,
        "y": 600,
        "wires": [
            [
                "ca731bdd4a2ad62d"
            ]
        ]
    },
    {
        "id": "8b94eec520a63be1",
        "type": "comment",
        "z": "50a53a61faaed122",
        "name": "Create sell side trading algos",
        "info": "",
        "x": 320,
        "y": 480,
        "wires": []
    },
    {
        "id": "9ea7ea92dcfa8b90",
        "type": "comment",
        "z": "50a53a61faaed122",
        "name": "Flow #3",
        "info": "",
        "x": 110,
        "y": 480,
        "wires": []
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK0OC6RZ7SR24MW1U9TV",
        "paper": true
    }
]