[
    {
        "id": "3359d30a87bf768c",
        "type": "tab",
        "label": "Buy and Sell ETHUSD every hour",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a6600294b7c9d518",
        "type": "comment",
        "z": "3359d30a87bf768c",
        "name": "The name of this strategy is \"Trade ETHUSD each hour\"",
        "info": "",
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "a0914a20e060c0aa",
        "type": "inject",
        "z": "3359d30a87bf768c",
        "name": "BUY ",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "cfeca1e39571ada9",
                "52ccba05d1bd2cec",
                "a238a749146de03f"
            ]
        ]
    },
    {
        "id": "5c69cd46ca40aea1",
        "type": "comment",
        "z": "3359d30a87bf768c",
        "name": "Flow 2: Buy Order",
        "info": "",
        "x": 170,
        "y": 420,
        "wires": []
    },
    {
        "id": "cfeca1e39571ada9",
        "type": "function-npm",
        "z": "3359d30a87bf768c",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 520,
        "wires": [
            [
                "01e70415a29167b2"
            ]
        ]
    },
    {
        "id": "e3e474265fa6827f",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n//node.warn(\"Benchmark Price: \" +price)\n\nmsg.benchmark = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 520,
        "wires": [
            [
                "999cdb1cace779db",
                "62702ab84d2c2c31"
            ]
        ]
    },
    {
        "id": "01e70415a29167b2",
        "type": "polygon-last-trade-v3",
        "z": "3359d30a87bf768c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 520,
        "wires": [
            [
                "e3e474265fa6827f"
            ]
        ]
    },
    {
        "id": "999cdb1cace779db",
        "type": "change",
        "z": "3359d30a87bf768c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "benchmark_price",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a72ab2a04d27eeaf",
        "type": "comment",
        "z": "3359d30a87bf768c",
        "name": "Flow #1: Enter strategy information in the \"set and store strategy variables function node",
        "info": "",
        "x": 330,
        "y": 100,
        "wires": []
    },
    {
        "id": "c5adae977168be67",
        "type": "inject",
        "z": "3359d30a87bf768c",
        "name": "At Start Up",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "a1d43bd78e03593c",
                "58d0f4b086450d13"
            ]
        ]
    },
    {
        "id": "a1d43bd78e03593c",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "set and store portfolio and ticker variables",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet tickers = 'ETH/USD'\nlet name = \"Trade ETHUSD every hour.\"\nlet algotype = \"intraday\"\nlet status = \"running\"\nlet trade_freq = 24\nlet sharpe = 0\nlet unixtime = 0\nlet benchmark = 'SPY'\nlet tickertype = 'crypto'\nlet account = 'paper'\nlet psize = 2000 // size of portfolio\nlet starting_balance = 0\nlet balance_today = 0\nlet ending_balance_today = 0\nlet balance_end = 0\nlet benchmark_start = 0\nlet benchmark_start_today = 0\nlet benchmark_current = 0\nlet benchmark_end_today = 0\nlet benchmark_end = 0\nlet gain_today_realized = 0\nlet gain_today_unrealized = 0\nlet pctgain_today = 0\nlet gainloss_realized = 0\nlet gainloss_unrealized = 0\nlet gainlosspct = 0\nlet benchmarkgain_today = 0\nlet benchmarkgain = 0\nlet benchmarkpct_today = 0\nlet benchmarkpct = 0\n\n\nmsg.id = id\nmsg.name = name\nmsg.trade = trade_freq\nmsg.status = status\nmsg.benchmark = benchmark\nmsg.account = account\nmsg.tickertype = tickertype\nmsg.psize = psize\nmsg.tickers = tickers\n\nlet sql = \"replace into algo (id,name, tickers, algotype, status, trade_freq,sharpe,unixtime, portfolio,starting_balance,balance_today,ending_balance_today,balance_end,benchmark_start,benchmark_start_today,benchmark_current,benchmark_end_today,benchmark_end,gain_today_realized, gain_today_unrealized,pctgain_today,gainloss_realized,gainloss_unrealized,gainlosspct, benchmarkgain_today, benchmarkgain,benchmarkpct_today,benchmarkpct) values ('\"\nsql += id + \"', '\" + name + \"','\" + tickers + \"','\" + algotype + \"', '\" + status + \"', '\" + trade_freq + \"','\" + sharpe + \"', '\" + unixtime + \"','\" + psize + \"','\" + starting_balance + \"', '\" + balance_today + \"','\" + ending_balance_today + \"','\" + balance_end + \"', '\" + benchmark_start + \"','\" + benchmark_start_today + \"','\" + benchmark_current + \"', '\" + benchmark_end_today + \"','\" + benchmark_end + \"','\" + gain_today_realized + \"', '\" + gain_today_unrealized + \"','\" + pctgain_today + \"','\" + gainloss_realized + \"', '\" + gainloss_unrealized + \"','\" + gainlosspct + \"','\" + benchmarkgain_today + \"', '\" + benchmarkgain + \"','\" + benchmarkpct_today + \"','\" + benchmarkpct + \"');\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "eeaa8a8524090f6b",
                "470f72c015df71b1"
            ]
        ]
    },
    {
        "id": "eeaa8a8524090f6b",
        "type": "change",
        "z": "3359d30a87bf768c",
        "name": "set flow variable: ticker, qty,portfolioid",
        "rules": [
            {
                "t": "set",
                "p": "portfolioid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "name",
                "pt": "flow",
                "to": "name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "trades",
                "pt": "flow",
                "to": "trade",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickertype",
                "pt": "flow",
                "to": "tickertype",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "470f72c015df71b1",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "0ff8fe2630f9690e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 650,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "902cb16533cdc55c",
        "type": "function-npm",
        "z": "3359d30a87bf768c",
        "name": "Get current price",
        "func": "let tickertype = flow.get(\"tickertype\")\n\nlet symbol = msg.ticker\n\nif ( tickertype === 'crypto'){\n\nsymbol = \"X:\" +symbol\nsymbol = symbol.replace(\"/\", \"\");\n}\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 640,
        "wires": [
            [
                "8896490be19394c6"
            ]
        ]
    },
    {
        "id": "767c71d6be661c76",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get price last trade",
        "func": "let price = ''\nlet item = 0\nlet symbol = msg.symbol\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nmsg.price = price\n//node.warn(\"Symbol: \" +symbol+ \" Current Price: \" +price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 640,
        "wires": [
            [
                "46cda8a2843487e0"
            ]
        ]
    },
    {
        "id": "8896490be19394c6",
        "type": "polygon-last-trade-v3",
        "z": "3359d30a87bf768c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 1060,
        "y": 640,
        "wires": [
            [
                "767c71d6be661c76"
            ]
        ]
    },
    {
        "id": "7e07f2f2daf8295d",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 640,
        "wires": [
            [
                "902cb16533cdc55c"
            ]
        ]
    },
    {
        "id": "917b7a7535628492",
        "type": "alpaca-order",
        "z": "3359d30a87bf768c",
        "conf": "e535f42f1df1b25f",
        "x": 1070,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d698894613394238",
        "type": "change",
        "z": "3359d30a87bf768c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "clientorderid",
                "pt": "flow",
                "to": "clientorderid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "9246f68fa185f237",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1060,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "6a6d195365efb2b8",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "0ff8fe2630f9690e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 450,
        "y": 580,
        "wires": [
            [
                "7bbe805945746324"
            ]
        ]
    },
    {
        "id": "1f50fbc9347db4eb",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "format tickers",
        "func": "let ticker = msg.payload[\"a\"]\n//node.warn(\"Symbol: \" +ticker)\nlet newticker = ticker.split(\", \");\n//node.warn(newticker)\n\nmsg.payload = newticker\nmsg.ticker = newticker\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 580,
        "wires": [
            [
                "4dd0b4922aa043d0"
            ]
        ]
    },
    {
        "id": "7bbe805945746324",
        "type": "split",
        "z": "3359d30a87bf768c",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 580,
        "wires": [
            [
                "1f50fbc9347db4eb"
            ]
        ]
    },
    {
        "id": "4dd0b4922aa043d0",
        "type": "split",
        "z": "3359d30a87bf768c",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 890,
        "y": 580,
        "wires": [
            [
                "7109419b3fe4fb38"
            ]
        ]
    },
    {
        "id": "7109419b3fe4fb38",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "413d00aaced9b1cb"
            ]
        ]
    },
    {
        "id": "413d00aaced9b1cb",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get tickers",
        "func": "let ticker = msg.payload\n\nmsg.ticker = ticker\n//node.warn(msg.ticker)\n//node.warn(msg.id)\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 580,
        "wires": [
            [
                "7e07f2f2daf8295d"
            ]
        ]
    },
    {
        "id": "62702ab84d2c2c31",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "set algo id",
        "func": "let id = flow.get(\"portfolioid\")\nlet sql = \"select tickers as a from algo where id = \" +id\n//node.warn(sql)\nmsg.topic = sql\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            [
                "6a6d195365efb2b8"
            ]
        ]
    },
    {
        "id": "032067bce76c6562",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 940,
        "wires": [
            [
                "660ef8f2e39c2f3c"
            ]
        ]
    },
    {
        "id": "660ef8f2e39c2f3c",
        "type": "alpaca-query-order",
        "z": "3359d30a87bf768c",
        "conf": "e535f42f1df1b25f",
        "x": 740,
        "y": 940,
        "wires": [
            [
                "710d3d7e89981076"
            ]
        ]
    },
    {
        "id": "9f2ac3f6c243178c",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((status == 'filled') && (clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  filled_type = '\" +type+ \"', filled_side = '\" + side + \"', filled_tif = '\" + time_in_force + \"', filled_status = '\" + status + \"', filled_at = '\" + filled_at + \"', filled_price = '\" + filled_avg_price + \"', filled_qty = '\" + filled_qty + \"', position = \" +position+ \" where clientorderid = '\" +clientorderid+ \"';\"\n\nmsg.topic = sql\n//node.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 940,
        "wires": [
            [
                "cf9219b2beae0e41"
            ]
        ]
    },
    {
        "id": "710d3d7e89981076",
        "type": "split",
        "z": "3359d30a87bf768c",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 940,
        "wires": [
            [
                "9f2ac3f6c243178c"
            ]
        ]
    },
    {
        "id": "cf9219b2beae0e41",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1240,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "68aa80ec66152a2e",
        "type": "comment",
        "z": "3359d30a87bf768c",
        "name": "Flow 3: Update portfolio table with order information when order is filled",
        "info": "",
        "x": 330,
        "y": 820,
        "wires": []
    },
    {
        "id": "0eab35bc72c54eac",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select clientorderid from portfolio where portfolioid = \" +id+ \" and filled_at is null\"\nmsg.topic = sql\n//node.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 880,
        "wires": [
            [
                "5f40905e1e6b8f38"
            ]
        ]
    },
    {
        "id": "5f40905e1e6b8f38",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 760,
        "y": 880,
        "wires": [
            [
                "699ce36ec3022642"
            ]
        ]
    },
    {
        "id": "64482a1bad2a2681",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"clientorderid\"]\nmsg.clientid = clientorderid\n//node.warn(msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 880,
        "wires": [
            [
                "032067bce76c6562"
            ]
        ]
    },
    {
        "id": "699ce36ec3022642",
        "type": "split",
        "z": "3359d30a87bf768c",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 880,
        "wires": [
            [
                "20f8c35ea92f6e77"
            ]
        ]
    },
    {
        "id": "20f8c35ea92f6e77",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1050,
        "y": 880,
        "wires": [
            [
                "64482a1bad2a2681"
            ]
        ]
    },
    {
        "id": "8288ce8cc0ce78df",
        "type": "inject",
        "z": "3359d30a87bf768c",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 880,
        "wires": [
            [
                "0eab35bc72c54eac"
            ]
        ]
    },
    {
        "id": "bd499b4fe6ed8b8f",
        "type": "comment",
        "z": "3359d30a87bf768c",
        "name": "Flow #4: Place Sell Orders",
        "info": "",
        "x": 190,
        "y": 1080,
        "wires": []
    },
    {
        "id": "2339f301cff1a79b",
        "type": "comment",
        "z": "3359d30a87bf768c",
        "name": "Flow 6: Update portfolio table with filled SELL orders",
        "info": "",
        "x": 250,
        "y": 1540,
        "wires": []
    },
    {
        "id": "22977d73ecc3b3f8",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1660,
        "wires": [
            [
                "7ce8aac4671cade4"
            ]
        ]
    },
    {
        "id": "7ce8aac4671cade4",
        "type": "alpaca-query-order",
        "z": "3359d30a87bf768c",
        "conf": "e535f42f1df1b25f",
        "x": 660,
        "y": 1660,
        "wires": [
            [
                "4e9a6def9b939003"
            ]
        ]
    },
    {
        "id": "3f359edae1860f57",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n//node.warn(clientid)\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  newfilled_type = '\" + type + \"', newfilled_side = '\" + side + \"', newfilled_tif = '\" + time_in_force + \"', newfilled_status = '\" + status + \"', newfilled_at = '\" + filled_at + \"', newfilled_price = '\" + filled_avg_price + \"', newfilled_qty = '\" + filled_qty + \"', newposition = \" + position + \" where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1660,
        "wires": [
            [
                "6b2dea6adbbc04b8"
            ]
        ]
    },
    {
        "id": "4e9a6def9b939003",
        "type": "split",
        "z": "3359d30a87bf768c",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 1660,
        "wires": [
            [
                "3f359edae1860f57",
                "78a1afc4bcbe290e"
            ]
        ]
    },
    {
        "id": "6b2dea6adbbc04b8",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1180,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "c961321a6cdc2538",
        "type": "inject",
        "z": "3359d30a87bf768c",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1600,
        "wires": [
            [
                "ce1d3b02ce0b752a"
            ]
        ]
    },
    {
        "id": "ce1d3b02ce0b752a",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select newclient_order_id from portfolio where portfolioid = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1600,
        "wires": [
            [
                "5631ce66c9bfe261"
            ]
        ]
    },
    {
        "id": "5631ce66c9bfe261",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 680,
        "y": 1600,
        "wires": [
            [
                "e06ee9808c5b29f6"
            ]
        ]
    },
    {
        "id": "be355180a9718be7",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"newclient_order_id\"]\nmsg.clientid = clientorderid\nnode.warn(\"msg.clientid: \" +msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1600,
        "wires": [
            [
                "22977d73ecc3b3f8"
            ]
        ]
    },
    {
        "id": "e06ee9808c5b29f6",
        "type": "split",
        "z": "3359d30a87bf768c",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 1600,
        "wires": [
            [
                "ecb43783720bc57f"
            ]
        ]
    },
    {
        "id": "ecb43783720bc57f",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 990,
        "y": 1600,
        "wires": [
            [
                "be355180a9718be7"
            ]
        ]
    },
    {
        "id": "ab745440f6eadf19",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "update portfolio",
        "func": "let clientorderid = msg.payload[\"client_order_id\"]\nlet clientid = msg.clientid\n\nif ((clientorderid == clientid)) { // filled  only\n\n\nlet sql = \"update portfolio SET  trade_profit = ((newfilled_qty * newfilled_price) - (filled_price * filled_qty)), benchmark_profit = (benchmark_end - benchmark_start) where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1700,
        "wires": [
            [
                "91bd527c131f2f5e"
            ]
        ]
    },
    {
        "id": "91bd527c131f2f5e",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1180,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "78a1afc4bcbe290e",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 1700,
        "wires": [
            [
                "ab745440f6eadf19"
            ]
        ]
    },
    {
        "id": "175d9e5d5f0b76c9",
        "type": "inject",
        "z": "3359d30a87bf768c",
        "name": "COVER",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "638c4fdc27e67042",
                "ac3bd7e4bbf0340d"
            ]
        ]
    },
    {
        "id": "638c4fdc27e67042",
        "type": "function-npm",
        "z": "3359d30a87bf768c",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 1140,
        "wires": [
            [
                "429757c0ca107537"
            ]
        ]
    },
    {
        "id": "b016813e705f151e",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\nnode.warn(\"Benchmark Price: \" +price)\nmsg.benchmark = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1140,
        "wires": [
            [
                "698b8651d60378fe"
            ]
        ]
    },
    {
        "id": "429757c0ca107537",
        "type": "polygon-last-trade-v3",
        "z": "3359d30a87bf768c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 540,
        "y": 1140,
        "wires": [
            [
                "b016813e705f151e"
            ]
        ]
    },
    {
        "id": "698b8651d60378fe",
        "type": "change",
        "z": "3359d30a87bf768c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "benchmark_end",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "9d1f84279194b393",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1190,
        "y": 1220,
        "wires": [
            [
                "447d70fdcc526590"
            ]
        ]
    },
    {
        "id": "1e4b31af3aea220e",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 1220,
        "wires": [
            [
                "1e6c6dd9edbb9f78"
            ]
        ]
    },
    {
        "id": "1e6c6dd9edbb9f78",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get tickers",
        "func": "msg.ticker = msg.payload[\"ticker\"]\nmsg.qty = msg.payload[\"filled_qty\"]\nmsg.clientid = msg.payload[\"clientorderid\"]\n\nnode.warn(\"Portfolioid: \" +msg.id+ \" Ticker: \" +msg.ticker+ \" Qty:\" +msg.qty+ \" Clientorderid: \" +msg.clientid)\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1220,
        "wires": [
            [
                "9d1f84279194b393"
            ]
        ]
    },
    {
        "id": "a869313c1b3fdb0b",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "select tickers from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\nlet sql = \"select ticker,filled_qty,clientorderid from portfolio where filled_qty > 0 and trade_profit is null and portfolioid = \" +id\n//node.warn(sql)\nmsg.topic = sql\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1220,
        "wires": [
            [
                "f6362bc482018127"
            ]
        ]
    },
    {
        "id": "f6362bc482018127",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 580,
        "y": 1220,
        "wires": [
            [
                "516dd437630ae01a"
            ]
        ]
    },
    {
        "id": "516dd437630ae01a",
        "type": "split",
        "z": "3359d30a87bf768c",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 1220,
        "wires": [
            [
                "1e4b31af3aea220e"
            ]
        ]
    },
    {
        "id": "dfbc2e71c67ffca2",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "62235ced9bc35c5a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 860,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "1772a7c5c2b681e6",
        "type": "alpaca-order",
        "z": "3359d30a87bf768c",
        "conf": "e535f42f1df1b25f",
        "x": 870,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "50a2dd49c4edf001",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get price last trade",
        "func": "let price = 0\nlet item = 0\n\nlet qty = msg.qty\nlet clientid = msg.clientid\nlet ticker = msg.ticker\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\n\nmsg.price = price\n//node.warn(\"Symbol: \" +ticker+ \" Current Price: \" +price+ \" Qty: \" +qty+ \" Client ID: \" +clientid)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1280,
        "wires": [
            [
                "25476d269bf5fe0a"
            ]
        ]
    },
    {
        "id": "3930c7955d22f9cb",
        "type": "polygon-last-trade-v3",
        "z": "3359d30a87bf768c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 680,
        "y": 1280,
        "wires": [
            [
                "50a2dd49c4edf001"
            ]
        ]
    },
    {
        "id": "447d70fdcc526590",
        "type": "function-npm",
        "z": "3359d30a87bf768c",
        "name": "Get current price",
        "func": "let symbol = msg.payload[\"ticker\"]\nlet tickertype = flow.get(\"tickertype\")\n\n\nif ( (tickertype == 'crypto') ){\nsymbol = \"X:\" +symbol\nsymbol = symbol.replace(\"/\", \"\");\n}\n\n//node.warn(\"Symbol: \" + symbol + \" Tickertype: \" + tickertype)\n\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(msg.payload)\n\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 1280,
        "wires": [
            [
                "3930c7955d22f9cb"
            ]
        ]
    },
    {
        "id": "ac3bd7e4bbf0340d",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1220,
        "wires": [
            [
                "a869313c1b3fdb0b",
                "2cdd2472d83ce991"
            ]
        ]
    },
    {
        "id": "2cdd2472d83ce991",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1440,
        "wires": [
            [
                "ce1d3b02ce0b752a"
            ]
        ]
    },
    {
        "id": "a238a749146de03f",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 980,
        "wires": [
            [
                "638c4fdc27e67042",
                "ac3bd7e4bbf0340d"
            ]
        ]
    },
    {
        "id": "52ccba05d1bd2cec",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 760,
        "wires": [
            [
                "0eab35bc72c54eac"
            ]
        ]
    },
    {
        "id": "2fb50fb6339cfece",
        "type": "function-npm",
        "z": "3359d30a87bf768c",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 220,
        "wires": [
            [
                "ad8ec7c550db0299"
            ]
        ]
    },
    {
        "id": "dd1f0fa7ae12a08e",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nlet sql = \"update algo set benchmark_start = \" +price+ \" where id = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 220,
        "wires": [
            [
                "8172130524b63679"
            ]
        ]
    },
    {
        "id": "ad8ec7c550db0299",
        "type": "polygon-last-trade-v3",
        "z": "3359d30a87bf768c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 680,
        "y": 220,
        "wires": [
            [
                "dd1f0fa7ae12a08e"
            ]
        ]
    },
    {
        "id": "58d0f4b086450d13",
        "type": "delay",
        "z": "3359d30a87bf768c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 220,
        "wires": [
            [
                "2fb50fb6339cfece"
            ]
        ]
    },
    {
        "id": "8172130524b63679",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "312de5ece428d452",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 1150,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b2a2b00efd585beb",
        "type": "inject",
        "z": "3359d30a87bf768c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1660,
        "wires": [
            [
                "22977d73ecc3b3f8"
            ]
        ]
    },
    {
        "id": "8e863bf04bcd1984",
        "type": "change",
        "z": "3359d30a87bf768c",
        "name": "set flow variable: ticker, qty,portfolioid",
        "rules": [
            {
                "t": "set",
                "p": "portfolioid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "name",
                "pt": "flow",
                "to": "name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "trades",
                "pt": "flow",
                "to": "trade",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickertype",
                "pt": "flow",
                "to": "tickertype",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "d0fa11c5b0e12698",
        "type": "inject",
        "z": "3359d30a87bf768c",
        "name": "Reset flow variables after deploy",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "5cc45f0bb6d48ad9",
                "d2b562252e9b43fc"
            ]
        ]
    },
    {
        "id": "5cc45f0bb6d48ad9",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "enter algo name to set id",
        "func": "let sql = \"select id from algo where name = 'Trade ETHUSD every hour.'\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 340,
        "wires": [
            [
                "b93bda101806c893"
            ]
        ]
    },
    {
        "id": "f1d20a376d127312",
        "type": "change",
        "z": "3359d30a87bf768c",
        "name": "set flow portfolioid",
        "rules": [
            {
                "t": "set",
                "p": "portfolioid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b93bda101806c893",
        "type": "sqlite",
        "z": "3359d30a87bf768c",
        "mydb": "0ff8fe2630f9690e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 650,
        "y": 340,
        "wires": [
            [
                "444d95a594d05b17"
            ]
        ]
    },
    {
        "id": "444d95a594d05b17",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "set portfolioid",
        "func": "let id = 0\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    id = msg.payload[i][\"id\"]\n}\n\nmsg.id = id\nnode.warn(msg.id)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 340,
        "wires": [
            [
                "f1d20a376d127312"
            ]
        ]
    },
    {
        "id": "d2b562252e9b43fc",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "set and store portfolio and ticker variables",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet tickers = 'ETH/USD'\nlet name = \"Trade ETHUSD every hour.\"\nlet algotype = \"intraday\"\nlet status = \"running\"\nlet trade_freq = 24\nlet sharpe = 0\nlet unixtime = 0\nlet benchmark = 'SPY'\nlet tickertype = 'crypto'\nlet account = 'paper'\nlet psize = 2000 // size of portfolio\nlet starting_balance = 0\nlet balance_today = 0\nlet ending_balance_today = 0\nlet balance_end = 0\nlet benchmark_start = 0\nlet benchmark_start_today = 0\nlet benchmark_current = 0\nlet benchmark_end_today = 0\nlet benchmark_end = 0\nlet gain_today_realized = 0\nlet gain_today_unrealized = 0\nlet pctgain_today = 0\nlet gainloss_realized = 0\nlet gainloss_unrealized = 0\nlet gainlosspct = 0\nlet benchmarkgain_today = 0\nlet benchmarkgain = 0\nlet benchmarkpct_today = 0\nlet benchmarkpct = 0\n\n\n//msg.id = id\nmsg.name = name\nmsg.trade = trade_freq\nmsg.status = status\nmsg.benchmark = benchmark\nmsg.account = account\nmsg.tickertype = tickertype\nmsg.psize = psize\nmsg.tickers = tickers\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 300,
        "wires": [
            [
                "8e863bf04bcd1984"
            ]
        ]
    },
    {
        "id": "46cda8a2843487e0",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "place market order ",
        "func": "let psize = flow.get(\"psize\")\nlet id = flow.get(\"portfolioid\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_price = flow.get(\"benchmark_price\")\nlet account = flow.get(\"account\")\nlet name = flow.get(\"name\")\n\nlet localtime = new Date();\n\n//let ticker = flow.get(\"ticker\") // use when there is only one ticker to buy\nlet ticker = msg.symbol\n\n\nlet price = msg.price\n\n// use this when buying multiple assets. Divides portfolio size by the number of assets purchased  divided by price to get desired qty\nlet qty = (psize / price)\nqty = Math.floor(qty)\n//node.warn(\"Ticker: \" + ticker + \" Price: \" + price + \" Portfolio Size: \" + psize + \" Qty: \" + qty)\n\nlet tickertype = flow.get(\"tickertype\")\n\n// if crypto, Limit price must exceed current price by $1 \n\nif ((tickertype == 'crypto)')) {\nprice = (price + 1)  // Limit price must exceed current price by $1 \nprice = price.toFixed(2)\n}\n\n// if crypto, use the proper Alpaca format for crypto \n\nif ((tickertype == 'crypto')) {\n    ticker = ticker.replace(\"X:\",\"\")\n    ticker = ticker.replace(\"USD\",\"/USD\")\n}\n\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id\n\n\nlet sql = \"replace into portfolio (account,name,date,portfolioid,ticker, clientorderid,price,qty,benchmark,benchmark_start) values ('\" + account + \"', '\" + name + \"','\" + localtime + \"',\" + id + \",'\" + ticker + \"','\" + client_order_id + \"','\" +price+ \"',\" +qty+ \",'\" +benchmark+ \"',\" +benchmark_price+ \");\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\n// create a market order for Alpaca\n    let temp = ''\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty, \n        \"side\": \"buy\",\n        \"type\": \"market\",\n //       \"limit_price\": price,\n        \"client_order_id\": client_order_id,\n        \"time_in_force\": \"gtc\"\n    };\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 740,
        "wires": [
            [
                "d698894613394238",
                "917b7a7535628492",
                "9246f68fa185f237"
            ]
        ]
    },
    {
        "id": "25476d269bf5fe0a",
        "type": "function",
        "z": "3359d30a87bf768c",
        "name": "place market sell order",
        "func": "let id = flow.get(\"portfolioid\")\nlet tickertype = flow.get(\"tickertype\")\n\n\nlet benchmark_end = flow.get(\"benchmark_end\")\n\nlet ticker = msg.ticker\nlet qty = msg.qty\nlet price = msg.price\nlet position = qty * price \nlet clientid = msg.clientid\n\nlet d = Date.now()\nlet newclient_order_id = \"SELL\" + ticker + d\n\n\nlet sql = \"update portfolio set benchmark_end = \" + benchmark_end + \", newclient_order_id = '\" + newclient_order_id + \"', newqty = \" + qty + \", newprice = \" +price+ \", newposition = \" + position + \" where clientorderid = '\" + clientid + \"';\" \n\nmsg.topic = sql\n//node.warn(msg.topic)\n\n// create a market order for Alpaca\nif (qty > 0){\n\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": \"sell\",\n    \"type\": \"market\",\n//    \"limit_price\": price,\n    \"client_order_id\": newclient_order_id,\n    \"time_in_force\": \"gtc\"\n};\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\n    return msg;\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1360,
        "wires": [
            [
                "1772a7c5c2b681e6",
                "dfbc2e71c67ffca2"
            ]
        ]
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "0ff8fe2630f9690e",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK04XC8SPXUXFUJ5C0BO",
        "paper": true
    },
    {
        "id": "62235ced9bc35c5a",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "312de5ece428d452",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    }
]