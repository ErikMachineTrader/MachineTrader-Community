[
    {
        "id": "37c94e6e073225a2",
        "type": "tab",
        "label": "Alpaca Nodes",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "533a15510ab87aa4",
        "type": "alpaca-account-query",
        "z": "37c94e6e073225a2",
        "conf": "810ce3520dc18040",
        "x": 420,
        "y": 100,
        "wires": [
            [
                "b6dec66138fb9030"
            ]
        ]
    },
    {
        "id": "b6dec66138fb9030",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "Insert into live balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'live'\n//balance = parseInt(balance)\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 100,
        "wires": [
            [
                "91dd998ebe4b6f76"
            ]
        ]
    },
    {
        "id": "6933f827ef69be66",
        "type": "alpaca-account-query",
        "z": "37c94e6e073225a2",
        "conf": "810ce3520dc18040",
        "x": 420,
        "y": 180,
        "wires": [
            [
                "ad598a4cb44330ab"
            ]
        ]
    },
    {
        "id": "98d8cf2ce5ffe27a",
        "type": "alpaca-account-query",
        "z": "37c94e6e073225a2",
        "conf": "c06cec183f9317f9",
        "x": 420,
        "y": 140,
        "wires": [
            [
                "df12c443eeaf3522"
            ]
        ]
    },
    {
        "id": "cc98756eeb1c73bc",
        "type": "alpaca-account-query",
        "z": "37c94e6e073225a2",
        "conf": "c06cec183f9317f9",
        "x": 420,
        "y": 220,
        "wires": [
            [
                "3c8216f8b00c5f8c"
            ]
        ]
    },
    {
        "id": "df12c443eeaf3522",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "Insert into paper balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n//node.warn(Number.isInteger(balance))\n//balance = parseInt(balance)\n\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 140,
        "wires": [
            [
                "9317fb814bcc2c5e"
            ]
        ]
    },
    {
        "id": "3c8216f8b00c5f8c",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 220,
        "wires": [
            [
                "0a2a9bd4f995debf"
            ]
        ]
    },
    {
        "id": "91dd998ebe4b6f76",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "9317fb814bcc2c5e",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "fc2358c61c0da10a",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "0a2a9bd4f995debf",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ad598a4cb44330ab",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "Insert into live balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'live'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 180,
        "wires": [
            [
                "fc2358c61c0da10a"
            ]
        ]
    },
    {
        "id": "c13dc0136b5db2a1",
        "type": "inject",
        "z": "37c94e6e073225a2",
        "name": "Daily at Midnight",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "59 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "6933f827ef69be66",
                "cc98756eeb1c73bc"
            ]
        ]
    },
    {
        "id": "e77e23636fc37fc4",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "truncate positions table",
        "func": "msg.query = \"truncate table positions\"\n//msg.query = \"drop table positions\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "9792b426c591c270"
            ]
        ]
    },
    {
        "id": "9792b426c591c270",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 340,
        "wires": [
            [
                "e04047e047d7e00d"
            ]
        ]
    },
    {
        "id": "08e87fab3fdc639b",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "insert LIVE account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('live', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n//node.warn(sql)\nmsg.query = sql\nmsg.market = market_value\nmsg.symbol = symbol\nmsg.gain_today = unrealized_intraday_pl\nmsg.gain_alltime = unrealized_pl\nmsg.pctgain_today = unrealized_intraday_plpc\nmsg.pctgain_alltime = unrealized_plpc\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 400,
        "wires": [
            [
                "2be91e09f98b46ab"
            ]
        ]
    },
    {
        "id": "e04047e047d7e00d",
        "type": "alpaca-position-query",
        "z": "37c94e6e073225a2",
        "conf": "810ce3520dc18040",
        "x": 450,
        "y": 400,
        "wires": [
            [
                "830c183eaf8cf278"
            ]
        ]
    },
    {
        "id": "2be91e09f98b46ab",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "7eed2296c3e871a7",
        "type": "comment",
        "z": "37c94e6e073225a2",
        "name": "Update positions table min",
        "info": "",
        "x": 150,
        "y": 300,
        "wires": []
    },
    {
        "id": "830c183eaf8cf278",
        "type": "split",
        "z": "37c94e6e073225a2",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 400,
        "wires": [
            [
                "08e87fab3fdc639b"
            ]
        ]
    },
    {
        "id": "73bf92e59e2045c9",
        "type": "alpaca-position-query",
        "z": "37c94e6e073225a2",
        "conf": "c06cec183f9317f9",
        "x": 450,
        "y": 440,
        "wires": [
            [
                "2f701f43f4c9a274"
            ]
        ]
    },
    {
        "id": "505c05e0b948a14d",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "insert PAPER account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('paper', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n//node.warn(sql)\nmsg.query = sql\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 440,
        "wires": [
            [
                "2d86ca2f85811287"
            ]
        ]
    },
    {
        "id": "2d86ca2f85811287",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2f701f43f4c9a274",
        "type": "split",
        "z": "37c94e6e073225a2",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 440,
        "wires": [
            [
                "505c05e0b948a14d"
            ]
        ]
    },
    {
        "id": "3d268c8cadde61a2",
        "type": "comment",
        "z": "37c94e6e073225a2",
        "name": "Copyright©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 230,
        "y": 20,
        "wires": []
    },
    {
        "id": "b8589f3ec52756a1",
        "type": "split",
        "z": "37c94e6e073225a2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 640,
        "wires": [
            [
                "7e44bfad7a4682dd"
            ]
        ]
    },
    {
        "id": "7a826cae44a883ce",
        "type": "alpaca-query-order",
        "z": "37c94e6e073225a2",
        "conf": "810ce3520dc18040",
        "x": 640,
        "y": 640,
        "wires": [
            [
                "b8589f3ec52756a1"
            ]
        ]
    },
    {
        "id": "7e44bfad7a4682dd",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nlet buys = 0\nlet sells = 0\nif ( side == 'buy'){\n buys = (filled_qty * filled_avg_price)}\n\nif (side == 'sell') {\n sells = (filled_qty * filled_avg_price)\n}\n\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,buys,sells,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + buys + \"','\" + sells + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source + \"', 'closed', 'live') ON CONFLICT DO NOTHING;\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 640,
        "wires": [
            [
                "601d7b35aa5ea197"
            ]
        ]
    },
    {
        "id": "9999b93a9f61e331",
        "type": "comment",
        "z": "37c94e6e073225a2",
        "name": "Update orders table. This runs every minute download the last 500 orders from Alapca.",
        "info": "",
        "x": 320,
        "y": 580,
        "wires": []
    },
    {
        "id": "c57fc17160114c39",
        "type": "split",
        "z": "37c94e6e073225a2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 680,
        "wires": [
            [
                "e1c483ca62b6370f"
            ]
        ]
    },
    {
        "id": "22878e2809192997",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "get last 500 closed live orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 640,
        "wires": [
            [
                "7a826cae44a883ce"
            ]
        ]
    },
    {
        "id": "87c450119b3d8491",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "get last 500 closed paper orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 680,
        "wires": [
            [
                "dacf334fee4dbd76"
            ]
        ]
    },
    {
        "id": "601d7b35aa5ea197",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1160,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "5b6d6c772c4ffb29",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1160,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "dacf334fee4dbd76",
        "type": "alpaca-query-order",
        "z": "37c94e6e073225a2",
        "conf": "c06cec183f9317f9",
        "x": 640,
        "y": 680,
        "wires": [
            [
                "c57fc17160114c39"
            ]
        ]
    },
    {
        "id": "e1c483ca62b6370f",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nlet buys = 0\nlet sells = 0\nif ( side == 'buy'){\n buys = (filled_qty * filled_avg_price)}\n\nif (side == 'sell') {\n sells = (filled_qty * filled_avg_price)\n}\n\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,buys,sells,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + buys + \"','\" + sells + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source + \"', 'closed', 'paper') ON CONFLICT DO NOTHING;\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 680,
        "wires": [
            [
                "5b6d6c772c4ffb29"
            ]
        ]
    },
    {
        "id": "25da87527d24188b",
        "type": "inject",
        "z": "37c94e6e073225a2",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "533a15510ab87aa4",
                "98d8cf2ce5ffe27a"
            ]
        ]
    },
    {
        "id": "236423fe9c757ed2",
        "type": "inject",
        "z": "37c94e6e073225a2",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "e77e23636fc37fc4",
                "6d9f058349024e50"
            ]
        ]
    },
    {
        "id": "ab021593fa0cf0a3",
        "type": "inject",
        "z": "37c94e6e073225a2",
        "name": "Every min",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "22878e2809192997"
            ]
        ]
    },
    {
        "id": "654e235679e70e69",
        "type": "inject",
        "z": "37c94e6e073225a2",
        "name": "Every min",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 680,
        "wires": [
            [
                "87c450119b3d8491"
            ]
        ]
    },
    {
        "id": "6d9f058349024e50",
        "type": "delay",
        "z": "37c94e6e073225a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 230,
        "y": 420,
        "wires": [
            [
                "73bf92e59e2045c9"
            ]
        ]
    },
    {
        "id": "3405268dd018beae",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "update from tickers_live",
        "func": "msg.query = \"update positions set name = tickers_live.name, portfolioname = tickers_live.portfolioname, id = tickers_live.id FROM tickers_live where positions.symbol = tickers_live.symbol\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 480,
        "wires": [
            [
                "92750281b8978e2d"
            ]
        ]
    },
    {
        "id": "52dba2995d7d74de",
        "type": "delay",
        "z": "37c94e6e073225a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 480,
        "wires": [
            [
                "3405268dd018beae"
            ]
        ]
    },
    {
        "id": "92750281b8978e2d",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "1cb127644aa95297",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "update from tickers_paper ",
        "func": "msg.query = \"update positions set name = tickers_paper.name, portfolioname = tickers_paper.portfolioname, id = tickers_paper.id FROM tickers_paper where positions.symbol = tickers_paper.symbol\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 520,
        "wires": [
            [
                "d7f6d9a7df589f5d"
            ]
        ]
    },
    {
        "id": "d7f6d9a7df589f5d",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "f0ee73fc2ffbd990",
        "type": "delay",
        "z": "37c94e6e073225a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 520,
        "wires": [
            [
                "1cb127644aa95297"
            ]
        ]
    },
    {
        "id": "7dbf554f4dfacb2d",
        "type": "inject",
        "z": "37c94e6e073225a2",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "52dba2995d7d74de"
            ]
        ]
    },
    {
        "id": "65532f01dd281783",
        "type": "inject",
        "z": "37c94e6e073225a2",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "f0ee73fc2ffbd990"
            ]
        ]
    },
    {
        "id": "650b8745b388c3cd",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "update from tickers_live",
        "func": "msg.query = \"update orders set portfolioname = tickers_live.portfolioname FROM tickers_live where orders.symbol = tickers_live.symbol\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 720,
        "wires": [
            [
                "3ad164fb6947342a"
            ]
        ]
    },
    {
        "id": "14bca00abb5ddcaf",
        "type": "delay",
        "z": "37c94e6e073225a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 720,
        "wires": [
            [
                "650b8745b388c3cd"
            ]
        ]
    },
    {
        "id": "3ad164fb6947342a",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 760,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "aee6f7b537887ba6",
        "type": "function",
        "z": "37c94e6e073225a2",
        "name": "update from tickers_paper ",
        "func": "msg.query = \"update orders set portfolioname = tickers_paper.portfolioname FROM tickers_paper where orders.symbol = tickers_paper.symbol\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 760,
        "wires": [
            [
                "1d097f964ba1bec3"
            ]
        ]
    },
    {
        "id": "1d097f964ba1bec3",
        "type": "postgresql",
        "z": "37c94e6e073225a2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 760,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "97a1951d3a00a734",
        "type": "delay",
        "z": "37c94e6e073225a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 760,
        "wires": [
            [
                "aee6f7b537887ba6"
            ]
        ]
    },
    {
        "id": "efbde07ad718883a",
        "type": "inject",
        "z": "37c94e6e073225a2",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 720,
        "wires": [
            [
                "14bca00abb5ddcaf"
            ]
        ]
    },
    {
        "id": "7c87311c7ea12aa9",
        "type": "inject",
        "z": "37c94e6e073225a2",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 760,
        "wires": [
            [
                "97a1951d3a00a734"
            ]
        ]
    },
    {
        "id": "810ce3520dc18040",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PKF9QKA8GYZ6EQKYIZWB",
        "paper": true
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKLC7VFEM4UNMBQ4OTD8",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]