[
    {
        "id": "3b10fa5a18a0e5a7",
        "type": "tab",
        "label": "Simple Interday Trading",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ed336e1210936eb",
        "type": "inject",
        "z": "3b10fa5a18a0e5a7",
        "name": "Set at 9 am",
        "props": [],
        "repeat": "",
        "crontab": "00 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "edda41251af483ba"
            ]
        ]
    },
    {
        "id": "edda41251af483ba",
        "type": "function",
        "z": "3b10fa5a18a0e5a7",
        "name": "set and store ticker variables",
        "func": "let ticker = 'SPY'\nlet qty = '500'\nmsg.topic = ticker // this pass the ticker value to the flow variable\nnode.warn(\" Ticker: \" +ticker)\nmsg.payload = qty\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 200,
        "wires": [
            [
                "cb7e101bd88773fe"
            ]
        ]
    },
    {
        "id": "cb7e101bd88773fe",
        "type": "change",
        "z": "3b10fa5a18a0e5a7",
        "name": "set flow variable: ticker",
        "rules": [
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "qty",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "445424b6209389a0",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Flow #2: Buy and hold 500 shares of SPY at 3:55",
        "info": "",
        "x": 380,
        "y": 320,
        "wires": []
    },
    {
        "id": "adccb10c3d07e36b",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Flow #1: Set ticker and quantity to hold (defaults are SPY and 500 Shares)",
        "info": "",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "7cee955b5957cfb4",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Trades and Holds and Stock overnignt",
        "info": "",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "90d043b512dba0ae",
        "type": "inject",
        "z": "3b10fa5a18a0e5a7",
        "name": "Buy at 3:55 PM and hold",
        "props": [],
        "repeat": "",
        "crontab": "55 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "b15d31d43db96b13"
            ]
        ]
    },
    {
        "id": "b15d31d43db96b13",
        "type": "function",
        "z": "3b10fa5a18a0e5a7",
        "name": "Alpaca market order",
        "func": "let ticker = flow.get(\"ticker\")\nlet qty = flow.get(\"qty\")\nqty = 500\n\nlet temp = ''\n\n// this is a market order \n\ntemp = { \n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": \"buy\",\n    \"type\": \"market\",\n    \"time_in_force\":\"day\"\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "bd8da0173858f1e9",
        "type": "inject",
        "z": "3b10fa5a18a0e5a7",
        "name": "Sell at 9:31 AM ",
        "props": [],
        "repeat": "",
        "crontab": "31 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "f445f792c1568cfb"
            ]
        ]
    },
    {
        "id": "f445f792c1568cfb",
        "type": "function",
        "z": "3b10fa5a18a0e5a7",
        "name": "Alpaca market order",
        "func": "let ticker = flow.get(\"ticker\")\nlet qty = flow.get(\"qty\")\nqty = 500\n\nlet temp = ''\n\n// this is a market order \n\ntemp = { \n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": \"sell\",\n    \"type\": \"market\",\n    \"time_in_force\":\"day\"\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "ec8f09448b7b3113",
        "type": "function",
        "z": "3b10fa5a18a0e5a7",
        "name": "positions function",
        "func": "for (var i=0;i<msg.payload.length;i++) \n{\n\n    let asset_id = msg.payload[i][\"asset_id\"]\n    let symbol = msg.payload[i][\"symbol\"]\n    let exchange = msg.payload[i][\"exchange\"]\n    let asset_class = msg.payload[i][\"asset_class\"]\n    let asset_marginable = msg.payload[i][\"asset_marginable\"]\n    let qty = msg.payload[i][\"qty\"]\n    let avg_entry_price = msg.payload[i][\"avg_entry_price\"]\n    let side = msg.payload[i][\"side\"]\n    let market_value = msg.payload[i][\"market_value\"]\n    let cost_basis = msg.payload[i][\"cost_basis\"]\n    let unrealized_pl = msg.payload[i][\"unrealized_pl\"]\n    let unrealized_plpc = msg.payload[i][\"unrealized_plpc\"]\n    let unrealized_intraday_pl = msg.payload[i][\"unrealized_intraday_pl\"]\n    let unrealized_intraday_plpc = msg.payload[i][\"unrealized_intraday_plpc\"]\n    let current_price = msg.payload[i][\"current_price\"]\n    let lastday_price = msg.payload[i][\"lastday_price\"]\n    let change_today = msg.payload[i][\"change_today\"]\n    let qty_available = msg.payload[i][\"qty_available\"]\n    node.warn(\"Symbol: \" + symbol + \" Side: \" + side + \" Qty: \" + qty + \" Market Value: \" + market_value + \" Gain to date: \" + unrealized_pl + \" Pct Gain: \" +unrealized_plpc)\n\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "e6d3b9b107640bc6",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Flow #3: Display Current Positions & Gains/Losses",
        "info": "",
        "x": 390,
        "y": 480,
        "wires": []
    },
    {
        "id": "5f95640e6df68e72",
        "type": "inject",
        "z": "3b10fa5a18a0e5a7",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "cbd9c832921baaa0",
        "type": "function",
        "z": "3b10fa5a18a0e5a7",
        "name": "get open orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"open\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"100\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "a56b89e506e267e3",
        "type": "function",
        "z": "3b10fa5a18a0e5a7",
        "name": "get closed orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"5\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "3f6370840dc371bd",
        "type": "function",
        "z": "3b10fa5a18a0e5a7",
        "name": "orders function",
        "func": "for (var i=0;i<msg.payload.length;i++) \n{\n\n    let id = msg.payload[i][\"id\"]\n    let client_order_id = msg.payload[i][\"client_order_id\"]\n    let created_at = msg.payload[i][\"created_at\"]\n    let updated_at = msg.payload[i][\"updated_at\"]\n    let submitted_at = msg.payload[i][\"submitted_at\"]\n    let filled_at = msg.payload[i][\"filled_at\"]\n    let expired_at = msg.payload[i][\"expired_at\"]\n    let canceled_at = msg.payload[i][\"canceled_at\"]\n    let failed_at = msg.payload[i][\"failed_at\"]\n    let replaced_at = msg.payload[i][\"replaced_at\"]\n    let replaced_by = msg.payload[i][\"replaced_by\"]\n    let replaces = msg.payload[i][\"replaces\"]\n    let asset_id = msg.payload[i][\"asset_id\"]\n    let symbol = msg.payload[i][\"symbol\"]\n    let asset_class = msg.payload[i][\"asset_class\"]\n    let notional = msg.payload[i][\"notional\"]\n    let qty = msg.payload[i][\"qty\"]\n    let filled_qty = msg.payload[i][\"filled_qty\"]\n    let filled_avg_price = msg.payload[i][\"filled_avg_price\"]\n    let order_class = msg.payload[i][\"order_class\"]\n    let order_type = msg.payload[i][\"order_type\"]\n    let type = msg.payload[i][\"type\"]\n    let side = msg.payload[i][\"side\"]\n    let time_in_force = msg.payload[i][\"time_in_force\"]\n    let limit_price = msg.payload[i][\"limit_price\"]\n    let stop_price = msg.payload[i][\"stop_price\"]\n    let status = msg.payload[i][\"status\"]\n    let extended_hours = msg.payload[i][\"extended_hours\"]\n    let legs = msg.payload[i][\"legs\"]\n    let trail_percent = msg.payload[i][\"trail_percent\"]\n    let trail_price = msg.payload[i][\"trail_price\"]\n    let hwm = msg.payload[i][\"hwm\"]\n    let source = msg.payload[i][\"source\"]\n\n    node.warn(\"Date/Time: \" +created_at+ \" Symbol: \" +symbol+ \" Side: \" +side+ \" Qty: \" +qty+ \" Avg. Filled Price: \" +filled_avg_price) \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "49a3b5af721de51b",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Flow #4: Display Orders",
        "info": "",
        "x": 300,
        "y": 620,
        "wires": []
    },
    {
        "id": "bd4f9b7bed232a1e",
        "type": "inject",
        "z": "3b10fa5a18a0e5a7",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 680,
        "wires": [
            [
                "cbd9c832921baaa0"
            ]
        ]
    },
    {
        "id": "1daf4462dee0a79e",
        "type": "inject",
        "z": "3b10fa5a18a0e5a7",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 720,
        "wires": [
            [
                "a56b89e506e267e3"
            ]
        ]
    },
    {
        "id": "afe082aa35fb754a",
        "type": "function",
        "z": "3b10fa5a18a0e5a7",
        "name": "account function",
        "func": "\nlet asset_id = msg.payload[\"asset_id\"]\nlet id = msg.payload[\"id\"]\nlet account_number = msg.payload[\"account_number\"]\nlet status = msg.payload[\"status\"]\nlet crypto_status = msg.payload[\"crypto_status\"]\nlet currency = msg.payload[\"currency\"]\nlet buying_power = msg.payload[\"buying_power\"]\nlet regt_buying_power = msg.payload[\"regt_buying_power\"]\nlet daytrading_buying_power = msg.payload[\"daytrading_buying_power\"]\nlet non_marginable_buying_power = msg.payload[\"non_marginable_buying_power\"]\nlet cash = msg.payload[\"cash\"]\nlet accrued_fees = msg.payload[\"accrued_fees\"]\nlet pending_transfer_in = msg.payload[\"pending_transfer_in\"]\nlet portfolio_value = msg.payload[\"portfolio_value\"]\nlet pattern_day_trader = msg.payload[\"pattern_day_trader\"]\nlet trading_blocked = msg.payload[\"trading_blocked\"]\nlet transfers_blocked = msg.payload[\"transfers_blocked\"]\nlet account_blocked = msg.payload[\"account_blocked\"]\nlet created_at = msg.payload[\"created_at\"]\nlet trade_suspended_by_user = msg.payload[\"trade_suspended_by_user\"]\nlet multiplier = msg.payload[\"multiplier\"]\nlet shorting_enabled = msg.payload[\"shorting_enabled\"]\nlet equity = msg.payload[\"equity\"]\nlet last_equity = msg.payload[\"last_equity\"]\nlet long_market_value = msg.payload[\"long_market_value\"]\nlet short_market_value = msg.payload[\"short_market_value\"]\nlet initial_margin = msg.payload[\"initial_margin\"]\nlet maintenance_margin = msg.payload[\"maintenance_margin\"]\nlet last_maintenance_margin = msg.payload[\"last_maintenance_margin\"]\nlet sma = msg.payload[\"sma\"]\nlet daytrade_count = msg.payload[\"daytrade_count\"]\n\nnode.warn(\"Account Number: \" +account_number+ \" Balance:\" +equity)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "baa61302369372f8",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Flow #5: Display Current Account Info",
        "info": "",
        "x": 350,
        "y": 780,
        "wires": []
    },
    {
        "id": "6bbdc444030836bd",
        "type": "inject",
        "z": "3b10fa5a18a0e5a7",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "db4834df65cf4936",
        "type": "inject",
        "z": "3b10fa5a18a0e5a7",
        "name": "display table contents",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 340,
        "y": 980,
        "wires": [
            [
                "a7616158b9a11ff3"
            ]
        ]
    },
    {
        "id": "a7616158b9a11ff3",
        "type": "function",
        "z": "3b10fa5a18a0e5a7",
        "name": "select query",
        "func": "let acct = \"daily_balances\"\nlet sql = \"select * from \" +acct;\n//node.warn(sql)\nmsg.topic = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 980,
        "wires": [
            [
                "7a78f06a3ac3b0e6"
            ]
        ]
    },
    {
        "id": "7a78f06a3ac3b0e6",
        "type": "sqlite",
        "z": "3b10fa5a18a0e5a7",
        "mydb": "ebdf8e53c589f083",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "paper_account",
        "x": 720,
        "y": 980,
        "wires": [
            [
                "248a1f98452a63fb"
            ]
        ]
    },
    {
        "id": "693589aa494e59f7",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Flow #6: Display Daily Account Balances over time",
        "info": "",
        "x": 390,
        "y": 920,
        "wires": []
    },
    {
        "id": "248a1f98452a63fb",
        "type": "function",
        "z": "3b10fa5a18a0e5a7",
        "name": "balances function",
        "func": "for (var i=0;i<msg.payload.length;i++) \n{\n\n    let ux = msg.payload[i][\"unixtime\"]\n    let uxms = ux * 1000\n    let bal = msg.payload[i][\"balance\"]\n \n    const dateObject = new Date(uxms)\n    const d = dateObject.toLocaleString() //2019-12-9 10:30:15\n\n    node.warn(\"Unixtime: \" +ux+ \" Date/Time: \" +d+ \" Balance: \" +bal) \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "f996904d9e1f37ff",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Connect Alpaca Order Node",
        "info": "",
        "x": 840,
        "y": 360,
        "wires": []
    },
    {
        "id": "60f42808c02f33b9",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Connect Alpaca Order Node",
        "info": "",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "91f068fab4f16df6",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Connect Inject Node >  Alpaca Positions Query Node > Connect positions function",
        "info": "",
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "ebbef24ea89a2462",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Get orders >  Alpaca Query Node > Connect orders function",
        "info": "",
        "x": 820,
        "y": 700,
        "wires": []
    },
    {
        "id": "94c9d27f6046d7da",
        "type": "comment",
        "z": "3b10fa5a18a0e5a7",
        "name": "Connect Inject Node > Connect Alpaca Account Query Node > Connect account function",
        "info": "",
        "x": 670,
        "y": 860,
        "wires": []
    },
    {
        "id": "ebdf8e53c589f083",
        "type": "sqlitedb",
        "db": "/data/store/paper_account",
        "mode": "RWC"
    }
]