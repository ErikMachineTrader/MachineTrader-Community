[
    {
        "id": "e5c48354330d4a29",
        "type": "tab",
        "label": "Trade BTCUSD",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f9ce279ee54c6e27",
        "type": "comment",
        "z": "e5c48354330d4a29",
        "name": "Daytrade Bitcoin. Stats: Sample: 10000 Spread: 35.5900 Pct Spread: 0.2149% Change: 21 STD Change: 10.14.7600 Pct Change: 0.1314",
        "info": "",
        "x": 500,
        "y": 40,
        "wires": []
    },
    {
        "id": "582f947380767440",
        "type": "inject",
        "z": "e5c48354330d4a29",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "25f2a54b6cc7ca55"
            ]
        ]
    },
    {
        "id": "25f2a54b6cc7ca55",
        "type": "function-npm",
        "z": "e5c48354330d4a29",
        "name": "Get past 1000 trades",
        "func": "//let symbol = 'TQQQ'\n\n// use polygon format for cryptos\nlet symbol = \"X:BTCUSD\"\n\n\n\nlet cnt = 1000 // set count here\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 140,
        "wires": [
            [
                "a20fbe32d55ae5c3"
            ]
        ]
    },
    {
        "id": "a20fbe32d55ae5c3",
        "type": "polygon-last-trade-v3",
        "z": "e5c48354330d4a29",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 140,
        "wires": [
            [
                "8498e8fbeeca06e8"
            ]
        ]
    },
    {
        "id": "8498e8fbeeca06e8",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 140,
        "wires": [
            [
                "f8a670132b304772"
            ]
        ]
    },
    {
        "id": "29f2d108c6e4d9a4",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\n//node.warn(\"Ticker: \" +symbol+ \" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 140,
        "wires": [
            [
                "82aca5fce1ae34f9"
            ]
        ]
    },
    {
        "id": "82aca5fce1ae34f9",
        "type": "function-npm",
        "z": "e5c48354330d4a29",
        "name": "Get last trade",
        "func": "let symbol = msg.symbol\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "d7d068f50f599ab2"
            ]
        ]
    },
    {
        "id": "d7d068f50f599ab2",
        "type": "polygon-last-trade-v3",
        "z": "e5c48354330d4a29",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 540,
        "y": 200,
        "wires": [
            [
                "6977a2a8061da5d3"
            ]
        ]
    },
    {
        "id": "6977a2a8061da5d3",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "display diff",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price; // this is the price of the last trade\n\n}\n\n\nlet avg = msg.moving_avg\nlet ticker = msg.symbol\n\nlet diff = price - avg\ndiff = diff.toFixed(2)\n\n//node.warn(\"Ticker: \" + ticker + \" Current Price: \" + price + \" Avg Price: \" + avg + \" Diff: \" + diff)\nmsg.diff = diff\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 200,
        "wires": [
            [
                "a5f4872508dba70d"
            ]
        ]
    },
    {
        "id": "a5f4872508dba70d",
        "type": "change",
        "z": "e5c48354330d4a29",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "diff",
                "pt": "flow",
                "to": "diff",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "f8a670132b304772",
        "type": "calculator",
        "z": "e5c48354330d4a29",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 1000,
        "y": 140,
        "wires": [
            [
                "29f2d108c6e4d9a4"
            ]
        ]
    },
    {
        "id": "78f2c9f69206f298",
        "type": "comment",
        "z": "e5c48354330d4a29",
        "name": "This flow calculates the difference between the current price and the moving average price. Modify line 1(4) to change the ticker. Line 8 to change the size of the data set.",
        "info": "",
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "203de6591d6234b9",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 340,
        "y": 1140,
        "wires": [
            [
                "ee29b0b5341b4ab9"
            ]
        ]
    },
    {
        "id": "ee29b0b5341b4ab9",
        "type": "debug",
        "z": "e5c48354330d4a29",
        "name": "debug 273",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1140,
        "wires": []
    },
    {
        "id": "beee9f2ab9434c35",
        "type": "http in",
        "z": "e5c48354330d4a29",
        "name": "/api/download_log_btcusd",
        "url": "/api/download_log_btcusd",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1240,
        "wires": [
            [
                "51368110598d82fc"
            ]
        ]
    },
    {
        "id": "64388032660a5195",
        "type": "http response",
        "z": "e5c48354330d4a29",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 990,
        "y": 1240,
        "wires": []
    },
    {
        "id": "4737c9c118c282e3",
        "type": "csv",
        "z": "e5c48354330d4a29",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 1240,
        "wires": [
            [
                "dc32ed4c70b48bae"
            ]
        ]
    },
    {
        "id": "51368110598d82fc",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "export query",
        "func": "msg.query= \"select * from log_btcusd\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1240,
        "wires": [
            [
                "1d15b0f28caf33b4"
            ]
        ]
    },
    {
        "id": "dc32ed4c70b48bae",
        "type": "file",
        "z": "e5c48354330d4a29",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 1240,
        "wires": [
            [
                "64388032660a5195"
            ]
        ]
    },
    {
        "id": "1d15b0f28caf33b4",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 1240,
        "wires": [
            [
                "4737c9c118c282e3"
            ]
        ]
    },
    {
        "id": "626c273271713f60",
        "type": "comment",
        "z": "e5c48354330d4a29",
        "name": "Create a log file that show all signals and trades",
        "info": "",
        "x": 280,
        "y": 1100,
        "wires": []
    },
    {
        "id": "4f474419f2b21a58",
        "type": "comment",
        "z": "e5c48354330d4a29",
        "name": "To download file, enter [domain]/api/download_action in browser.",
        "info": "",
        "x": 330,
        "y": 1200,
        "wires": []
    },
    {
        "id": "51c0b04b8e79d797",
        "type": "inject",
        "z": "e5c48354330d4a29",
        "name": "",
        "props": [
            {
                "p": "query1",
                "v": "select * from log_btcusd",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "create table log_btcusd (id VARCHAR(5000), id2 VARCHAR(5000))",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1140,
        "wires": [
            [
                "203de6591d6234b9"
            ]
        ]
    },
    {
        "id": "f4e9c2fc5014be36",
        "type": "comment",
        "z": "e5c48354330d4a29",
        "name": "Flow 3: Place buy orders",
        "info": "",
        "x": 150,
        "y": 640,
        "wires": []
    },
    {
        "id": "c9f948832e81fb16",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"tickers\")\n//node.warn(\"Ticker: \" +ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 780,
        "wires": [
            [
                "8b1678629450b28a"
            ]
        ]
    },
    {
        "id": "8b1678629450b28a",
        "type": "split",
        "z": "e5c48354330d4a29",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 780,
        "wires": [
            [
                "af0a936855372f89"
            ]
        ]
    },
    {
        "id": "e60f07b76f644d02",
        "type": "inject",
        "z": "e5c48354330d4a29",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "c9f948832e81fb16"
            ]
        ]
    },
    {
        "id": "af0a936855372f89",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "split tickers",
        "func": "let ticker = msg.payload\n//node.warn(ticker) \nmsg.ticker = ticker\n//msg.pos = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 780,
        "wires": [
            [
                "5294b08f3560dc8a"
            ]
        ]
    },
    {
        "id": "43718bdb4895cda8",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.ticker\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet number = flow.get(\"number\")\nlet size = flow.get(\"psize\")\nlet diff = flow.get(\"diff\")\n\n\nlet qty = ((size / number) / price)\n\nqty = +qty\n\nlet id1 = (\"Ticker: \" +ticker+ \" Diff: \" +diff+ \" Price: \" + price + \" Qty: \" + qty + \"  Algo Name: \" + algo_name)\n//node.warn(id1)\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\nlet action = ''\n\n\nlet temp = ''\n\nlet order_type = 'market' // select limit for limit orders\n\n//qty = qty.toFixed(0) // round to whole numbers for limit trades\n\nif ( diff < -10){\n\ntemp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"buy\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            //\"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n\n}\n\nmsg.payload = temp\n//node.warn(msg.payload)\nlet id2 = temp\nmsg.query = \"insert into log_btcusd (id, id2) values ('\" +id1+ \"','\" +id2+ \"');\" \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 980,
        "wires": [
            [
                "6b0ade38fcbdd97e",
                "10425f55ec0579e9"
            ]
        ]
    },
    {
        "id": "8dd2056e1801d7ec",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 840,
        "wires": [
            [
                "b40fc8103444bd62"
            ]
        ]
    },
    {
        "id": "9c62119d90684201",
        "type": "polygon-last-trade-v3",
        "z": "e5c48354330d4a29",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 540,
        "y": 840,
        "wires": [
            [
                "8dd2056e1801d7ec"
            ]
        ]
    },
    {
        "id": "5294b08f3560dc8a",
        "type": "function-npm",
        "z": "e5c48354330d4a29",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.ticker\n\nsymbol = \"X:\" +symbol\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 840,
        "wires": [
            [
                "9c62119d90684201"
            ]
        ]
    },
    {
        "id": "6b0ade38fcbdd97e",
        "type": "alpaca-order",
        "z": "e5c48354330d4a29",
        "conf": "e535f42f1df1b25f",
        "x": 490,
        "y": 980,
        "wires": [
            [
                "461acfc4f1c43dfa"
            ]
        ]
    },
    {
        "id": "04542ec675e34b7f",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "461acfc4f1c43dfa",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 980,
        "wires": [
            [
                "04542ec675e34b7f"
            ]
        ]
    },
    {
        "id": "ac9a85efd3f85bd4",
        "type": "comment",
        "z": "e5c48354330d4a29",
        "name": "flow.get tickers",
        "info": "",
        "x": 420,
        "y": 740,
        "wires": []
    },
    {
        "id": "b40fc8103444bd62",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "check portfolio",
        "func": "let symbol = msg.ticker\nlet sql = \"select count(*) from portfolio where symbol = '\" +symbol+ \"';\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 900,
        "wires": [
            [
                "c6c768e7d927e2e6"
            ]
        ]
    },
    {
        "id": "c6c768e7d927e2e6",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 440,
        "y": 900,
        "wires": [
            [
                "97d38e7f0a6429ee"
            ]
        ]
    },
    {
        "id": "cca6180539088d37",
        "type": "delay",
        "z": "e5c48354330d4a29",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 780,
        "wires": [
            [
                "c9f948832e81fb16"
            ]
        ]
    },
    {
        "id": "df9ab9bcd82db3ec",
        "type": "comment",
        "z": "e5c48354330d4a29",
        "name": "Flow 4: Place sell orders",
        "info": "",
        "x": 170,
        "y": 1420,
        "wires": []
    },
    {
        "id": "9fdded58d688a44b",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//ticker = 'AAPL'\nnode.warn(\"Ticker: \" + ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1500,
        "wires": [
            [
                "44793b7726b03e65"
            ]
        ]
    },
    {
        "id": "44793b7726b03e65",
        "type": "split",
        "z": "e5c48354330d4a29",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 1500,
        "wires": [
            [
                "329b743165e65dbe"
            ]
        ]
    },
    {
        "id": "b47357c7badbc986",
        "type": "switch",
        "z": "e5c48354330d4a29",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 1560,
        "wires": [
            [
                "a052eadb33cd6cab"
            ],
            []
        ]
    },
    {
        "id": "18325176105b4620",
        "type": "split",
        "z": "e5c48354330d4a29",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 1560,
        "wires": [
            [
                "b47357c7badbc986"
            ]
        ]
    },
    {
        "id": "329b743165e65dbe",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "split tickers",
        "func": "let ticker = msg.payload\n//node.warn(ticker) \nmsg.ticker = ticker\n//msg.pos = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1500,
        "wires": [
            [
                "44ab7f01853b43aa"
            ]
        ]
    },
    {
        "id": "8806264202f871e2",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.ticker\nlet qty = msg.qty\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet side = msg.side\nlet profit = msg.profit\n\nlet id1 = (\"Ticker\" +ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Side: \" +side+ \" Profit: \" +profit)\nnode.warn(id1)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n\n\nlet order_type = 'market' // select limit for limit orders\n\nlet temp = ''\n\nif ( profit > 100){\n\n    if ( (qty > 0 && order_type == 'market')){\n\n    temp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"sell\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            //\"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n    }\n\n    if ((qty > 0 && order_type == 'limit')) {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n    }\n\n}\n\n\nmsg.payload = temp\n//node.warn(msg.payload)\nlet id2 = temp\nmsg.query = \"insert into log_btcusd (id, id2) values ('\" + id1 + \"','\" + id2 + \"');\" \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1620,
        "wires": [
            [
                "0c1f3bcfc9c306e1",
                "b257de84e99110a9"
            ]
        ]
    },
    {
        "id": "a052eadb33cd6cab",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\nnode.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1560,
        "wires": [
            [
                "8806264202f871e2"
            ]
        ]
    },
    {
        "id": "44ab7f01853b43aa",
        "type": "alpaca-position-query",
        "z": "e5c48354330d4a29",
        "conf": "e535f42f1df1b25f",
        "x": 370,
        "y": 1560,
        "wires": [
            [
                "18325176105b4620"
            ]
        ]
    },
    {
        "id": "b257de84e99110a9",
        "type": "alpaca-order",
        "z": "e5c48354330d4a29",
        "conf": "e535f42f1df1b25f",
        "x": 530,
        "y": 1620,
        "wires": [
            [
                "4a0111aea9dbe23b"
            ]
        ]
    },
    {
        "id": "644db3556e3e065f",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "4a0111aea9dbe23b",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1620,
        "wires": [
            [
                "644db3556e3e065f"
            ]
        ]
    },
    {
        "id": "7f703418b615ddc3",
        "type": "comment",
        "z": "e5c48354330d4a29",
        "name": "flow.get tickers",
        "info": "",
        "x": 440,
        "y": 1460,
        "wires": []
    },
    {
        "id": "0c1f3bcfc9c306e1",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 440,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "f357df38de62c018",
        "type": "inject",
        "z": "e5c48354330d4a29",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1500,
        "wires": [
            [
                "64bdd3f76ec6acb4"
            ]
        ]
    },
    {
        "id": "64bdd3f76ec6acb4",
        "type": "delay",
        "z": "e5c48354330d4a29",
        "name": "",
        "pauseType": "delay",
        "timeout": "55",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 1500,
        "wires": [
            [
                "9fdded58d688a44b"
            ]
        ]
    },
    {
        "id": "ba3c8ae95673ebd1",
        "type": "inject",
        "z": "e5c48354330d4a29",
        "name": "",
        "props": [
            {
                "p": "query",
                "v": "select * from positions where symbol = 'TQQQ'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 410,
        "y": 1380,
        "wires": [
            [
                "7b97d99ef2ee3922"
            ]
        ]
    },
    {
        "id": "eb311c6c5960a119",
        "type": "debug",
        "z": "e5c48354330d4a29",
        "name": "debug 281",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1380,
        "wires": []
    },
    {
        "id": "7b97d99ef2ee3922",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 1380,
        "wires": [
            [
                "eb311c6c5960a119"
            ]
        ]
    },
    {
        "id": "97d38e7f0a6429ee",
        "type": "switch",
        "z": "e5c48354330d4a29",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 900,
        "wires": [
            [
                "43718bdb4895cda8"
            ],
            []
        ]
    },
    {
        "id": "9f77f6aa8d6bb586",
        "type": "comment",
        "z": "e5c48354330d4a29",
        "name": "Flow 1: Define Strategy and Set Trading Values",
        "info": "",
        "x": 220,
        "y": 260,
        "wires": []
    },
    {
        "id": "9495a33d51c26bfa",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = 'pta15'\nlet asset_class = 'crypto' // stocks or crypto\nlet number = 20 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet algo_type = \"interday\"\nlet strategy_type = \"long\"\nlet status = 'running'\nlet benchmark = 'SPY'\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,algo_name,algo_type,strategy_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + algo_name + \"','\" + algo_type + \"','\" + strategy_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"');\"\nmsg.query = sql\nnode.warn(msg.query)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 560,
        "wires": [
            [
                "f2ead7b9ff7e71a1",
                "8ada6631eb72eb79"
            ]
        ]
    },
    {
        "id": "7bf92818ca5fd60f",
        "type": "inject",
        "z": "e5c48354330d4a29",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "9495a33d51c26bfa"
            ]
        ]
    },
    {
        "id": "f2ead7b9ff7e71a1",
        "type": "change",
        "z": "e5c48354330d4a29",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "ea56ca9c4e418bfd",
        "type": "comment",
        "z": "e5c48354330d4a29",
        "name": "Flow 2: Create new entry in algos table (FIRSTTIME ONLY)",
        "info": "",
        "x": 250,
        "y": 500,
        "wires": []
    },
    {
        "id": "074066e85b40853c",
        "type": "inject",
        "z": "e5c48354330d4a29",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "87902fde75efac27",
                "add640437c6b8ae0"
            ]
        ]
    },
    {
        "id": "87902fde75efac27",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "insert into tickers",
        "func": "let id = flow.get(\"id\")\nlet portfolioname = flow.get(\"algo_name\")\nlet symbol = flow.get(\"tickers\")\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"insert into tickers (id, symbol, portfolioname) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"');\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 380,
        "wires": [
            [
                "03dd47b3e672eccb"
            ]
        ]
    },
    {
        "id": "03dd47b3e672eccb",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "a7c41513998a068d",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "update tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers.symbol\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 420,
        "wires": [
            [
                "e3d591856176127c"
            ]
        ]
    },
    {
        "id": "add640437c6b8ae0",
        "type": "delay",
        "z": "e5c48354330d4a29",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 420,
        "wires": [
            [
                "a7c41513998a068d"
            ]
        ]
    },
    {
        "id": "e3d591856176127c",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "8ada6631eb72eb79",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "10425f55ec0579e9",
        "type": "postgresql",
        "z": "e5c48354330d4a29",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 340,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "e5eaa4474749b717",
        "type": "inject",
        "z": "e5c48354330d4a29",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "94eb8183291415ba"
            ]
        ]
    },
    {
        "id": "94eb8183291415ba",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "set id,tickers, portfolioname",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nmsg.id = d\nmsg.tickers = 'BTCUSD'\nmsg.algo_name = 'Trade BTCUSD Mean Reversion'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "5ba87da68b68c1e6"
            ]
        ]
    },
    {
        "id": "5ba87da68b68c1e6",
        "type": "change",
        "z": "e5c48354330d4a29",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 300,
        "wires": [
            [
                "f896cdfa5902edcd"
            ]
        ]
    },
    {
        "id": "f896cdfa5902edcd",
        "type": "function",
        "z": "e5c48354330d4a29",
        "name": "Display flow vars",
        "func": "let id = flow.get(\"id\")\nlet name = flow.get(\"algo_name\")\nnode.warn(\"ID: \" +id+ \" Name: \" +name)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    }
]