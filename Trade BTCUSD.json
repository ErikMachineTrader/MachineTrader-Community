[
    {
        "id": "6f540ebd5ce1be5c",
        "type": "tab",
        "label": "Trade BTCUSD",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a4f3567a5e88ac8f",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "Daytrade Bitcoin. Stats: Sample: 10000 Spread: 35.5900 Pct Spread: 0.2149% Change: 21 STD Change: 10.14.7600 Pct Change: 0.1314",
        "info": "",
        "x": 500,
        "y": 40,
        "wires": []
    },
    {
        "id": "ab3aee6692b04a10",
        "type": "inject",
        "z": "6f540ebd5ce1be5c",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "29b6b81827b4d105"
            ]
        ]
    },
    {
        "id": "29b6b81827b4d105",
        "type": "function-npm",
        "z": "6f540ebd5ce1be5c",
        "name": "Get past 1000 trades",
        "func": "//let symbol = 'TQQQ'\n\n// use polygon format for cryptos\nlet symbol = \"X:BTCUSD\"\n\n\n\nlet cnt = 1000 // set count here\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 140,
        "wires": [
            [
                "491c844ffb82a33e"
            ]
        ]
    },
    {
        "id": "491c844ffb82a33e",
        "type": "polygon-last-trade-v3",
        "z": "6f540ebd5ce1be5c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 140,
        "wires": [
            [
                "e352e046d15b4057"
            ]
        ]
    },
    {
        "id": "e352e046d15b4057",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 140,
        "wires": [
            [
                "3d89572e807b1f5e"
            ]
        ]
    },
    {
        "id": "67f8daf4e388ddae",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\n//node.warn(\"Ticker: \" +symbol+ \" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 140,
        "wires": [
            [
                "4af6eec588897b58"
            ]
        ]
    },
    {
        "id": "4af6eec588897b58",
        "type": "function-npm",
        "z": "6f540ebd5ce1be5c",
        "name": "Get last trade",
        "func": "let symbol = msg.symbol\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "adce8c1498508ec1"
            ]
        ]
    },
    {
        "id": "adce8c1498508ec1",
        "type": "polygon-last-trade-v3",
        "z": "6f540ebd5ce1be5c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 540,
        "y": 200,
        "wires": [
            [
                "6968885f3348cd8b"
            ]
        ]
    },
    {
        "id": "6968885f3348cd8b",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "display diff",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price; // this is the price of the last trade\n\n}\n\n\nlet avg = msg.moving_avg\nlet ticker = msg.symbol\n\nlet diff = price - avg\ndiff = diff.toFixed(2)\n\n//node.warn(\"Ticker: \" + ticker + \" Current Price: \" + price + \" Avg Price: \" + avg + \" Diff: \" + diff)\nmsg.diff = diff\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 200,
        "wires": [
            [
                "fc40ad4d6b652c52"
            ]
        ]
    },
    {
        "id": "fc40ad4d6b652c52",
        "type": "change",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "diff",
                "pt": "flow",
                "to": "diff",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3d89572e807b1f5e",
        "type": "calculator",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 1000,
        "y": 140,
        "wires": [
            [
                "67f8daf4e388ddae"
            ]
        ]
    },
    {
        "id": "e092073a1d51315a",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "This flow calculates the difference between the current price and the moving average price. Modify line 1(4) to change the ticker. Line 8 to change the size of the data set.",
        "info": "",
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "5d0462528ad29f39",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "Flow 1: Define Strategy and Set Trading Values",
        "info": "",
        "x": 240,
        "y": 260,
        "wires": []
    },
    {
        "id": "c296d1c8d18df089",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "define values required for adding trade to portfolio",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet login = 'pta17'\nlet ticker = 'BTCUSD'\nlet algo_name = \"Day Trade Bitcoin\"\nlet asset_class = 'crypto' // stocks or crypto\nlet number = 1 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'intraday'\nlet benchmark = 'SPY'\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 320,
        "wires": [
            [
                "4758849964a5ec64"
            ]
        ]
    },
    {
        "id": "1589eebadba62f4a",
        "type": "inject",
        "z": "6f540ebd5ce1be5c",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "c296d1c8d18df089"
            ]
        ]
    },
    {
        "id": "4758849964a5ec64",
        "type": "change",
        "z": "6f540ebd5ce1be5c",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "06736a3c5d96053c",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "get tickers",
        "func": "let tickers = flow.get(\"ticker\")\nnode.warn(tickers)\nmsg.ticker = tickers\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 400,
        "wires": [
            [
                "198764223252e3d8"
            ]
        ]
    },
    {
        "id": "198764223252e3d8",
        "type": "change",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 400,
        "wires": [
            [
                "b8f3fb1e303063e0",
                "5dcdbf7b0572a050",
                "0388355ca7147746"
            ]
        ]
    },
    {
        "id": "a7b9ce8434b612a3",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "Flow 2: Create new entry in algos table (FIRSTTIME ONLY)",
        "info": "",
        "x": 270,
        "y": 560,
        "wires": []
    },
    {
        "id": "a5c7b6d05820defa",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "add values to algos table",
        "func": "let login = flow.get(\"login\")\nlet id = flow.get(\"id\")\nlet algo_name = flow.get(\"algo_name\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet portfolio_size = flow.get(\"psize\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_start = global.get(\"spy_current\")\n\nmsg.query = \"insert into algos (login,id,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values ('\" + login + \"','\" +id+ \"','\" +algo_name+ \"','\" +algo_type+ \"','\" +status+ \"','\" +portfolio_size+ \"','\" +benchmark+ \"','\" +benchmark_start+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 620,
        "wires": [
            [
                "b388ddae5e7bdb16"
            ]
        ]
    },
    {
        "id": "89d565c4f92b5818",
        "type": "inject",
        "z": "6f540ebd5ce1be5c",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "a5c7b6d05820defa"
            ]
        ]
    },
    {
        "id": "ae616a8a5177e994",
        "type": "inject",
        "z": "6f540ebd5ce1be5c",
        "name": "Display Algos",
        "props": [
            {
                "p": "query1",
                "v": "select * from algos",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "delete from algos where id = 1671644577762",
                "vt": "str"
            },
            {
                "p": "query2",
                "v": "update algos set login = 'pta19'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update algos set gain_today = -158.7135149876422767159823658, gain_alltime = -158.71351498764227674, pctgain_today = 0, pctgain_alltime = 0 where algo_name = 'Buy and Sell BTCUSD on Profit Target';",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "select * from order_confirms",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update order_confirms set subtag = 'Buy/Short SPY on News' where symbol = 'SPY'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update order_confirms set subtag = 'Trade BTCUSD'  where symbol = 'BTC/USD'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 620,
        "wires": [
            [
                "02db4b3c0bfeeeb4"
            ]
        ]
    },
    {
        "id": "02db4b3c0bfeeeb4",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 620,
        "wires": [
            [
                "fa02f437b7355c1d"
            ]
        ]
    },
    {
        "id": "fa02f437b7355c1d",
        "type": "debug",
        "z": "6f540ebd5ce1be5c",
        "name": "debug 272",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 620,
        "wires": []
    },
    {
        "id": "b8f3fb1e303063e0",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "get tickers ",
        "func": "let ticker = msg.ticker\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 400,
        "wires": [
            [
                "4f688e4d67ade5fc"
            ]
        ]
    },
    {
        "id": "4f688e4d67ade5fc",
        "type": "split",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 400,
        "wires": [
            [
                "74219adc3a329e7f"
            ]
        ]
    },
    {
        "id": "74219adc3a329e7f",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "insert into tickers",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers (id, symbol, portfolioname) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"');\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 400,
        "wires": [
            [
                "d2b07bbe80e275c9"
            ]
        ]
    },
    {
        "id": "d2b07bbe80e275c9",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1160,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "49cb54f1f703504e",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers.symbol\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 440,
        "wires": [
            [
                "bba9585e6d08bb75"
            ]
        ]
    },
    {
        "id": "5dcdbf7b0572a050",
        "type": "delay",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 440,
        "wires": [
            [
                "49cb54f1f703504e"
            ]
        ]
    },
    {
        "id": "bba9585e6d08bb75",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1160,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "7d4a008743416e0c",
        "type": "inject",
        "z": "6f540ebd5ce1be5c",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "06736a3c5d96053c"
            ]
        ]
    },
    {
        "id": "b388ddae5e7bdb16",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "7d51f8f2145ac15a",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "update tickers",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\n//symbol = symbol.replace(\" \",\"\")\nmsg.query = \"update tickers set id = \" +id+ \", portfolioname = '\" +portfolioname+ \"' where symbol = '\" +symbol+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 480,
        "wires": [
            [
                "ec229a1d87fca422"
            ]
        ]
    },
    {
        "id": "6891a3d0343bb25b",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "get tickers ",
        "func": "let ticker = msg.ticker\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 480,
        "wires": [
            [
                "4664227bdf1d85c4"
            ]
        ]
    },
    {
        "id": "4664227bdf1d85c4",
        "type": "split",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 480,
        "wires": [
            [
                "7d51f8f2145ac15a"
            ]
        ]
    },
    {
        "id": "ec229a1d87fca422",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "0388355ca7147746",
        "type": "delay",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 480,
        "wires": [
            [
                "6891a3d0343bb25b"
            ]
        ]
    },
    {
        "id": "c07e5802544cd459",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 340,
        "y": 1140,
        "wires": [
            [
                "7d2760fb52148489"
            ]
        ]
    },
    {
        "id": "7d2760fb52148489",
        "type": "debug",
        "z": "6f540ebd5ce1be5c",
        "name": "debug 273",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1140,
        "wires": []
    },
    {
        "id": "014887c88eef170d",
        "type": "http in",
        "z": "6f540ebd5ce1be5c",
        "name": "/api/download_log_btcusd",
        "url": "/api/download_log_btcusd",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1240,
        "wires": [
            [
                "2f43c0be174f50b3"
            ]
        ]
    },
    {
        "id": "f8cd965ca545ab82",
        "type": "http response",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 990,
        "y": 1240,
        "wires": []
    },
    {
        "id": "fa73e48cf373b9d7",
        "type": "csv",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 1240,
        "wires": [
            [
                "0997805eda76dd46"
            ]
        ]
    },
    {
        "id": "2f43c0be174f50b3",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "export query",
        "func": "msg.query= \"select * from log_btcusd\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1240,
        "wires": [
            [
                "6ec0c8ede22b79e2"
            ]
        ]
    },
    {
        "id": "0997805eda76dd46",
        "type": "file",
        "z": "6f540ebd5ce1be5c",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 1240,
        "wires": [
            [
                "f8cd965ca545ab82"
            ]
        ]
    },
    {
        "id": "6ec0c8ede22b79e2",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 1240,
        "wires": [
            [
                "fa73e48cf373b9d7"
            ]
        ]
    },
    {
        "id": "494487db61b0abe7",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "Create a log file that show all signals and trades",
        "info": "",
        "x": 280,
        "y": 1100,
        "wires": []
    },
    {
        "id": "5054d23767d42d77",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "To download file, enter [domain]/api/download_action in browser.",
        "info": "",
        "x": 330,
        "y": 1200,
        "wires": []
    },
    {
        "id": "bfb759b8170dfd2b",
        "type": "inject",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "props": [
            {
                "p": "query",
                "v": "select * from log_btcusd",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "create table log_btcusd (id VARCHAR(5000), id2 VARCHAR(5000))",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1140,
        "wires": [
            [
                "c07e5802544cd459"
            ]
        ]
    },
    {
        "id": "afe2d4c0abafb82e",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "Flow 3: Place buy orders",
        "info": "",
        "x": 130,
        "y": 720,
        "wires": []
    },
    {
        "id": "1129d84309785f38",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//node.warn(\"Ticker: \" +ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 780,
        "wires": [
            [
                "12318dacdbac2b2d"
            ]
        ]
    },
    {
        "id": "12318dacdbac2b2d",
        "type": "split",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 780,
        "wires": [
            [
                "9e125325655150ca"
            ]
        ]
    },
    {
        "id": "cf4fbf482d9aabfc",
        "type": "inject",
        "z": "6f540ebd5ce1be5c",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 780,
        "wires": [
            [
                "9e05ff7994957149"
            ]
        ]
    },
    {
        "id": "9e125325655150ca",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "split tickers",
        "func": "let ticker = msg.payload\n//node.warn(ticker) \nmsg.ticker = ticker\n//msg.pos = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 780,
        "wires": [
            [
                "c0c954e6b6162073"
            ]
        ]
    },
    {
        "id": "179b679920e9eb2a",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.ticker\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet number = flow.get(\"number\")\nlet size = flow.get(\"psize\")\nlet diff = flow.get(\"diff\")\n\n\nlet qty = ((size / number) / price)\n\nqty = +qty\n\nlet id1 = (\"Ticker: \" +ticker+ \" Diff: \" +diff+ \" Price: \" + price + \" Qty: \" + qty + \"  Algo Name: \" + algo_name)\n//node.warn(id1)\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\nlet action = ''\n\n\nlet temp = ''\n\nlet order_type = 'market' // select limit for limit orders\n\n//qty = qty.toFixed(0) // round to whole numbers for limit trades\n\nif ( diff < -10){\n\ntemp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"buy\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            //\"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\nlet id2 = temp\nmsg.query = \"insert into log_btcusd (id, id2) values ('\" +id1+ \"','\" +id2+ \"');\" \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 960,
        "wires": [
            [
                "c2ff8df11119258c",
                "7852fbbb568934ab"
            ]
        ]
    },
    {
        "id": "304d4488490a89ff",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 840,
        "wires": [
            [
                "5c30b614e3573997"
            ]
        ]
    },
    {
        "id": "75ba9cbe8b2ad502",
        "type": "polygon-last-trade-v3",
        "z": "6f540ebd5ce1be5c",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 540,
        "y": 840,
        "wires": [
            [
                "304d4488490a89ff"
            ]
        ]
    },
    {
        "id": "c0c954e6b6162073",
        "type": "function-npm",
        "z": "6f540ebd5ce1be5c",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.ticker\n\nsymbol = \"X:\" +symbol\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 840,
        "wires": [
            [
                "75ba9cbe8b2ad502"
            ]
        ]
    },
    {
        "id": "c2ff8df11119258c",
        "type": "alpaca-order",
        "z": "6f540ebd5ce1be5c",
        "conf": "e535f42f1df1b25f",
        "x": 490,
        "y": 960,
        "wires": [
            [
                "b43a74c398870b70"
            ]
        ]
    },
    {
        "id": "c5b4120b90a4db90",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "b43a74c398870b70",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 960,
        "wires": [
            [
                "c5b4120b90a4db90"
            ]
        ]
    },
    {
        "id": "8812f40f2d758d4c",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "flow.get tickers",
        "info": "",
        "x": 420,
        "y": 740,
        "wires": []
    },
    {
        "id": "5c30b614e3573997",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "check portfolio",
        "func": "let symbol = msg.ticker\nlet sql = \"select count(*) from portfolio where symbol = '\" +symbol+ \"';\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 900,
        "wires": [
            [
                "6d2f01b0155c2d5a"
            ]
        ]
    },
    {
        "id": "6d2f01b0155c2d5a",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 440,
        "y": 900,
        "wires": [
            [
                "f4080b7ad7a6df9f"
            ]
        ]
    },
    {
        "id": "f4080b7ad7a6df9f",
        "type": "switch",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 900,
        "wires": [
            [
                "179b679920e9eb2a"
            ],
            []
        ]
    },
    {
        "id": "9e05ff7994957149",
        "type": "delay",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 780,
        "wires": [
            [
                "1129d84309785f38"
            ]
        ]
    },
    {
        "id": "7852fbbb568934ab",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "1ecfe4ca8049da31",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "Flow 4: Place sell orders",
        "info": "",
        "x": 170,
        "y": 1380,
        "wires": []
    },
    {
        "id": "68198152ed48b69b",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//ticker = 'AAPL'\nnode.warn(\"Ticker: \" + ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1460,
        "wires": [
            [
                "85221654f4dc4bc0"
            ]
        ]
    },
    {
        "id": "85221654f4dc4bc0",
        "type": "split",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 1460,
        "wires": [
            [
                "3f954a9d1212b784"
            ]
        ]
    },
    {
        "id": "8510e5eebb3d3491",
        "type": "inject",
        "z": "6f540ebd5ce1be5c",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1460,
        "wires": [
            [
                "68198152ed48b69b"
            ]
        ]
    },
    {
        "id": "265b40feecc6a694",
        "type": "switch",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1520,
        "wires": [
            [
                "d9dcb2cc37242429"
            ],
            []
        ]
    },
    {
        "id": "f18a841a0d3ef91b",
        "type": "split",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 1520,
        "wires": [
            [
                "265b40feecc6a694"
            ]
        ]
    },
    {
        "id": "3f954a9d1212b784",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "split tickers",
        "func": "let ticker = msg.payload\n//node.warn(ticker) \nmsg.ticker = ticker\n//msg.pos = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1460,
        "wires": [
            [
                "5941ef6a34593c3e"
            ]
        ]
    },
    {
        "id": "f4b6d2e0c3786ebc",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "create Alpaca buy order ",
        "func": "let pos = flow.get(\"pos\")\nlet ticker = msg.ticker\nlet qty = msg.qty\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet side = msg.side\nlet profit = msg.profit\n\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\n//let cprice = flow.get(\"cprice\")\n\nlet cprice = msg.cprice\ncprice = +cprice\n\n\n\nlet pqty = ((psize / number) / cprice)\n\nqty = +qty\n//qty = qty.toFixed(0) // round to whole numbers for limit trades\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\nlet action = ''\n\n\nlet temp = ''\n\nlet order_type = 'limit' // select limit for limit orders\n\nif ( profit > 50){\n\n    if ( (qty > 0 && order_type == 'market')){\n\n    temp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"sell\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            //\"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n    }\n\n    if ((qty > 0 && order_type == 'limit')) {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n    }\n\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "d9dcb2cc37242429",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\nnode.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1520,
        "wires": [
            [
                "f4b6d2e0c3786ebc"
            ]
        ]
    },
    {
        "id": "5941ef6a34593c3e",
        "type": "alpaca-position-query",
        "z": "6f540ebd5ce1be5c",
        "conf": "e535f42f1df1b25f",
        "x": 330,
        "y": 1520,
        "wires": [
            [
                "f18a841a0d3ef91b"
            ]
        ]
    },
    {
        "id": "5c8bd10e3c7e29e8",
        "type": "alpaca-order",
        "z": "6f540ebd5ce1be5c",
        "conf": "e535f42f1df1b25f",
        "x": 490,
        "y": 1580,
        "wires": [
            [
                "25dfb65f0edeaef9"
            ]
        ]
    },
    {
        "id": "9907efe325fd989a",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "25dfb65f0edeaef9",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1580,
        "wires": [
            [
                "9907efe325fd989a"
            ]
        ]
    },
    {
        "id": "7a9784b568499377",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "flow.get tickers",
        "info": "",
        "x": 400,
        "y": 1420,
        "wires": []
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    }
]