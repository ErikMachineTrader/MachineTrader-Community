[
    {
        "id": "80f151b50b48fc04",
        "type": "tab",
        "label": "Trade QQQ Intraday Paper",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "610d960e840bf09f",
        "type": "comment",
        "z": "80f151b50b48fc04",
        "name": "Flow 1: Define Strategy and Set Trading Values (ONCE). Set profit target in define values (line 10).",
        "info": "",
        "x": 370,
        "y": 260,
        "wires": []
    },
    {
        "id": "ad549e2be3629cce",
        "type": "comment",
        "z": "80f151b50b48fc04",
        "name": "Flow 2: Create new entry in algos table (ONCE)",
        "info": "",
        "x": 220,
        "y": 500,
        "wires": []
    },
    {
        "id": "b2f8ed7ae11a3bd7",
        "type": "function-npm",
        "z": "80f151b50b48fc04",
        "name": "Get past 1000 trades",
        "func": "let symbol = 'QQQ'\n\n// use polygon format for cryptos\n//let symbol = \"X:ETHUSD\"\n\n\n\nlet cnt = 1000 // set count here\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 140,
        "wires": [
            [
                "44b81a7f3e75e13a"
            ]
        ]
    },
    {
        "id": "44b81a7f3e75e13a",
        "type": "polygon-last-trade-v3",
        "z": "80f151b50b48fc04",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 760,
        "y": 140,
        "wires": [
            [
                "935e66928721fd6c"
            ]
        ]
    },
    {
        "id": "935e66928721fd6c",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 140,
        "wires": [
            [
                "76815a022fe58696"
            ]
        ]
    },
    {
        "id": "ed29e9353a13d4f6",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\n//node.warn(\"Ticker: \" +symbol+ \" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 140,
        "wires": [
            [
                "6e4f9a5fd5cc86e2"
            ]
        ]
    },
    {
        "id": "6e4f9a5fd5cc86e2",
        "type": "function-npm",
        "z": "80f151b50b48fc04",
        "name": "Get last trade",
        "func": "let symbol = msg.symbol\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 200,
        "wires": [
            [
                "c236da62dfc8e360"
            ]
        ]
    },
    {
        "id": "c236da62dfc8e360",
        "type": "polygon-last-trade-v3",
        "z": "80f151b50b48fc04",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 740,
        "y": 200,
        "wires": [
            [
                "07bd5bbc035cd37a"
            ]
        ]
    },
    {
        "id": "07bd5bbc035cd37a",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "display diff",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price; // this is the price of the last trade\n\n}\n\n\nlet avg = msg.moving_avg\nlet ticker = msg.symbol\n\nlet diff = price - avg\ndiff = diff.toFixed(2)\n\n//node.warn(\"Ticker: \" + ticker + \" Current Price: \" + price + \" Avg Price: \" + avg + \" Diff: \" + diff)\nmsg.diff = diff\nmsg.price = price\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 200,
        "wires": [
            [
                "3218016531dd24a8"
            ]
        ]
    },
    {
        "id": "3218016531dd24a8",
        "type": "change",
        "z": "80f151b50b48fc04",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "diff",
                "pt": "flow",
                "to": "diff",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "price",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "76815a022fe58696",
        "type": "calculator",
        "z": "80f151b50b48fc04",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 1200,
        "y": 140,
        "wires": [
            [
                "ed29e9353a13d4f6"
            ]
        ]
    },
    {
        "id": "4b5c1bb71fa87e46",
        "type": "comment",
        "z": "80f151b50b48fc04",
        "name": "This flow calculates the difference between the current price and the moving average price. Modify line 1(4) to change the ticker. Line 8 to change the size of the data set.",
        "info": "",
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "70bbe8f6146d5dec",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 420,
        "wires": [
            [
                "d47847fab88fe14a"
            ]
        ]
    },
    {
        "id": "d47847fab88fe14a",
        "type": "split",
        "z": "80f151b50b48fc04",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 420,
        "wires": [
            [
                "d9fdbdc8e7b37547"
            ]
        ]
    },
    {
        "id": "d9fdbdc8e7b37547",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "insert into tickers_paper",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nlet type = flow.get(\"algo_type\")\nsymbol = symbol.replace(\" \",\"\")\n\n\n//msg.query = \"alter tabLe tickers_paper add column algo_type VARCHAR(20);\"\n//msg.query = \"delete from tickers_live where symbol like 'QQQ';\"\n//msg.query = \"insert into tickers_paper (id, symbol, portfolioname, algo_type) values (\" + id + \",'\" + symbol + \"', '\" + portfolioname + \"','\" + type + \"') ON CONFLICT DO NOTHING;\"\nmsg.query = \"insert into tickers_paper (id, symbol, portfolioname, algo_type) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"','\" +type+ \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 420,
        "wires": [
            [
                "9114311032ab4dbf"
            ]
        ]
    },
    {
        "id": "f051e36084a8fe9d",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers_paper set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_paper.symbol\"\n//msg.query = \"update tickers_live set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_live.symbol\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 460,
        "wires": [
            [
                "433bafd19e1965c0"
            ]
        ]
    },
    {
        "id": "9b0257c143442889",
        "type": "delay",
        "z": "80f151b50b48fc04",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 460,
        "wires": [
            [
                "f051e36084a8fe9d"
            ]
        ]
    },
    {
        "id": "9f18c0696dee6562",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "define values required for adding trade to portfolio",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nmsg.alpaca_ticker = 'QQQ'\n\nlet id = flow.get(\"id\")\nlet login = global.get(\"login\")\nlet ticker = flow.get(\"tickers\")\nlet qty = 1\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 1 // number of tickers in portfolio\nlet target = 1.00 // target profit \nlet account = 'paper'\nlet psize = 350 // size of portfolio\nlet status = 'running'\nlet algo_type = 'intraday'\nlet algo_status = 'long'\nlet benchmark = 'SPY'\n\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.qty = qty\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "886b138e90b0e74e"
            ]
        ]
    },
    {
        "id": "886b138e90b0e74e",
        "type": "change",
        "z": "80f151b50b48fc04",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "qty",
                "pt": "flow",
                "to": "qty",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "alpaca_ticker",
                "pt": "flow",
                "to": "alpaca_ticker",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "bc7c4f9796ae82df",
        "type": "inject",
        "z": "80f151b50b48fc04",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "78cef4a00cba2bab"
            ]
        ]
    },
    {
        "id": "78cef4a00cba2bab",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "set id,tickers, portfolioname",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n//d = 1676570496465\nmsg.id = d\nlet tickers = 'QQQ'\nmsg.tickers = tickers\nmsg.algo_name = 'Trade QQQ Mean Reversion [LIVE]'\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 320,
        "wires": [
            [
                "f5061fe1c446bd6e"
            ]
        ]
    },
    {
        "id": "f5061fe1c446bd6e",
        "type": "change",
        "z": "80f151b50b48fc04",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c4021e19e478e69a",
        "type": "inject",
        "z": "80f151b50b48fc04",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "9f18c0696dee6562"
            ]
        ]
    },
    {
        "id": "2b2114fa71a324ee",
        "type": "inject",
        "z": "80f151b50b48fc04",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "70bbe8f6146d5dec",
                "9b0257c143442889"
            ]
        ]
    },
    {
        "id": "3a6445229919cc91",
        "type": "inject",
        "z": "80f151b50b48fc04",
        "name": "Every second",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "7658fb3ad6c16bad"
            ]
        ]
    },
    {
        "id": "82bc0eadc4f0d688",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "add values to algos table",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = flow.get(\"login\")\nlet asset_class = flow.get(\"asset_class\")\nlet number = flow.get(\"number\")\nlet target = flow.get(\"target\")\nlet account = flow.get(\"account\")\nlet psize = flow.get(\"psize\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet benchmark = flow.get(\"benchmark\")\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 560,
        "wires": [
            [
                "273b6e2c5c07fb73"
            ]
        ]
    },
    {
        "id": "19cdffce3b790a6a",
        "type": "inject",
        "z": "80f151b50b48fc04",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "82bc0eadc4f0d688"
            ]
        ]
    },
    {
        "id": "0a2840c800571a11",
        "type": "comment",
        "z": "80f151b50b48fc04",
        "name": "Copyright©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 790,
        "y": 20,
        "wires": []
    },
    {
        "id": "9114311032ab4dbf",
        "type": "postgresql",
        "z": "80f151b50b48fc04",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "433bafd19e1965c0",
        "type": "postgresql",
        "z": "80f151b50b48fc04",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "273b6e2c5c07fb73",
        "type": "postgresql",
        "z": "80f151b50b48fc04",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "4eadc75fb6edc270",
        "type": "comment",
        "z": "80f151b50b48fc04",
        "name": "PAPER",
        "info": "",
        "x": 110,
        "y": 20,
        "wires": []
    },
    {
        "id": "a766c62ffa4e68d9",
        "type": "inject",
        "z": "80f151b50b48fc04",
        "name": "TEST",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "fedba567fb586f1b"
            ]
        ]
    },
    {
        "id": "fedba567fb586f1b",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "display vars",
        "func": "let pos = 0\nlet alpaca_ticker = flow.get(\"alpaca_ticker\")\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet diff = flow.get(\"diff\")\nlet price = flow.get(\"price\")\nlet qty = ((psize / number) / price)\nlet hour = global.get(\"hour\")\nlet dt = global.get(\"datetime\")\n\nqty = +qty\nqty = qty.toFixed(0)\n\nprice = +price\nprice = price.toFixed(2)\n\nnode.warn(\"Date: \" +dt+ \" Hour: \" +hour+ \" Algoname: \" +algo_name+ \" Ticker: \" +alpaca_ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Portfolio: \" +psize+ \" Number: \" +number+ \" Diff: \" +diff)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "7658fb3ad6c16bad",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "time of day",
        "func": "//let hour = global.get(\"hour\")\nlet d = new Date();\nlet hour = d.getHours();\n\nif ( hour > 9 && hour < 16){ //node.warn(\"Market Open\")\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "b2f8ed7ae11a3bd7"
            ]
        ]
    },
    {
        "id": "c32fa531bd2de693",
        "type": "postgresql",
        "z": "80f151b50b48fc04",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 1240,
        "wires": [
            [
                "99f60d7a913409af"
            ]
        ]
    },
    {
        "id": "dfedfad3d923ad86",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n//let limit_price = msg.payload[\"limit_price\"]\nlet limit_price = flow.get(\"price\")\n\n\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif (source === null) { source = 0 }\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, limit_price, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + limit_price + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours + \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1240,
        "wires": [
            [
                "c32fa531bd2de693"
            ]
        ]
    },
    {
        "id": "9c3dd70c632c6554",
        "type": "alpaca-order",
        "z": "80f151b50b48fc04",
        "conf": "c06cec183f9317f9",
        "x": 650,
        "y": 1240,
        "wires": [
            [
                "dfedfad3d923ad86"
            ]
        ]
    },
    {
        "id": "9f67edf96c4810d9",
        "type": "delay",
        "z": "80f151b50b48fc04",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1020,
        "wires": [
            [
                "fd8c790401379cb0"
            ]
        ]
    },
    {
        "id": "dcfee43c0e38dc75",
        "type": "alpaca-position-query",
        "z": "80f151b50b48fc04",
        "conf": "c06cec183f9317f9",
        "x": 510,
        "y": 1380,
        "wires": [
            [
                "8054fb1daf0c19c4"
            ]
        ]
    },
    {
        "id": "b3e5d4d1e413368a",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "create msg.vars for QQQ",
        "func": "let ticker = flow.get(\"ticker\")\nticker = 'QQQ'\n\nif (msg.payload[\"symbol\"] == ticker ){\n    \n//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\n//node.warn(qty)\nmsg.qty = qty\nmsg.profit = unrealized_pl\nmsg.ticker = symbol\nmsg.price = current_price\n//node.warn(\"Ticker: \" + msg.ticker + \" Price: \" + msg.price + \" Profit: \" + msg.profit + \" Buy Qty: \" + msg.qty)\nreturn msg;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1380,
        "wires": [
            [
                "70dcca146f9ff796"
            ]
        ]
    },
    {
        "id": "8054fb1daf0c19c4",
        "type": "split",
        "z": "80f151b50b48fc04",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 1380,
        "wires": [
            [
                "b3e5d4d1e413368a"
            ]
        ]
    },
    {
        "id": "a30b6f926a4575e2",
        "type": "postgresql",
        "z": "80f151b50b48fc04",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "9f31fd3eae6a7b48",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif (source === null) { source = 0 }\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, limit_price, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + limit_price + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours + \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1440,
        "wires": [
            [
                "a30b6f926a4575e2"
            ]
        ]
    },
    {
        "id": "8bbad7be223d5441",
        "type": "comment",
        "z": "80f151b50b48fc04",
        "name": "Close Position at 3:59 pm",
        "info": "",
        "x": 190,
        "y": 1340,
        "wires": []
    },
    {
        "id": "cce1d247c578bc6b",
        "type": "alpaca-order",
        "z": "80f151b50b48fc04",
        "conf": "810ce3520dc18040",
        "x": 550,
        "y": 1440,
        "wires": [
            [
                "9f31fd3eae6a7b48"
            ]
        ]
    },
    {
        "id": "799a107be4974a70",
        "type": "delay",
        "z": "80f151b50b48fc04",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1380,
        "wires": [
            [
                "dcfee43c0e38dc75"
            ]
        ]
    },
    {
        "id": "3d43226e20426e7a",
        "type": "comment",
        "z": "80f151b50b48fc04",
        "name": "Flow 3:  Store Current Position",
        "info": "",
        "x": 160,
        "y": 740,
        "wires": []
    },
    {
        "id": "709a1f19ad187eaf",
        "type": "alpaca-order",
        "z": "80f151b50b48fc04",
        "conf": "c06cec183f9317f9",
        "x": 730,
        "y": 980,
        "wires": [
            [
                "9de3248359673c7a"
            ]
        ]
    },
    {
        "id": "e9ecba3ec9c85503",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\n\nprice = price.toFixed(10)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 800,
        "wires": [
            [
                "2e06dd7aef10a6ac"
            ]
        ]
    },
    {
        "id": "1eed30d2a3caa9f9",
        "type": "polygon-last-trade-v3",
        "z": "80f151b50b48fc04",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 700,
        "y": 800,
        "wires": [
            [
                "e9ecba3ec9c85503"
            ]
        ]
    },
    {
        "id": "d651069be6b8d2fd",
        "type": "postgresql",
        "z": "80f151b50b48fc04",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1240,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "9de3248359673c7a",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n//let limit_price = msg.payload[\"limit_price\"]\nlet limit_price = flow.get(\"price\")\n\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif ( source === null){ source = 0}\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, limit_price, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + limit_price + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours + \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 980,
        "wires": [
            [
                "40daeb02aa50b524",
                "d651069be6b8d2fd"
            ]
        ]
    },
    {
        "id": "e7ac34264e8ddb62",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "polygon ticker",
        "func": "let polygon_symbol = 'X:ETHUSD'\n\nmsg.symbol = 'ETHUSD'\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: polygon_symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 800,
        "wires": [
            [
                "1eed30d2a3caa9f9"
            ]
        ]
    },
    {
        "id": "c4c4b392a7e05c56",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "prepare cancel order",
        "func": "//msg.payload = { order_id: '5f62742f-9f1f-4035-ad69-31c347827a44' };  // this is yours\n//msg.payload = { order_id: '845e44a0-3ed5-4163-a972-ce64ba30328a' };  // this is yours\n//node.warn(msg.payload)\n\n//msg.payload = { order_id: '\" + id + \"'};\n\nlet order_id = flow.get(\"orderid\")\n//node.warn(order_id)\n\nmsg.payload =  { order_id }\n//msg.payload = \" { order_id: '\" + id + \"'};\"\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1040,
        "wires": [
            [
                "7187312a28821548"
            ]
        ]
    },
    {
        "id": "7187312a28821548",
        "type": "alpaca-orders-close-one",
        "z": "80f151b50b48fc04",
        "conf": "c06cec183f9317f9",
        "order_id": "",
        "name": "",
        "x": 1130,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "40daeb02aa50b524",
        "type": "change",
        "z": "80f151b50b48fc04",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "orderid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "811753a28db819b7",
        "type": "delay",
        "z": "80f151b50b48fc04",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 720,
        "y": 1040,
        "wires": [
            [
                "c4c4b392a7e05c56"
            ]
        ]
    },
    {
        "id": "2e06dd7aef10a6ac",
        "type": "change",
        "z": "80f151b50b48fc04",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "current_price",
                "pt": "flow",
                "to": "price",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "565b91ce57594a6d",
        "type": "split",
        "z": "80f151b50b48fc04",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 890,
        "y": 840,
        "wires": [
            [
                "20d2604401803a31"
            ]
        ]
    },
    {
        "id": "20d2604401803a31",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "create msg.vars for QQQ",
        "func": "let ticker = flow.get(\"ticker\")\nticker = 'QQQ'\n\nif (msg.payload[\"symbol\"] == ticker ){\n    \n//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\n//node.warn(qty)\nmsg.qty = qty\nmsg.profit = unrealized_pl\nmsg.ticker = symbol\nmsg.price = current_price\n\n//node.warn(\"Ticker: \" + msg.ticker + \" Price: \" + msg.price + \" Profit: \" + msg.profit + \" Position: \" + msg.qty)\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 840,
        "wires": [
            [
                "8bf7f5d8e9af032f"
            ]
        ]
    },
    {
        "id": "8bf7f5d8e9af032f",
        "type": "change",
        "z": "80f151b50b48fc04",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "position",
                "pt": "flow",
                "to": "qty",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "profit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "price",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "75a10958d8c7f1ca",
        "type": "alpaca-position-query",
        "z": "80f151b50b48fc04",
        "conf": "c06cec183f9317f9",
        "x": 710,
        "y": 840,
        "wires": [
            [
                "565b91ce57594a6d"
            ]
        ]
    },
    {
        "id": "afb5b12ad96f6691",
        "type": "change",
        "z": "80f151b50b48fc04",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "position",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 840,
        "wires": [
            [
                "75a10958d8c7f1ca"
            ]
        ]
    },
    {
        "id": "fd8c790401379cb0",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "create Alpaca buy or sell order ",
        "func": "let pos = flow.get(\"position\")\n//node.warn(\"Position: \" +pos)\n\n\nif (pos > 0 || pos < 0){\n//    node.warn(\"holding a position\")\n}\n\nif (pos == 0) {\n  //  node.warn(\"position is zero\")\n\n\n    let alpaca_ticker = flow.get(\"alpaca_ticker\")\n//    let alpaca_ticker = 'QQQ'\n    let algo_name = flow.get(\"algo_name\")\n    let number = flow.get(\"number\")\n    let psize = flow.get(\"psize\")\n    let diff = flow.get(\"diff\")\n    let price = flow.get(\"price\")\n\n    let qty = ((psize / number) / price)\n    qty = qty.toFixed(0)\n\n    price = +price\n    price = price.toFixed(2)\n\n\n //   node.warn(\"Algoname: \" +algo_name+ \" Ticker: \" +alpaca_ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Portfolio: \" +psize+ \" Number: \" +number+ \" Diff: \" +diff)\n \n \n    // create a unique clientid with unixtime\n    let d = Date.now()\n    let client_order_id = alpaca_ticker + d\n    msg.clientorderid = client_order_id // passes this variable in the flow \n\n    let subtag = d\n    let temp = ''\n\n    // exception handling for missing flow variables\n    if (alpaca_ticker == null) { alpaca_ticker = 'ETH/USD' }\n    if (qty == null) { qty = 6 }\n\n// make a long order \n    if (diff < - 0.14) {\n\n        temp = {\n            \"symbol\": alpaca_ticker,\n            \"qty\": qty,\n            \"side\": 'buy',\n            \"type\": 'limit',\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  // limit orders only\n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        }; // line 46\n\n        msg.payload = temp\n        //node.warn(msg.payload)\n        return msg;\n    } // line 44\n\n    // make a short order \n    if (diff > 0.14) {\n\n        temp = {\n            \"symbol\": alpaca_ticker,\n            \"qty\": qty,\n            \"side\": 'sell',\n            \"type\": 'limit',\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  // limit orders only\n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        }; // line 65\n\n        msg.payload = temp\n        //node.warn(msg.payload)\n        return msg;\n    } // line 64\n\n\n\n} // line 9\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1020,
        "wires": [
            [
                "709a1f19ad187eaf",
                "811753a28db819b7"
            ]
        ]
    },
    {
        "id": "488fec17cee0f6bd",
        "type": "comment",
        "z": "80f151b50b48fc04",
        "name": "Flow 4:  Buy if position & diff  ",
        "info": "",
        "x": 160,
        "y": 900,
        "wires": []
    },
    {
        "id": "2bfc1e3ba45987b8",
        "type": "comment",
        "z": "80f151b50b48fc04",
        "name": "Flow 5:  Sell if Profit Target Reached",
        "info": "",
        "x": 200,
        "y": 1120,
        "wires": []
    },
    {
        "id": "9983f6afc88b3eb3",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "create Alpaca sell order ",
        "func": "let pos = flow.get(\"position\")\nlet local = new Date();\n//node.warn(\"Time: \" +local+ \" Position:\" +pos)\n\nif (pos == 0){\n//    node.warn(\"position = 0\")\n}\n\nif (pos > 0 || pos < 0) {\n//    node.warn(\"position is \" +pos)\n\n    let alpaca_ticker = flow.get(\"alpaca_ticker\")\n    let algo_name = flow.get(\"algo_name\")\n    let profit = flow.get(\"profit\")\n    let number = flow.get(\"number\")\n    let psize = flow.get(\"psize\")\n    let diff = flow.get(\"diff\")\n    let price = flow.get(\"price\")\n\n//    let qty = ((psize / number) / price)\n    let qty = pos\n    \n    price = +price\n    price = price.toFixed(2)\n    //price = 1400.00\n    //qty = qty.toFixed(0) // round to whole numbers for limit trades\n\n     //      node.warn(\"Algoname: \" +algo_name+ \" Ticker: \" +alpaca_ticker+ \" Profit: \" +profit+ \" Qty: \" +pos+ \" Price: \" +price+ \" Portfolio: \" +psize+ \" Number: \" +number+ \" Diff: \" +diff)\n \n \n    // create a unique clientid with unixtime\n    let d = Date.now()\n    let client_order_id = alpaca_ticker + d\n    msg.clientorderid = client_order_id // passes this variable in the flow \n\n    let subtag = d\n    let temp = ''\n    let side = 'sell'\n\n    // exception handling for missing flow variables\n    if (alpaca_ticker == null) { alpaca_ticker = 'ETH/USD' }\n \n// if the profit is greater or less than $1, sell\n\n    if (profit  >  0.25 || profit < -0.05) {\n\n        if (pos < 0){\n         side = 'buy'\n         qty = qty * -1\n        }\n  \n        temp = {\n            \"symbol\": alpaca_ticker,\n            \"qty\": qty,\n            \"side\": side,\n            \"type\": 'limit',\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  // limit orders only\n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n\n        msg.payload = temp\n        node.warn(msg.payload)\n        return msg;\n    }\n\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1240,
        "wires": [
            [
                "9c3dd70c632c6554"
            ]
        ]
    },
    {
        "id": "6953469f49530db0",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "prepare cancel order",
        "func": "let order_id = flow.get(\"orderid\")\nnode.warn(order_id)\n\nmsg.payload =  { order_id }\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1180,
        "wires": [
            [
                "199ef359d891aebd"
            ]
        ]
    },
    {
        "id": "199ef359d891aebd",
        "type": "alpaca-orders-close-one",
        "z": "80f151b50b48fc04",
        "conf": "c06cec183f9317f9",
        "order_id": "",
        "name": "",
        "x": 870,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "99f60d7a913409af",
        "type": "change",
        "z": "80f151b50b48fc04",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "orderid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "70dcca146f9ff796",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "create Alpaca sell order ",
        "func": "let pos = msg.qty\n\n\nif (pos == 0){\n    node.warn(\"position = 0\")\n}\n\nif (pos > 0) {\n //   node.warn(\"position is zero\")\n\n    let alpaca_ticker = flow.get(\"alpaca_ticker\")\n    let algo_name = flow.get(\"algo_name\")\n    let profit = flow.get(\"profit\")\n    let number = flow.get(\"number\")\n    let psize = flow.get(\"psize\")\n    let diff = flow.get(\"diff\")\n    let price = flow.get(\"current_price\")\n\n    let qty = ((psize / number) / price)\n\n    price = +price\n    price = price.toFixed(2)\n    //price = 1400.00\n    qty = qty.toFixed(0) // round to whole numbers for limit trades\n\n  //  node.warn(\"Algoname: \" +algo_name+ \" Ticker: \" +alpaca_ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Portfolio: \" +psize+ \" Number: \" +number+ \" Diff: \" +diff)\n \n \n    // create a unique clientid with unixtime\n    let d = Date.now()\n    let client_order_id = alpaca_ticker + d\n    msg.clientorderid = client_order_id // passes this variable in the flow \n\n    let subtag = d\n    let temp = ''\n\n  // exception handling for missing flow variables\n  if (alpaca_ticker == null) { alpaca_ticker = 'ETH/USD' }\n\n//    if (profit  >  50) {\n\n        temp = {\n            \"symbol\": alpaca_ticker,\n            \"qty\": pos,\n            \"side\": 'sell',\n            \"type\": 'market',\n            \"client_order_id\": client_order_id,\n          //  \"limit_price\": price,  // limit orders only\n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n\n        msg.payload = temp\n        node.warn(msg.payload)\n        return msg;\n//    }\n\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1440,
        "wires": [
            [
                "cce1d247c578bc6b"
            ]
        ]
    },
    {
        "id": "cbc43c8d753517df",
        "type": "inject",
        "z": "80f151b50b48fc04",
        "name": "GO",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "f6193fa4814053fd",
        "type": "delay",
        "z": "80f151b50b48fc04",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 1180,
        "wires": [
            [
                "6953469f49530db0",
                "385c1d0218fa48d1"
            ]
        ]
    },
    {
        "id": "ca09f655e4198bcc",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "time of day",
        "func": "let d = new Date();\nlet hour = d.getHours();\nif ( hour > 9 && hour < 16){  // node.warn(\"Market Open\")\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 960,
        "wires": [
            [
                "9f67edf96c4810d9"
            ]
        ]
    },
    {
        "id": "500b21e8c3b18469",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "time of day",
        "func": "let d = new Date();\nlet hour = d.getHours();\nif ( hour > 9 && hour < 16){ //node.warn(\"Market Open\")\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1180,
        "wires": [
            [
                "f6193fa4814053fd"
            ]
        ]
    },
    {
        "id": "15e44175a4658bb2",
        "type": "function",
        "z": "80f151b50b48fc04",
        "name": "time of day",
        "func": "let d = new Date();\nlet hour = d.getHours();\nif ( hour > 9 && hour < 16){ //node.warn(\"Market Open\")\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 820,
        "wires": [
            [
                "e7ac34264e8ddb62",
                "afb5b12ad96f6691"
            ]
        ]
    },
    {
        "id": "d1f1d2ac049ab28c",
        "type": "inject",
        "z": "80f151b50b48fc04",
        "name": "1 min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "d7aa496668b553f7",
        "type": "inject",
        "z": "80f151b50b48fc04",
        "name": "1 min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "dc7b0ae19e384c46",
        "type": "inject",
        "z": "80f151b50b48fc04",
        "name": "3:59 PM",
        "props": [
            {
                "p": "topic",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "59 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "385c1d0218fa48d1",
        "type": "delay",
        "z": "80f151b50b48fc04",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 1240,
        "wires": [
            [
                "9983f6afc88b3eb3"
            ]
        ]
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key New"
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKMGQKGZAI7ZZE1VHGOH",
        "paper": true
    },
    {
        "id": "810ce3520dc18040",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "AKAERPL40H0ODY9MO0RX",
        "paper": false
    }
]