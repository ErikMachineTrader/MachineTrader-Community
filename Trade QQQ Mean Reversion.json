[
    {
        "id": "e5bdc95bb17823cc",
        "type": "tab",
        "label": "Trade QQQ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cf3d0fc7d1f7b1b7",
        "type": "comment",
        "z": "e5bdc95bb17823cc",
        "name": "Flow 1: Define Strategy and Set Trading Values (ONCE). Set profit target in define values (line 10).",
        "info": "",
        "x": 370,
        "y": 240,
        "wires": []
    },
    {
        "id": "e0c067b8a925f6c9",
        "type": "comment",
        "z": "e5bdc95bb17823cc",
        "name": "Flow 2: Create new entry in algos table (ONCE)",
        "info": "",
        "x": 220,
        "y": 480,
        "wires": []
    },
    {
        "id": "5b5c4ca38f304138",
        "type": "comment",
        "z": "e5bdc95bb17823cc",
        "name": "Stats: \"Sample: 10000 Spread: 0.379 Pct Spread: 2.312% Change: -0.289 Pct Change: -1.765\"",
        "info": "",
        "x": 390,
        "y": 20,
        "wires": []
    },
    {
        "id": "45184d512b29766c",
        "type": "inject",
        "z": "e5bdc95bb17823cc",
        "name": "GO",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "84ab8509b666746e"
            ]
        ]
    },
    {
        "id": "84ab8509b666746e",
        "type": "function-npm",
        "z": "e5bdc95bb17823cc",
        "name": "Get past 1000 trades",
        "func": "let symbol = 'QQQ'\n\n// use polygon format for cryptos\n//let symbol = \"X:BTCUSD\"\n\n\n\nlet cnt = 1000 // set count here\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 120,
        "wires": [
            [
                "7b3f378e95e96683"
            ]
        ]
    },
    {
        "id": "7b3f378e95e96683",
        "type": "polygon-last-trade-v3",
        "z": "e5bdc95bb17823cc",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 580,
        "y": 120,
        "wires": [
            [
                "e601468884fc6d44"
            ]
        ]
    },
    {
        "id": "e601468884fc6d44",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 120,
        "wires": [
            [
                "60b1fb393330b750"
            ]
        ]
    },
    {
        "id": "8dd44f64c9ebae2b",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\n//node.warn(\"Ticker: \" +symbol+ \" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 120,
        "wires": [
            [
                "81c018deadef77a9"
            ]
        ]
    },
    {
        "id": "81c018deadef77a9",
        "type": "function-npm",
        "z": "e5bdc95bb17823cc",
        "name": "Get last trade",
        "func": "let symbol = msg.symbol\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 180,
        "wires": [
            [
                "8b65951eb5dc02c7"
            ]
        ]
    },
    {
        "id": "8b65951eb5dc02c7",
        "type": "polygon-last-trade-v3",
        "z": "e5bdc95bb17823cc",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 180,
        "wires": [
            [
                "ecc72f4e1b91b2cd"
            ]
        ]
    },
    {
        "id": "ecc72f4e1b91b2cd",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "display diff",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price; // this is the price of the last trade\n\n}\n\n\nlet avg = msg.moving_avg\nlet ticker = msg.symbol\n\nlet diff = price - avg\ndiff = diff.toFixed(2)\n\n//node.warn(\"Ticker: \" + ticker + \" Current Price: \" + price + \" Avg Price: \" + avg + \" Diff: \" + diff)\nmsg.diff = diff\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 180,
        "wires": [
            [
                "e0fc1d45df6a3a2c"
            ]
        ]
    },
    {
        "id": "e0fc1d45df6a3a2c",
        "type": "change",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "diff",
                "pt": "flow",
                "to": "diff",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "60b1fb393330b750",
        "type": "calculator",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 1020,
        "y": 120,
        "wires": [
            [
                "8dd44f64c9ebae2b"
            ]
        ]
    },
    {
        "id": "22a75c6606a4e9b1",
        "type": "comment",
        "z": "e5bdc95bb17823cc",
        "name": "This flow calculates the difference between the current price and the moving average price. Modify line 1(4) to change the ticker. Line 8 to change the size of the data set.",
        "info": "",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "4279daf19ef34555",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = 'pta15'\nlet asset_class = 'crypto' // stocks or crypto\nlet number = 20 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet algo_type = \"interday\"\nlet strategy_type = \"long\"\nlet status = 'running'\nlet benchmark = 'SPY'\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,algo_name,algo_type,strategy_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + algo_name + \"','\" + algo_type + \"','\" + strategy_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"');\"\nmsg.query = sql\nnode.warn(msg.query)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "c6823e6ddcf8c977",
                "549af3f8c247e7af"
            ]
        ]
    },
    {
        "id": "1e3f2999ecabd680",
        "type": "inject",
        "z": "e5bdc95bb17823cc",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "4279daf19ef34555"
            ]
        ]
    },
    {
        "id": "c6823e6ddcf8c977",
        "type": "change",
        "z": "e5bdc95bb17823cc",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "549af3f8c247e7af",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "fd57062999de68ba",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "b0bdc0a23a03cc9f"
            ]
        ]
    },
    {
        "id": "b0bdc0a23a03cc9f",
        "type": "split",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 400,
        "wires": [
            [
                "073fe3374f93ea8e"
            ]
        ]
    },
    {
        "id": "073fe3374f93ea8e",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "insert into tickers_paper",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers_paper (id, symbol, portfolioname) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"');\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "7dfacc90799cd28a"
            ]
        ]
    },
    {
        "id": "7dfacc90799cd28a",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "4bd4572cfb551b97",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers_paper set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_paper.symbol\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 440,
        "wires": [
            [
                "ed5755a732f5206b"
            ]
        ]
    },
    {
        "id": "1d00ce83b7faae3c",
        "type": "delay",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 440,
        "wires": [
            [
                "4bd4572cfb551b97"
            ]
        ]
    },
    {
        "id": "ed5755a732f5206b",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "cbbff173072a193f",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "define values required for adding trade to portfolio",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = flow.get(\"id\")\nlet login = 'dansavage'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 1 // number of tickers in portfolio\nlet target = 0.01 // target profit \nlet account = 'live'\nlet psize = 25 // size of portfolio\nlet status = 'running'\nlet algo_type = 'intraday'\nlet algo_status = 'long'\nlet benchmark = 'SPY'\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "1ef4891c0e81d6c0"
            ]
        ]
    },
    {
        "id": "1ef4891c0e81d6c0",
        "type": "change",
        "z": "e5bdc95bb17823cc",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "5b65d8c11f23d2d2",
        "type": "inject",
        "z": "e5bdc95bb17823cc",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "c4ccb7456e8230e5"
            ]
        ]
    },
    {
        "id": "c4ccb7456e8230e5",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "set id,tickers, portfolioname",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nmsg.id = d\nlet tickers = 'QQQ'\nmsg.tickers = tickers\nmsg.algo_name = 'Trade QQQ Mean Reversion'\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "c6faa11068b0a6fe"
            ]
        ]
    },
    {
        "id": "c6faa11068b0a6fe",
        "type": "change",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b5cd8b31d26c5f5c",
        "type": "inject",
        "z": "e5bdc95bb17823cc",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "cbbff173072a193f"
            ]
        ]
    },
    {
        "id": "4b2d9f18daac3bd7",
        "type": "inject",
        "z": "e5bdc95bb17823cc",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "fd57062999de68ba",
                "1d00ce83b7faae3c"
            ]
        ]
    },
    {
        "id": "4905c6b5a35a435a",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "create Alpaca buy order ",
        "func": "let qty = msg.qty\n\nlet ticker = msg.symbol\nlet price = 0\nlet profit = 0\nlet side = 'buy'\nqty = +qty\n\nlet diff = flow.get(\"diff\")\ndiff = +diff\n\nconst ld = new Date();\nlet localtime = ld.toLocaleString();\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n//node.warn(\"Ticker: \" +ticker+ \" Price: \" +price+ \" Profit: \" +profit+ \" Side: \" +side+ \" Qty: \" +qty)\nlet temp = ''\n\n\nif ( diff < -0.10){\n\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": 'buy',\n        \"type\": \"market\",\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"day\"\n    };\n\nnode.warn(temp)\nmsg.payload = temp\n\n}\n\nlet dt = localtime\nlet action1 = (\" Ticker: \" + ticker + \" Diff: \" +diff+ \" Price: \" + price + \" Profit: \" + profit + \" Side: \" + side + \" Qty: \" + qty)\nlet action2 = temp\nmsg.sql = \"insert into log_qqq (date, id1, id2) values ('\" + dt + \"','\" + action1 + \"','\" +action2+ \"');\" \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 880,
        "wires": [
            [
                "14e452152feeae66"
            ]
        ]
    },
    {
        "id": "14e452152feeae66",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "insert into log",
        "func": "let sql = msg.sql\nmsg.query = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 940,
        "wires": [
            [
                "2bc46fd9932beef5"
            ]
        ]
    },
    {
        "id": "2bc46fd9932beef5",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "f055cd31220ab161",
        "type": "http in",
        "z": "e5bdc95bb17823cc",
        "name": "/api/download_log_positions",
        "url": "/api/download_log_positions",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1340,
        "wires": [
            [
                "6de0bf34e10a690a"
            ]
        ]
    },
    {
        "id": "d3fd48bb8efaa11a",
        "type": "http response",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 990,
        "y": 1340,
        "wires": []
    },
    {
        "id": "bffa36b32145171c",
        "type": "csv",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 1340,
        "wires": [
            [
                "2f494dceddf81675"
            ]
        ]
    },
    {
        "id": "6de0bf34e10a690a",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "export query",
        "func": "msg.query = \"select * from log_positions\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1340,
        "wires": [
            [
                "78f43fa81c892b5d"
            ]
        ]
    },
    {
        "id": "2f494dceddf81675",
        "type": "file",
        "z": "e5bdc95bb17823cc",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 1340,
        "wires": [
            [
                "d3fd48bb8efaa11a"
            ]
        ]
    },
    {
        "id": "78f43fa81c892b5d",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 1340,
        "wires": [
            [
                "bffa36b32145171c"
            ]
        ]
    },
    {
        "id": "532eaebde73f7d50",
        "type": "alpaca-order",
        "z": "e5bdc95bb17823cc",
        "conf": "810ce3520dc18040",
        "x": 650,
        "y": 880,
        "wires": [
            [
                "af2eaa1faa15342c"
            ]
        ]
    },
    {
        "id": "e485aa87ee859519",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1100,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "af2eaa1faa15342c",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 880,
        "wires": [
            [
                "e485aa87ee859519"
            ]
        ]
    },
    {
        "id": "732dcaee11b374ea",
        "type": "change",
        "z": "e5bdc95bb17823cc",
        "name": "reset msgs to 0",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "qty",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "side",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 1100,
        "wires": [
            [
                "83e77a34cb7ffaef"
            ]
        ]
    },
    {
        "id": "c288edbefcfb54d4",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "create Alpaca sell order on profit > 1",
        "func": "let ticker = msg.symbol\nlet price = msg.price\nlet profit = msg.profit\nlet side = msg.side\nlet qty = msg.qty \nqty = +qty\n\n\nconst ld = new Date();\nlet localtime = ld.toLocaleString();\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n//node.warn(\"Ticker: \" +ticker+ \" Price: \" +price+ \" Profit: \" +profit+ \" Side: \" +side+ \" Qty: \" +qty)\nlet temp = ''\n\n\nif ( (qty > 0) && (profit > 10) ){\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": \"market\",\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"day\"\n    };\n}\n\nif ((qty < 0) ) {\n    qty = (qty * -1)\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"buy\",\n        \"type\": \"market\",\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"day\"\n    };\n}\n\nnode.warn(temp)\nmsg.payload = temp\nlet action1 = (\"Localtime: \" +localtime+ \" Ticker: \" + ticker + \" Price: \" + price + \" Profit: \" + profit + \" Side: \" + side + \" Qty: \" + qty)\nlet action2 = temp\nmsg.sql = \"insert into log_qqq (id3, id4) values ('\" + action1 + \"','\" + action2 + \"');\" \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1180,
        "wires": [
            [
                "aa0171ce565f5fe1"
            ]
        ]
    },
    {
        "id": "e410d91d59808e19",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 800,
        "y": 1100,
        "wires": [
            [
                "5a17dc91a585f67d"
            ]
        ]
    },
    {
        "id": "83e77a34cb7ffaef",
        "type": "delay",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "pauseType": "delay",
        "timeout": "750",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 1100,
        "wires": [
            [
                "e410d91d59808e19"
            ]
        ]
    },
    {
        "id": "aa0171ce565f5fe1",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "insert into log",
        "func": "let sql = msg.sql\nmsg.query = sql\n//node.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1240,
        "wires": [
            [
                "534063abcc9997be"
            ]
        ]
    },
    {
        "id": "534063abcc9997be",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "5a17dc91a585f67d",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "payload > 0",
        "func": "//node.warn(msg.payload.length);\nif (msg.payload.length > 0)\n{\n    msg.payload\n    //node.warn(\"the positions is NOT empty\")\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1100,
        "wires": [
            [
                "a4444310861a4e23"
            ]
        ]
    },
    {
        "id": "e6d963a719d96817",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "get values",
        "func": "let symbol = msg.payload[\"symbol\"]\nlet qty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet side = msg.payload[\"side\"]\nlet price = msg.payload[\"current_price\"]\n\nmsg.symbol = symbol\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\nmsg.price = price\n\n//node.warn(\"Symbol: \" +symbol+ \" Qty: \" +qty+ \" Profit: \" +profit+ \" Side: \" +side+ \" Price: \" +price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1100,
        "wires": [
            [
                "c288edbefcfb54d4"
            ]
        ]
    },
    {
        "id": "a4444310861a4e23",
        "type": "split",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1090,
        "y": 1100,
        "wires": [
            [
                "e6d963a719d96817"
            ]
        ]
    },
    {
        "id": "efab72768fbfd471",
        "type": "alpaca-order",
        "z": "e5bdc95bb17823cc",
        "conf": "810ce3520dc18040",
        "x": 610,
        "y": 1180,
        "wires": [
            [
                "f04814c3bf17d5e8"
            ]
        ]
    },
    {
        "id": "f0316eb32cc2ede2",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "f04814c3bf17d5e8",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1180,
        "wires": [
            [
                "f0316eb32cc2ede2"
            ]
        ]
    },
    {
        "id": "32fbdbc1c3a8bcd3",
        "type": "change",
        "z": "e5bdc95bb17823cc",
        "name": "reset msgs to 0",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "qty",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "side",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 820,
        "wires": [
            [
                "b32dee816fa5d39a"
            ]
        ]
    },
    {
        "id": "4ad63649e109a8f7",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 940,
        "y": 820,
        "wires": [
            [
                "1b2da0ed1041bd78"
            ]
        ]
    },
    {
        "id": "b32dee816fa5d39a",
        "type": "delay",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 790,
        "y": 820,
        "wires": [
            [
                "4ad63649e109a8f7"
            ]
        ]
    },
    {
        "id": "1b2da0ed1041bd78",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "payload = 0",
        "func": "//node.warn(msg.payload.length);\n\nif (msg.payload.length == 0)\n{\n    msg.payload\n    //node.warn(\"the position  is zero\")\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 820,
        "wires": [
            [
                "4905c6b5a35a435a"
            ]
        ]
    },
    {
        "id": "460c078e1ca7dd1b",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "select from positions",
        "func": "//let symbol = flow.get(\"ticker\")\nlet symbol = 'QQQ'\nmsg.qty = 0.1\nmsg.symbol = symbol\nlet sql = \"select * from positions where symbol = '\" +symbol+ \"' and account = 'paper';\"\nmsg.query = sql\n//node.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 820,
        "wires": [
            [
                "32fbdbc1c3a8bcd3",
                "3689254de85536d4"
            ]
        ]
    },
    {
        "id": "db676461ecace459",
        "type": "comment",
        "z": "e5bdc95bb17823cc",
        "name": "Create buy order when diff < -.10 and position is empty",
        "info": "",
        "x": 220,
        "y": 660,
        "wires": []
    },
    {
        "id": "c55c9313812b97e3",
        "type": "comment",
        "z": "e5bdc95bb17823cc",
        "name": "optional log file",
        "info": "",
        "x": 460,
        "y": 940,
        "wires": []
    },
    {
        "id": "2eaf5f287b92bf73",
        "type": "comment",
        "z": "e5bdc95bb17823cc",
        "name": "Create sell order when position > 0",
        "info": "",
        "x": 240,
        "y": 1040,
        "wires": []
    },
    {
        "id": "26084eeaab46e4c6",
        "type": "comment",
        "z": "e5bdc95bb17823cc",
        "name": "optional log file",
        "info": "",
        "x": 400,
        "y": 1240,
        "wires": []
    },
    {
        "id": "25a553c899dbdbd6",
        "type": "inject",
        "z": "e5bdc95bb17823cc",
        "name": "Every min",
        "props": [],
        "repeat": "",
        "crontab": "*/1 10-15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "b5878f90a6e4da23"
            ]
        ]
    },
    {
        "id": "96d5982d293b65b1",
        "type": "http in",
        "z": "e5bdc95bb17823cc",
        "name": "/api/download_orders",
        "url": "/api/download_orders",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1400,
        "wires": [
            [
                "96c49fd8dfa52616"
            ]
        ]
    },
    {
        "id": "419bcd13ba1db2a5",
        "type": "http response",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 990,
        "y": 1400,
        "wires": []
    },
    {
        "id": "942c8843413d8a86",
        "type": "csv",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 1400,
        "wires": [
            [
                "f014fbc1c94ef1c4"
            ]
        ]
    },
    {
        "id": "96c49fd8dfa52616",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "export query",
        "func": "msg.query = \"select * from orders\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1400,
        "wires": [
            [
                "c818798b812bb126"
            ]
        ]
    },
    {
        "id": "f014fbc1c94ef1c4",
        "type": "file",
        "z": "e5bdc95bb17823cc",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 1400,
        "wires": [
            [
                "419bcd13ba1db2a5"
            ]
        ]
    },
    {
        "id": "c818798b812bb126",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 1400,
        "wires": [
            [
                "942c8843413d8a86"
            ]
        ]
    },
    {
        "id": "c93866f35487e838",
        "type": "http in",
        "z": "e5bdc95bb17823cc",
        "name": "/api/download_log",
        "url": "/api/download_log",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1460,
        "wires": [
            [
                "3d0995434fceddf1"
            ]
        ]
    },
    {
        "id": "4889e40bfdafaa6a",
        "type": "http response",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 990,
        "y": 1460,
        "wires": []
    },
    {
        "id": "81a1467c1b1df77a",
        "type": "csv",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 1460,
        "wires": [
            [
                "825bb2b680a6a1fc"
            ]
        ]
    },
    {
        "id": "3d0995434fceddf1",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "export query",
        "func": "msg.query = \"select * from log_qqq\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1460,
        "wires": [
            [
                "e77a4b57c7890842"
            ]
        ]
    },
    {
        "id": "825bb2b680a6a1fc",
        "type": "file",
        "z": "e5bdc95bb17823cc",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 1460,
        "wires": [
            [
                "4889e40bfdafaa6a"
            ]
        ]
    },
    {
        "id": "e77a4b57c7890842",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 1460,
        "wires": [
            [
                "81a1467c1b1df77a"
            ]
        ]
    },
    {
        "id": "3689254de85536d4",
        "type": "delay",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1100,
        "wires": [
            [
                "732dcaee11b374ea"
            ]
        ]
    },
    {
        "id": "b5878f90a6e4da23",
        "type": "delay",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 700,
        "wires": [
            [
                "460c078e1ca7dd1b"
            ]
        ]
    },
    {
        "id": "1ee73f4fbc7f57e2",
        "type": "comment",
        "z": "e5bdc95bb17823cc",
        "name": "Enter ticker here: line 2",
        "info": "",
        "x": 400,
        "y": 780,
        "wires": []
    },
    {
        "id": "ceabd256c3c4bd6c",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "sell order ",
        "func": "let ticker = msg.symbol\nlet price = msg.price\nlet profit = msg.profit\nlet side = msg.side\nlet qty = msg.qty \nqty = +qty\n\n\nconst ld = new Date();\nlet localtime = ld.toLocaleString();\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n//node.warn(\"Ticker: \" +ticker+ \" Price: \" +price+ \" Profit: \" +profit+ \" Side: \" +side+ \" Qty: \" +qty)\nlet temp = ''\n\nif (qty > 0)  {\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": \"market\",\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"day\"\n    };\n}\n\n\nif ( (qty > 0) && (profit > 10) ){\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": \"market\",\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"day\"\n    };\n}\n\nif ((qty < 0) ) {\n    qty = (qty * -1)\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"buy\",\n        \"type\": \"market\",\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"day\"\n    };\n}\n\nnode.warn(temp)\nmsg.payload = temp\nlet id = (\"Localtime: \" +localtime+ \" Ticker: \" + ticker + \" Price: \" + price + \" Profit: \" + profit + \" Side: \" + side + \" Qty: \" + qty)\nlet id2 = ''\nmsg.sql = \"insert into log_tqqq (id, id2) values ('\" + id + \"','\" + id2 + \"');\" \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "b41a85e07a935492",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "fe0e914fe1a41ea5",
        "type": "function",
        "z": "e5bdc95bb17823cc",
        "name": "create log table",
        "func": "//let sql = \"create table IF NOT EXISTS log_qqq (date VARCHAR(100), id1 VARCHAR(5000), id2 VARCHAR(5000), id3 VARCHAR(5000), id4 VARCHAR(5000))\"\nlet sql = \"select * from log_qqq \"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 700,
        "wires": [
            [
                "b41a85e07a935492"
            ]
        ]
    },
    {
        "id": "92aeb43a8a54923e",
        "type": "inject",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 700,
        "wires": [
            [
                "fe0e914fe1a41ea5"
            ]
        ]
    },
    {
        "id": "5117da8328b48187",
        "type": "inject",
        "z": "e5bdc95bb17823cc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "query",
                "v": "select * from positions where symbol = 'QQQ'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 600,
        "wires": [
            [
                "2e3267b88744a72a"
            ]
        ]
    },
    {
        "id": "5cf88240da0ca4e3",
        "type": "debug",
        "z": "e5bdc95bb17823cc",
        "name": "debug 322",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 600,
        "wires": []
    },
    {
        "id": "2e3267b88744a72a",
        "type": "postgresql",
        "z": "e5bdc95bb17823cc",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 600,
        "wires": [
            [
                "5cf88240da0ca4e3"
            ]
        ]
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "810ce3520dc18040",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "AKXPMNFB8C20GBP3MXJE",
        "paper": false
    }
]