[
    {
        "id": "7c5cdd5d1ca7f264",
        "type": "tab",
        "label": "Price Testing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f33385bd62fad1f3",
        "type": "function-npm",
        "z": "7c5cdd5d1ca7f264",
        "name": "Get last trade",
        "func": "let symbol = 'X:ETHUSD'\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 180,
        "wires": [
            [
                "96b63ff5ce814c6c"
            ]
        ]
    },
    {
        "id": "96b63ff5ce814c6c",
        "type": "polygon-last-trade-v3",
        "z": "7c5cdd5d1ca7f264",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 500,
        "y": 180,
        "wires": [
            [
                "4e2d3b861ae631d2"
            ]
        ]
    },
    {
        "id": "4e2d3b861ae631d2",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "display diff",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price; // this is the price of the last trade\n\n}\n\n\nlet ticker = msg.symbol\nmsg.price = price\n\n//node.warn(\"Ticker: \" + ticker + \" Current Price: \" + price)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 180,
        "wires": [
            [
                "69230478336f73bb"
            ]
        ]
    },
    {
        "id": "69230478336f73bb",
        "type": "change",
        "z": "7c5cdd5d1ca7f264",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "polygon_trade",
                "pt": "flow",
                "to": "price",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e4ac6b272717815c",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "Market Orders",
        "info": "",
        "x": 110,
        "y": 540,
        "wires": []
    },
    {
        "id": "7208c3959c045e3e",
        "type": "polygon-trades-min-agg-rest",
        "z": "7c5cdd5d1ca7f264",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 640,
        "y": 380,
        "wires": [
            [
                "5d73b85390442361"
            ]
        ]
    },
    {
        "id": "87d78850f4c425c2",
        "type": "function-npm",
        "z": "7c5cdd5d1ca7f264",
        "name": "Crypto input to polygon_trades_min_agg",
        "func": "let symbol = 'X:ETHUSD';\nmsg.symbol = symbol\n\n\nlet interval = \"min\"\n//node.warn(\"Interval: \" +interval)\n\n\n// this gets the day before yesterday\nvar date = new Date();\ndate.setDate(date.getDate() - 0);\n\nconst fromDt = date\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nif (interval == \"min\")\n    {msg.timespan = 'minute';}\nelse\n{msg.timespan = 'day';}\n\n\n//node.warn(\"One min charts: \" +msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 380,
        "wires": [
            [
                "7208c3959c045e3e"
            ]
        ]
    },
    {
        "id": "5d73b85390442361",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "display diff",
        "func": "const prices = [];\nlet item = ''\nlet v = 0\nlet vw = 0\nlet o = 0\nlet c = 0\nlet h = 0\nlet l = 0\nlet t = 0\nlet n = 0\n\n\nfor (item of msg.payload.results) {\n    v = item.v; // this is the price of the last trade\n    vw = item.vw; // this is the price of the last trade\n    o = item.o; // this is the price of the last trade\n    c = item.c; // this is the price of the last trade\n    h = item.h; // this is the price of the last trade\n    l = item.l; // this is the price of the last trade\n    t = item.t; // this is the price of the last trade\n    n = item.n; // this is the price of the last trade\n\n}\n\n// Create a new Date object with the Unix time\n//const date = new Date(t * 1000);\nconst date = new Date(t);\n\n// Get the local time string using the Date object's methods\nconst localTimeString = date.toLocaleString();\n//node.warn(localTimeString)\n\nlet ticker = msg.symbol\n\nmsg.v = v\nmsg.vw = vw\nmsg.h = h\nmsg.l = l\nmsg.o = o\nmsg.c = c\nmsg.t = t\nmsg.n = n\nmsg.local = localTimeString\n\n//node.warn(\"Ticker: \" + ticker + \" Open: \" + msg.o+ \" Close: \" +msg.c+ \" High: \" +msg.h+ \" Low: \" +msg.l+ \" Volume: \" +msg.v)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 380,
        "wires": [
            [
                "3fc634529f994445"
            ]
        ]
    },
    {
        "id": "f80bd1cdc1d263c9",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "Get aggregate bars for a cryptocurrency pair for previous minute.",
        "info": "",
        "x": 450,
        "y": 340,
        "wires": []
    },
    {
        "id": "0b01a25e24b5219b",
        "type": "inject",
        "z": "7c5cdd5d1ca7f264",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "21021c3295ffe080"
            ]
        ]
    },
    {
        "id": "21021c3295ffe080",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "create Alpaca buy order ",
        "func": "let price = flow.get(\"polygon_trade\")\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = \"ETHUSD\" + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet temp = ''\n\n\n        temp = {\n            \"symbol\": 'ETH/USD',\n            \"qty\": 1,\n            \"side\": 'buy',\n            \"type\": 'market',\n            \"client_order_id\": client_order_id,\n //           \"limit_price\": price,  // limit orders only\n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n\n        msg.payload = temp\n        node.warn(msg.payload)\n        return msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "dea8493c2b16ebf8",
        "type": "split",
        "z": "7c5cdd5d1ca7f264",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 280,
        "wires": [
            [
                "ab3ed3766c7ed446"
            ]
        ]
    },
    {
        "id": "ab3ed3766c7ed446",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "create msg.vars for ETHUSD",
        "func": "let ticker = 'ETHUSD'\n\nif (msg.payload[\"symbol\"] == ticker ){\n    \n//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\n//node.warn(qty)\nmsg.qty = qty\nmsg.profit = unrealized_pl\nmsg.ticker = symbol\nmsg.price = current_price\n\n//node.warn(\"Ticker: \" + msg.ticker + \" Price: \" + msg.price + \" Profit: \" + msg.profit + \" Position: \" + msg.qty)\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 280,
        "wires": [
            [
                "64b488c82efd9aa2"
            ]
        ]
    },
    {
        "id": "b7a38c6ab478b184",
        "type": "inject",
        "z": "7c5cdd5d1ca7f264",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "157b4fe1ab4916bf"
            ]
        ]
    },
    {
        "id": "157b4fe1ab4916bf",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "create Alpaca sell order ",
        "func": "let price = flow.get(\"polygon_trade\")\nlet profit = flow.get(\"profit\")\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = \"ETHUSD\" + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet temp = ''\n\n\n        temp = {\n            \"symbol\": 'ETH/USD',\n            \"qty\": 0.9985,\n            \"side\": 'sell',\n            \"type\": 'market',\n            \"client_order_id\": client_order_id,\n  //          \"limit_price\": price,  // limit orders only\n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n\n        msg.payload = temp\n        node.warn(msg.payload)\n        return msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "43e23b61d43d3237",
        "type": "inject",
        "z": "7c5cdd5d1ca7f264",
        "name": "select from orders",
        "props": [
            {
                "p": "query",
                "v": "select * from orders order by created_at desc limit 5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "3c5faf651eea7dac"
            ]
        ]
    },
    {
        "id": "3c5faf651eea7dac",
        "type": "postgresql",
        "z": "7c5cdd5d1ca7f264",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "976fbef170ef2b44"
            ]
        ]
    },
    {
        "id": "976fbef170ef2b44",
        "type": "debug",
        "z": "7c5cdd5d1ca7f264",
        "name": "debug 377",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d187457589aa708a",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "create price_tests table",
        "func": "//msg.query = \"DROP TABLE price_tests\"\nmsg.query = \"create table IF NOT EXISTS price_tests (id VARCHAR(200), client_order_id VARCHAR(200), created_at VARCHAR(200), updated_at VARCHAR(200), submitted_at VARCHAR(200), filled_at VARCHAR(200), expired_at VARCHAR(200), canceled_at VARCHAR(200), failed_at VARCHAR(200), replaced_at VARCHAR(200), replaced_by VARCHAR(200), replaces VARCHAR(200), asset_id VARCHAR(200), symbol VARCHAR(40), asset_class VARCHAR(40), notional FLOAT, qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(40), order_type VARCHAR(40), type VARCHAR(40), side VARCHAR(40),  time_in_force VARCHAR(40), limit_price FLOAT, stop_price FLOAT, status VARCHAR(40), extended_hours BOOLEAN, legs BOOLEAN, trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(40), subtag VARCHAR(200), source VARCHAR(40), polygon_trade FLOAT, alpaca_price FLOAT)\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 80,
        "wires": [
            [
                "eac9d091519883a4"
            ]
        ]
    },
    {
        "id": "eac9d091519883a4",
        "type": "postgresql",
        "z": "7c5cdd5d1ca7f264",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 500,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "0f65cfa3db856b31",
        "type": "inject",
        "z": "7c5cdd5d1ca7f264",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "d187457589aa708a"
            ]
        ]
    },
    {
        "id": "64b488c82efd9aa2",
        "type": "change",
        "z": "7c5cdd5d1ca7f264",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "alpaca_price",
                "pt": "flow",
                "to": "price",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "profit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "qty",
                "pt": "flow",
                "to": "qty",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "3fc634529f994445",
        "type": "change",
        "z": "7c5cdd5d1ca7f264",
        "name": "store aggs",
        "rules": [
            {
                "t": "set",
                "p": "open",
                "pt": "flow",
                "to": "o",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "close",
                "pt": "flow",
                "to": "c",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "high",
                "pt": "flow",
                "to": "h",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "low",
                "pt": "flow",
                "to": "l",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "volume",
                "pt": "flow",
                "to": "v",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "vwap",
                "pt": "flow",
                "to": "vw",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "local",
                "pt": "flow",
                "to": "local",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "55106dafde7f76dd",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "display vars",
        "func": "let polygon_trade = flow.get(\"polygon_trade\")\nlet alpaca_price = flow.get(\"alpaca_price\")\nlet open = flow.get(\"open\")\nlet close = flow.get(\"close\")\nlet high = flow.get(\"high\")\nlet low = flow.get(\"low\")\nlet volume = flow.get(\"volume\")\nlet vwap = flow.get(\"vwap\")\nlet local = flow.get(\"local\")\n\nnode.warn(\"Time: \" +local+ \" Open: \" +open+ \" Close: \" +close+ \" High: \" +high+ \" Low: \" +low+ \" Volume: \" +volume+ \" VWAP: \" +vwap+ \" Polygon Last Trade: \" +polygon_trade+ \" Alpaca Price: \" +alpaca_price)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "7a01c90fecfdeda8",
        "type": "inject",
        "z": "7c5cdd5d1ca7f264",
        "name": "Display Flow Vars",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 460,
        "wires": [
            [
                "55106dafde7f76dd"
            ]
        ]
    },
    {
        "id": "89db83437f6cb8a8",
        "type": "inject",
        "z": "7c5cdd5d1ca7f264",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "f33385bd62fad1f3",
                "87d78850f4c425c2"
            ]
        ]
    },
    {
        "id": "64c2f8fa5ea72742",
        "type": "inject",
        "z": "7c5cdd5d1ca7f264",
        "name": "select from price_tests",
        "props": [
            {
                "p": "query",
                "v": "select * from price_tests order by created_at desc limit 5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1040,
        "wires": [
            [
                "2f83770d5222c15d"
            ]
        ]
    },
    {
        "id": "2f83770d5222c15d",
        "type": "postgresql",
        "z": "7c5cdd5d1ca7f264",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 1040,
        "wires": [
            [
                "2971ca1e6cecc6c6"
            ]
        ]
    },
    {
        "id": "2971ca1e6cecc6c6",
        "type": "debug",
        "z": "7c5cdd5d1ca7f264",
        "name": "debug 378",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1040,
        "wires": []
    },
    {
        "id": "c3617e6c0d474568",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "Limit Orders",
        "info": "",
        "x": 130,
        "y": 720,
        "wires": []
    },
    {
        "id": "1f785d26418bd710",
        "type": "inject",
        "z": "7c5cdd5d1ca7f264",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "2ec7a92dd42c6ebe"
            ]
        ]
    },
    {
        "id": "2ec7a92dd42c6ebe",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "create Alpaca buy order ",
        "func": "let price = flow.get(\"polygon_trade\")\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = \"ETHUSD\" + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet temp = ''\n\n\n        temp = {\n            \"symbol\": 'ETH/USD',\n            \"qty\": 1,\n            \"side\": 'buy',\n            \"type\": 'limit',\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  // limit orders only\n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n\n        msg.payload = temp\n        node.warn(msg.payload)\n        return msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "c8ef2c5b468c65b4",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "create Alpaca sell order ",
        "func": "let qty = flow.get(\"qty\")\n\n\nlet price = flow.get(\"polygon_trade\")\n\nlet profit = flow.get(\"profit\")\n//node.warn(\"Position: \" +qty)\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = \"ETHUSD\" + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet temp = ''\n\nif (profit > 5 && qty > 0){\n\n        temp = {\n            \"symbol\": 'ETH/USD',\n            \"qty\": qty,\n            \"side\": 'sell',\n            \"type\": 'limit',\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  // limit orders only\n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n\n        msg.payload = temp\n        node.warn(msg.payload)\n        return msg;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "c3503706b488a992",
        "type": "delay",
        "z": "7c5cdd5d1ca7f264",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 140,
        "y": 900,
        "wires": [
            [
                "c8ef2c5b468c65b4"
            ]
        ]
    },
    {
        "id": "2fc5a1376e944ab8",
        "type": "split",
        "z": "7c5cdd5d1ca7f264",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 860,
        "wires": [
            [
                "8c7c149852b65765"
            ]
        ]
    },
    {
        "id": "8c7c149852b65765",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "create msg.vars for QQQ",
        "func": "let ticker = 'ETHUSD'\nlet polygon_trade = flow.get(\"polygon_trade\")\n\nif (msg.payload[\"symbol\"] == ticker ){\n    \n//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\n//node.warn(qty)\nmsg.qty = qty\nmsg.profit = unrealized_pl\nmsg.ticker = symbol\nmsg.price = current_price\n\nnode.warn(\"Ticker: \" + msg.ticker + \" Price: \" + msg.price + \" Polygon Price: \" +polygon_trade+ \" Profit: \" + msg.profit + \" Position: \" + msg.qty)\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 860,
        "wires": [
            [
                "c38b1e79dc8b5836"
            ]
        ]
    },
    {
        "id": "c38b1e79dc8b5836",
        "type": "change",
        "z": "7c5cdd5d1ca7f264",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "alpaca_price",
                "pt": "flow",
                "to": "price",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "profit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "qty",
                "pt": "flow",
                "to": "qty",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "2d0289cd8029cbf4",
        "type": "inject",
        "z": "7c5cdd5d1ca7f264",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "f33385bd62fad1f3"
            ]
        ]
    },
    {
        "id": "b062d286f789eadf",
        "type": "inject",
        "z": "7c5cdd5d1ca7f264",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "fd819f934c27aaf4",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "Alpaca Order \"Paper\" Node",
        "info": "",
        "x": 560,
        "y": 580,
        "wires": []
    },
    {
        "id": "192c283e84bfb11a",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "Alpaca Positions \"Paper\" Node",
        "info": "",
        "x": 330,
        "y": 280,
        "wires": []
    },
    {
        "id": "bce88b7d09d87487",
        "type": "postgresql",
        "z": "7c5cdd5d1ca7f264",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "02446d5d018b2dc0",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "insert into price_tests table",
        "func": "let polygon_trade = flow.get(\"polygon_trade\")\nlet alpaca_price = flow.get(\"alpaca_price\")\nif ( alpaca_price == null){ alpaca_price = 0}\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif (source = null){ source = 0}\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into price_tests (id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours, polygon_trade, alpaca_price) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"','\" +polygon_trade+ \"','\" +alpaca_price+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 580,
        "wires": [
            [
                "bce88b7d09d87487"
            ]
        ]
    },
    {
        "id": "5b5aacd2335f8774",
        "type": "postgresql",
        "z": "7c5cdd5d1ca7f264",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "cfaf763d774ae319",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "insert into price_tests table",
        "func": "let polygon_trade = flow.get(\"polygon_trade\")\nlet alpaca_price = flow.get(\"alpaca_price\")\n\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif (source = null){ source = 0}\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into price_tests (id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours, polygon_trade, alpaca_price) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours + \"','\" + polygon_trade + \"','\" + alpaca_price + \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 620,
        "wires": [
            [
                "5b5aacd2335f8774"
            ]
        ]
    },
    {
        "id": "c088ca0358aa0f04",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "Alpaca Order \"Paper\" Node",
        "info": "",
        "x": 560,
        "y": 620,
        "wires": []
    },
    {
        "id": "5ba09c18d81087b0",
        "type": "postgresql",
        "z": "7c5cdd5d1ca7f264",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "db86575f44241b63",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "insert into price_tests table",
        "func": "let polygon_trade = flow.get(\"polygon_trade\")\nlet alpaca_price = flow.get(\"alpaca_price\")\nif ( alpaca_price == null){ alpaca_price = 0}\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif (source = null){ source = 0}\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into price_tests (id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours, polygon_trade, alpaca_price) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"','\" +polygon_trade+ \"','\" +alpaca_price+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 780,
        "wires": [
            [
                "5ba09c18d81087b0"
            ]
        ]
    },
    {
        "id": "d068859241910bd1",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "Alpaca Order \"Paper\" Node",
        "info": "",
        "x": 580,
        "y": 780,
        "wires": []
    },
    {
        "id": "bf9e07035ed4e7c5",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "Alpaca Positions \"Paper\" Node",
        "info": "",
        "x": 350,
        "y": 860,
        "wires": []
    },
    {
        "id": "ab0d3641b69d8718",
        "type": "postgresql",
        "z": "7c5cdd5d1ca7f264",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "85ab0f464a364192",
        "type": "function",
        "z": "7c5cdd5d1ca7f264",
        "name": "insert into price_tests table",
        "func": "let polygon_trade = flow.get(\"polygon_trade\")\nlet alpaca_price = flow.get(\"alpaca_price\")\n\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif (source = null){ source = 0}\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into price_tests (id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours, polygon_trade, alpaca_price) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours + \"','\" + polygon_trade + \"','\" + alpaca_price + \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 900,
        "wires": [
            [
                "ab0d3641b69d8718"
            ]
        ]
    },
    {
        "id": "552de4b20dbc7c87",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "Alpaca Order \"Paper\" Node",
        "info": "",
        "x": 600,
        "y": 900,
        "wires": []
    },
    {
        "id": "84b64bed423bf1c2",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "create price_tests table",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "d24fccb475637bd7",
        "type": "comment",
        "z": "7c5cdd5d1ca7f264",
        "name": "Copyright©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 890,
        "y": 20,
        "wires": []
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key New"
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]