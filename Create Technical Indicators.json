[
    {
        "id": "77057fa77f557fbe",
        "type": "tab",
        "label": "Technical Indicators 1Sec",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c48db12073603d5d",
        "type": "alpaca-data-trades",
        "z": "77057fa77f557fbe",
        "conf": "b7eae41092ec274e",
        "symbol": "",
        "start": "",
        "end": "",
        "limit": "",
        "feed": "",
        "name": "",
        "x": 440,
        "y": 160,
        "wires": [
            [
                "9106bbe48ec53aa2"
            ]
        ]
    },
    {
        "id": "ba6e46725659a796",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "define range values",
        "func": "var nowDate = new Date();\n//var oneMinAgo = new Date(nowDate.setMinutes(nowDate.getMinutes() - 1));\n//msg.start = oneMinAgo.toISOString();\n\nvar oneSecAgo = new Date(nowDate.setSeconds(nowDate.getSeconds() - 1));\nmsg.start = oneSecAgo.toISOString();\n\n//var oneHourAgo = new Date(nowDate.setHours(nowDate.getHours() - 2));\n//msg.start = oneHourAgo.toISOString();\n\n\n\nvar nowDate = new Date();\nvar zeroMinAgo = new Date(nowDate.setMinutes(nowDate.getMinutes() - 0));\n//node.warn(\"End: \" +oneHourAgo)\nmsg.end = zeroMinAgo.toISOString();\n\nvar date = new Date();\nlet wkday = date.toString();\nwkday = wkday.substring(0, 3);\n//node.warn(wkday)\n\nlet ux = (Date.now()) / 1000\nmsg.ux = ux.toFixed(0)\n\n//msg.start = '2023-10-20T10:00:00Z'\n//msg.end   = '2023-10-20T10:10:00Z'\nmsg.symbol = 'AAPL'\nmsg.feed = 'sip'\nmsg.ltime = msg.end\nmsg.longnum = 24\nmsg.shortnum = 12\nmsg.limit = 1\n//node.warn(\"Unixtime: \" +msg.ux+ \" Day: \" + wkday + \" Symbol: \" + msg.symbol + \" From: \" + msg.start + \" To: \" + msg.end + \" Feed: \" + msg.feed)\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 160,
        "wires": [
            [
                "c48db12073603d5d"
            ]
        ]
    },
    {
        "id": "c68ed144b8ddc523",
        "type": "comment",
        "z": "77057fa77f557fbe",
        "name": "Run every second and store in table",
        "info": "",
        "x": 180,
        "y": 40,
        "wires": []
    },
    {
        "id": "4c4b56c89a800217",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "728692fe580e9287",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 460,
        "y": 220,
        "wires": [
            [
                "5961d6e82a1b83df"
            ]
        ]
    },
    {
        "id": "5961d6e82a1b83df",
        "type": "split",
        "z": "77057fa77f557fbe",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 220,
        "wires": [
            [
                "72fb02a765848331"
            ]
        ]
    },
    {
        "id": "72fb02a765848331",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "update lastprice",
        "func": "msg.lastprice = msg.payload[\"price\"]\nmsg.change = msg.lastprice - msg.price\n\nif ( msg.change == null){ msg.change = 0}\nif (isNaN(msg.change)) msg.change = 0;\n\n//node.warn(\"Unixtime: \" +msg.unixtime+ \" Old Unixtime: \" +msg.lastux+ \" Price: \" +msg.price+ \" Old Price: \" +msg.lastprice+ \" Change: \" +msg.change)\nmsg.query = \"update onesecprice set lastprice = \" +msg.lastprice+ \", change = \" +msg.change+ \" where unixtime = \" +msg.ux+ \";\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 220,
        "wires": [
            [
                "8df57840ae201568"
            ]
        ]
    },
    {
        "id": "d6b2de2f90179d2b",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "trading interval  M-F 6:00 AM - 8 PM",
        "func": "let d = new Date();\n\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay(); // day of the week\nlet sec = d.getSeconds();\n\n//node.warn(\"Date: \" +d+ \" Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 10:30 am\n// if ((day > 0 && day < 6 && hour > 9 && hour < 11) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this will run during trading 9:30 - 4:00 pm\n//  if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n\n// if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n// this runs 6 am - 8 pm\nif (day > 0 && day < 6 && hour > 5 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            [
                "ba6e46725659a796"
            ]
        ]
    },
    {
        "id": "2b9adecccb1def4c",
        "type": "inject",
        "z": "77057fa77f557fbe",
        "name": "GO",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "d6b2de2f90179d2b"
            ]
        ]
    },
    {
        "id": "9106bbe48ec53aa2",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "insert into onesecprice",
        "func": "msg.len = msg.payload.results.length\n//node.warn(msg.len)\n\nlet sql = []\n\nfor (var i = 0; i < msg.len; i++) {\n    msg.price = msg.payload.results[i][\"price\"]\n    msg.trf_unixtime = msg.payload.results[i][\"trf_timestamp\"] / 1000\n    msg.trf_unixtime = msg.trf_unixtime.toFixed(0)\n  \n    msg.datetime = msg.unixtime\n    \n//    node.warn(msg.price)\n    sql += \"insert into onesecprice (unixtime,  currentdt, trf_unixtime, trf_dt, price) values (\" + msg.ux + \",TO_TIMESTAMP(\" + msg.ux + \"),\" +msg.trf_unixtime+ \",TO_TIMESTAMP(\" + msg.trf_unixtime + \"),\" + msg.price + \") ON CONFLICT DO NOTHING;\\n\"\n    //node.warn(sql)\n\n}    \n\nlet len = sql.length;\nif (len > 0){\nmsg.query = sql\n//node.warn(msg.query)\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            [
                "4c4b56c89a800217",
                "ed22bdf3a4770246",
                "69b0272f516bbe61"
            ]
        ]
    },
    {
        "id": "9ddbdbc3a0f98393",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "select",
        "func": "msg.lastux = msg.ux - 1\nmsg.query = \"select * from onesecprice where unixtime = \" +msg.lastux+ \";\"\n//msg.pricequery = \"select * from onesecprice where unixtime > \" +msg.lastux+ \" order by unixtime limit 1 offset \" +msg.x+ \";\"\n//msg.lastpricequery = \"select * from onesecprice where unixtime > \" + msg.lastux + \" order by unixtime limit 1 offset \" + msg.y + \";\"\n//node.warn(msg.lastpricequery)\n//node.warn(msg.pricequery)\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 220,
        "wires": [
            [
                "728692fe580e9287"
            ]
        ]
    },
    {
        "id": "8df57840ae201568",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 220,
        "wires": [
            [
                "8323154f787e6c7a"
            ]
        ]
    },
    {
        "id": "8323154f787e6c7a",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "update pctchange",
        "func": "msg.query = \"update onesecprice set pctchange = change / price\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 280,
        "wires": [
            [
                "5d4a60324cce98ef"
            ]
        ]
    },
    {
        "id": "5d4a60324cce98ef",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 280,
        "wires": [
            [
                "61d6178bc3161bd7"
            ]
        ]
    },
    {
        "id": "61d6178bc3161bd7",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "delete bad prices",
        "func": "msg.query = \"DELETE from onesecprice where lastprice is null\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 280,
        "wires": [
            [
                "e0226743d3db7f8e"
            ]
        ]
    },
    {
        "id": "e0226743d3db7f8e",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 760,
        "y": 280,
        "wires": [
            [
                "d43a92f6479b8736"
            ]
        ]
    },
    {
        "id": "d6734826d4b40866",
        "type": "comment",
        "z": "77057fa77f557fbe",
        "name": "Calculate RSI values",
        "info": "",
        "x": 130,
        "y": 560,
        "wires": []
    },
    {
        "id": "fd701ba688fef735",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "get pctchanges",
        "func": "msg.ux = flow.get(\"ux\")\nmsg.symbol = 'AAPL'\n\nmsg.window = 14\nmsg.profit = 25\n\nmsg.query = \"select * from onesecprice where unixtime < \" +msg.ux+ \" order by unixtime desc limit \" +msg.window+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 620,
        "wires": [
            [
                "80c55d7a438a1757"
            ]
        ]
    },
    {
        "id": "80c55d7a438a1757",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 760,
        "y": 620,
        "wires": [
            [
                "800fd9ebac5b5f3c"
            ]
        ]
    },
    {
        "id": "800fd9ebac5b5f3c",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "create array",
        "func": "//node.warn(msg.payload)\n\n\nlet changes = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    changes.push( msg.payload[i][\"pctchange\"])\n}\n\nmsg.changes = changes\n//node.warn(changes)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 700,
        "wires": [
            [
                "72ee79be82555c62"
            ]
        ]
    },
    {
        "id": "72ee79be82555c62",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "RSI Calculations",
        "func": "let changes = msg.changes\n\nconst poschanges = changes.filter((change) => change>0);\n//node.warn(poschanges)\n\nconst negchanges = changes.filter((change) => change < 0);\n//node.warn(negchanges)\n\n\n//var newchange = JSON.parse(\"[\"+msg.change+\"]\");\n//node.warn(prices)\n\nmsg.avgpos = (eval(poschanges.join('+')) / poschanges.length) \n//node.warn(msg.avgpos)\n\nmsg.avgneg = (eval(negchanges.join('+')) / negchanges.length)\nmsg.avgneg = msg.avgneg * -1\n//node.warn(msg.avgneg)\n\n\nlet div = msg.avgpos / msg.avgneg\nlet div1 = 1 + div\nlet div2 = 100 / div1\nlet rsi = 100 - div2\nmsg.rsi = rsi.toFixed(0)\n\nif ( msg.avgpos == null){ msg.avgpos = 0}\nif ( msg.avgneg == null){ msg.avgneg = 0}\nif ( msg.rsi == null){ msg.rsi = 50}\n\n\n//node.warn(\"Avg Gain: \" +msg.avgpos+ \" Avg Loss: \" +msg.avgneg+ \"Div: \" +div+ \" Div1: \" +div1+ \" Div2: \" +div2)\n\n//msg.query = \"insert into rsi (symbol, datetime, avgpos, avgneg, rsi, unixtime) values ('\" + msg.symbol + \"',TO_TIMESTAMP(\" + msg.ux + \"),\" + msg.avgpos + \",\" + msg.avgneg + \",\" +msg.rsi+ \",\" +msg.ux+ \");\"\nmsg.query = \"update onesecprice set rsi = \" +msg.rsi+ \" where unixtime = \" +msg.ux+ \";\"\n//node.warn(msg.query)\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 700,
        "wires": [
            [
                "be4f48d68fb144ad"
            ]
        ]
    },
    {
        "id": "be4f48d68fb144ad",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "8df0c73aca8968c9",
        "type": "inject",
        "z": "77057fa77f557fbe",
        "name": "GO",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "bf66bcf86ee02d7b"
            ]
        ]
    },
    {
        "id": "bf66bcf86ee02d7b",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "trading interval  M-F 6:00 AM - 8 PM",
        "func": "let d = new Date();\n\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay(); // day of the week\nlet sec = d.getSeconds();\n\n//node.warn(\"Date: \" +d+ \" Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 10:30 am\n// if ((day > 0 && day < 6 && hour > 9 && hour < 11) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this will run during trading 9:30 - 4:00 pm\n//  if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n\n// if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n// this runs 6 am - 8 pm\nif (day > 0 && day < 6 && hour > 5 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 620,
        "wires": [
            [
                "fd701ba688fef735"
            ]
        ]
    },
    {
        "id": "f45aa15ed1099fc4",
        "type": "comment",
        "z": "77057fa77f557fbe",
        "name": "Calculate MACD",
        "info": "",
        "x": 120,
        "y": 780,
        "wires": []
    },
    {
        "id": "d8a620999964602e",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "create onesecprice table",
        "func": "msg.query = \"CREATE TABLE IF NOT EXISTS onesecprice (unixtime BIGINT PRIMARY KEY,currentdt VARCHAR(100), trf_unixtime BIGINT, trf_dt VARCHAR(100),price FLOAT,lastprice FLOAT,change FLOAT,pctchange FLOAT,rsi INT, macd FLOAT,signal FLOAT,bbstd FLOAT, bbul FLOAT,bbll FLOAT, avg FLOAT);\"\n//msg.query = \"drop table onesecprice\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1360,
        "wires": [
            [
                "e3a457045862d250"
            ]
        ]
    },
    {
        "id": "79385f95291d9711",
        "type": "inject",
        "z": "77057fa77f557fbe",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1360,
        "wires": [
            [
                "d8a620999964602e"
            ]
        ]
    },
    {
        "id": "e3a457045862d250",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 500,
        "y": 1360,
        "wires": [
            [
                "554c496be07a63e6"
            ]
        ]
    },
    {
        "id": "554c496be07a63e6",
        "type": "debug",
        "z": "77057fa77f557fbe",
        "name": "debug 890",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1360,
        "wires": []
    },
    {
        "id": "16e6aa8e1c15dcd5",
        "type": "comment",
        "z": "77057fa77f557fbe",
        "name": "Create a storage tables",
        "info": "",
        "x": 140,
        "y": 1300,
        "wires": []
    },
    {
        "id": "72be85788a8c9154",
        "type": "inject",
        "z": "77057fa77f557fbe",
        "name": "Every 1 sec",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "f6ba65d314ffad2b",
                "fdf5a7f18531a4bf",
                "6397a3ed0d6df864"
            ]
        ]
    },
    {
        "id": "7e0c32211d1f12f1",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "get prices",
        "func": "let ux = (Date.now()) / 1000\nmsg.ux = ux.toFixed(0)\nmsg.symbol = 'AAPL'\n\nmsg.window = 26 // long window\n\nmsg.query = \"select * from onesecprice order by unixtime desc limit \" +msg.window+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 840,
        "wires": [
            [
                "8f2f11f4c5817e63"
            ]
        ]
    },
    {
        "id": "8f2f11f4c5817e63",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 840,
        "wires": [
            [
                "cc8da73987d47043"
            ]
        ]
    },
    {
        "id": "cc8da73987d47043",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "create array",
        "func": "//node.warn(msg.payload)\n\n\nlet prices = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    prices.push( msg.payload[i][\"price\"])\n}\n\nmsg.prices = prices\n//node.warn(prices)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 840,
        "wires": [
            [
                "a13ec4f2f2e3f3c1"
            ]
        ]
    },
    {
        "id": "a13ec4f2f2e3f3c1",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "Average",
        "func": "let price = msg.prices\nprice = price.slice(0, -1);\n//node.warn(price)\n\nvar prices = JSON.parse(\"[\"+price+\"]\");\n//node.warn(prices)\n\nmsg.avg = (eval(prices.join('+')) / prices.length) \n//node.warn(\"LongEMA: \" +msg.avg)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 840,
        "wires": [
            [
                "f6067194237db390"
            ]
        ]
    },
    {
        "id": "f6067194237db390",
        "type": "change",
        "z": "77057fa77f557fbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "longEMA",
                "pt": "flow",
                "to": "avg",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ux",
                "pt": "flow",
                "to": "ux",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "symbol",
                "pt": "flow",
                "to": "symbol",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "5787230cb168c8e8",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "get prices",
        "func": "let ux = (Date.now()) / 1000\nmsg.ux = ux.toFixed(0)\nmsg.symbol = 'AAPL'\n\nmsg.window = 12 // short window\n\nmsg.query = \"select * from onesecprice order by unixtime desc limit \" +msg.window+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 900,
        "wires": [
            [
                "b4a72b49591c6b99"
            ]
        ]
    },
    {
        "id": "b4a72b49591c6b99",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 900,
        "wires": [
            [
                "51955cae269687eb"
            ]
        ]
    },
    {
        "id": "51955cae269687eb",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "create array",
        "func": "//node.warn(msg.payload)\n\n\nlet prices = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    prices.push( msg.payload[i][\"price\"])\n}\n\nmsg.prices = prices\n//node.warn(prices)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 900,
        "wires": [
            [
                "1ed8ac417b7b5430"
            ]
        ]
    },
    {
        "id": "1ed8ac417b7b5430",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "Average",
        "func": "let price = msg.prices\nprice = price.slice(0, -1);\n//node.warn(price)\n\nvar prices = JSON.parse(\"[\"+price+\"]\");\n//node.warn(prices)\n\nmsg.avg = (eval(prices.join('+')) / prices.length) \n//node.warn(\"ShortEMA: \" +msg.avg)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 900,
        "wires": [
            [
                "138aa95e7b108a08"
            ]
        ]
    },
    {
        "id": "138aa95e7b108a08",
        "type": "change",
        "z": "77057fa77f557fbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "shortEMA",
                "pt": "flow",
                "to": "avg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "cb62cd79ebd5228f",
        "type": "delay",
        "z": "77057fa77f557fbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 900,
        "wires": [
            [
                "5787230cb168c8e8"
            ]
        ]
    },
    {
        "id": "9164a7aa00566fd0",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "09e3063b178281fd",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "Store values in macd table",
        "func": "msg.symbol = flow.get(\"symbol\")\nmsg.ux = flow.get(\"ux\")\nmsg.longEMA = flow.get(\"longEMA\")\nmsg.shortEMA = flow.get(\"shortEMA\")\nlet signal = msg.longEMA - msg.shortEMA\nmsg.signal = signal.toFixed(3)\n\nmsg.query = \"insert into macd (symbol, longux, datetime, longEMA, shortEMA, signal) values ('\" + msg.symbol + \"',\" + msg.ux + \", TO_TIMESTAMP(\"+ msg.ux +\") ,\" + msg.longEMA + \",\" + msg.shortEMA + \",\" + msg.signal+ \") ON CONFLICT DO NOTHING;\"\n//node.warn(msg.query)    \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 960,
        "wires": [
            [
                "9164a7aa00566fd0"
            ]
        ]
    },
    {
        "id": "6d3b26ab2e1a4c67",
        "type": "delay",
        "z": "77057fa77f557fbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 960,
        "wires": [
            [
                "09e3063b178281fd"
            ]
        ]
    },
    {
        "id": "f6ba65d314ffad2b",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "trading interval  M-F 6:00 AM - 8 PM",
        "func": "let d = new Date();\n\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay(); // day of the week\nlet sec = d.getSeconds();\n\n//node.warn(\"Date: \" +d+ \" Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 10:30 am\n// if ((day > 0 && day < 6 && hour > 9 && hour < 11) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this will run during trading 9:30 - 4:00 pm\n//  if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n\n// if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n// this runs 6 am - 8 pm\nif (day > 0 && day < 6 && hour > 5 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 840,
        "wires": [
            [
                "7e0c32211d1f12f1",
                "cb62cd79ebd5228f",
                "6d3b26ab2e1a4c67"
            ]
        ]
    },
    {
        "id": "be531ca583124c52",
        "type": "comment",
        "z": "77057fa77f557fbe",
        "name": "Run every second and store in table",
        "info": "",
        "x": 520,
        "y": 1080,
        "wires": []
    },
    {
        "id": "655692fb86b801c9",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "calculate bands",
        "func": "// msg.avg is the moving average price for the past 20 seconds\n\nmsg.avg = flow.get(\"avg\") \nmsg.std = flow.get(\"std\") * 2\nmsg.avg = Number(msg.avg)\nmsg.std = Number(msg.std)\n//node.warn(\"Avg: \" +msg.avg+ \" Std: \" +msg.std)\n\nmsg.ux = flow.get(\"ux\")\nmsg.bbul = msg.avg + msg.std\nmsg.bbll = msg.avg - msg.std \nmsg.ux = flow.get(\"ux\")\nmsg.symbol = flow.get(\"symbol\")\n\nmsg.query = \"update onesecprice set bbul = \" +msg.bbul+ \", bbll = \" +msg.bbll+ \" where unixtime = \" + msg.ux + \";\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1220,
        "wires": [
            [
                "609c571e5a0c4b41"
            ]
        ]
    },
    {
        "id": "4246e731dff3af32",
        "type": "inject",
        "z": "77057fa77f557fbe",
        "name": "GO",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "a06588cf3280a447",
                "7308e75989910ee9"
            ]
        ]
    },
    {
        "id": "4734b7ab7afb3273",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "define range values",
        "func": "let ux = (Date.now()) / 1000\nmsg.ux = ux.toFixed(0)\n\nmsg.symbol = 'AAPL'\nmsg.feed = 'sip'\nmsg.ltime = msg.end\nmsg.window = 20\n\n//node.warn(\"Unixtime: \" +msg.ux+ \" Day: \" + wkday + \" Symbol: \" + msg.symbol + \" From: \" + msg.start + \" To: \" + msg.end + \" Feed: \" + msg.feed)\n\nmsg.query = \"select * from onesecprice order by unixtime desc limit \" +msg.window+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1140,
        "wires": [
            [
                "f68058ef80e8c819"
            ]
        ]
    },
    {
        "id": "f68058ef80e8c819",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 1140,
        "wires": [
            [
                "705861216d9c3ad7"
            ]
        ]
    },
    {
        "id": "705861216d9c3ad7",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "create array",
        "func": "//node.warn(msg.payload)\n\n\nlet prices = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    prices.push( msg.payload[i][\"price\"])\n}\n\nmsg.prices = prices\n//node.warn(prices)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1140,
        "wires": [
            [
                "4a56998d08357577",
                "a8266c4fad0a11c7"
            ]
        ]
    },
    {
        "id": "a8266c4fad0a11c7",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "Average",
        "func": "let price = msg.prices\nprice = price.slice(0, -1);\n//node.warn(price)\n\nvar prices = JSON.parse(\"[\"+price+\"]\");\n//node.warn(prices)\n\nmsg.avg = (eval(prices.join('+')) / prices.length) \n//node.warn(\"Average: \" +msg.avg)\nmsg.query = \"update onesecprice set avg = \" +msg.avg+ \" where unixtime = \" + msg.ux + \";\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1180,
        "wires": [
            [
                "5c8c7926e526d85e",
                "65e785a3a05816f5"
            ]
        ]
    },
    {
        "id": "5c8c7926e526d85e",
        "type": "change",
        "z": "77057fa77f557fbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "avg",
                "pt": "flow",
                "to": "avg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "4a56998d08357577",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "Std dev",
        "func": "let price = msg.prices\nprice = price.slice(0, -1);\n//node.warn(price)\nvar prices = JSON.parse(\"[\"+price+\"]\");\n//node.warn(prices)\n\n// Javascript program to calculate the \n// standard deviation of an array\nfunction StandardDeviation(arr) {\n \n    // Creating the mean with Array.reduce\n    let mean = arr.reduce((acc, curr) => {\n        return acc + curr\n    }, 0) / arr.length;\n \n    // Assigning (value - mean) ^ 2 to\n    // every array item\n    arr = arr.map((k) => {\n        return (k - mean) ** 2\n    });\n \n    // Calculating the sum of updated array \n    let sum = arr.reduce((acc, curr) => acc + curr, 0);\n \n    // Calculating the variance\n    let variance = sum / arr.length\n \n    // Returning the standard deviation\n    return Math.sqrt(sum / arr.length)\n}\n\nmsg.std = (StandardDeviation(prices))\n//node.warn(\"Std: \" +msg.std)\nmsg.query = \"update onesecprice set bbstd = \" +msg.std+ \" where unixtime = \" +msg.ux+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1120,
        "wires": [
            [
                "8d10a9d6f6b183a4",
                "76c480e109daadc3"
            ]
        ]
    },
    {
        "id": "8d10a9d6f6b183a4",
        "type": "change",
        "z": "77057fa77f557fbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "std",
                "pt": "flow",
                "to": "std",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "symbol",
                "pt": "flow",
                "to": "symbol",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ux",
                "pt": "flow",
                "to": "ux",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "7308e75989910ee9",
        "type": "delay",
        "z": "77057fa77f557fbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 270,
        "y": 1220,
        "wires": [
            [
                "655692fb86b801c9"
            ]
        ]
    },
    {
        "id": "609c571e5a0c4b41",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "a06588cf3280a447",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "trading interval  M-F 6:00 AM - 8 PM",
        "func": "let d = new Date();\n\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay(); // day of the week\nlet sec = d.getSeconds();\n\n//node.warn(\"Date: \" +d+ \" Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 10:30 am\n// if ((day > 0 && day < 6 && hour > 9 && hour < 11) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this will run during trading 9:30 - 4:00 pm\n//  if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n\n// if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n// this runs 6 am - 8 pm\nif (day > 0 && day < 6 && hour > 5 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1140,
        "wires": [
            [
                "4734b7ab7afb3273"
            ]
        ]
    },
    {
        "id": "0472e96a4c678c72",
        "type": "comment",
        "z": "77057fa77f557fbe",
        "name": "Calculate upper and low Bollinger Bands",
        "info": "",
        "x": 180,
        "y": 1080,
        "wires": []
    },
    {
        "id": "69b0272f516bbe61",
        "type": "delay",
        "z": "77057fa77f557fbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 150,
        "y": 220,
        "wires": [
            [
                "9ddbdbc3a0f98393"
            ]
        ]
    },
    {
        "id": "d43a92f6479b8736",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "delete bad prices",
        "func": "msg.query = \"DELETE from onesecprice where pctchange > 1 or pctchange < -1\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 280,
        "wires": [
            [
                "7280e4a5c923910d"
            ]
        ]
    },
    {
        "id": "7280e4a5c923910d",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1100,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "8dbef0885e3087f7",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "5339daa2d08e6fab",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "Store values in macd table",
        "func": "msg.symbol = flow.get(\"symbol\")\nmsg.ux = flow.get(\"ux\") - 1\nmsg.longEMA = flow.get(\"longEMA\")\nmsg.shortEMA = flow.get(\"shortEMA\")\nlet signal = msg.longEMA - msg.shortEMA\nmsg.signal = signal.toFixed(3)\nmsg.macd = msg.shortEMA - msg.longEMA\n\n//msg.query = \"update macd set macd = shortEMA - longEMA;\"\nmsg.query = \"update onesecprice set macd = \" +msg.macd+ \" where unixtime = \" +msg.ux+ \";\"\n//node.warn(msg.query)    \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1000,
        "wires": [
            [
                "8dbef0885e3087f7"
            ]
        ]
    },
    {
        "id": "fdf5a7f18531a4bf",
        "type": "delay",
        "z": "77057fa77f557fbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1000,
        "wires": [
            [
                "5339daa2d08e6fab"
            ]
        ]
    },
    {
        "id": "164d3275ba6129e8",
        "type": "inject",
        "z": "77057fa77f557fbe",
        "name": "Display Flow Vars",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 40,
        "wires": [
            [
                "ac82e86fda5b7d92"
            ]
        ]
    },
    {
        "id": "87dc694b5b4cb805",
        "type": "debug",
        "z": "77057fa77f557fbe",
        "name": "debug 895",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 40,
        "wires": []
    },
    {
        "id": "ac82e86fda5b7d92",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "display flow vars",
        "func": "msg.std = flow.get(\"std\") \nnode.warn(\"Std: \" +msg.std)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 40,
        "wires": [
            [
                "87dc694b5b4cb805"
            ]
        ]
    },
    {
        "id": "76c480e109daadc3",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1280,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "65e785a3a05816f5",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1280,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "2292275acd8ad6a3",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 1040,
        "wires": [
            [
                "2965873bd070bb8b"
            ]
        ]
    },
    {
        "id": "507adef33208716c",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "signal line",
        "func": "let signalwindow = 9\nmsg.ux = flow.get(\"ux\")\nmsg.query = \"select * from onesecprice where unixtime < \" +msg.ux+ \" and macd is not null order by unixtime desc limit \" +signalwindow+ \";\"\n//node.warn(msg.query)    \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "2292275acd8ad6a3"
            ]
        ]
    },
    {
        "id": "6397a3ed0d6df864",
        "type": "delay",
        "z": "77057fa77f557fbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1040,
        "wires": [
            [
                "507adef33208716c"
            ]
        ]
    },
    {
        "id": "2965873bd070bb8b",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "create array",
        "func": "//node.warn(msg.payload)\n\n\nlet prices = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    prices.push( msg.payload[i][\"macd\"])\n}\n\nmsg.prices = prices\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1040,
        "wires": [
            [
                "895c826bae5d179c"
            ]
        ]
    },
    {
        "id": "895c826bae5d179c",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "Average",
        "func": "let price = msg.prices\nprice = price.slice(0, -1);\n//node.warn(price)\n\nvar prices = JSON.parse(\"[\"+price+\"]\");\n//node.warn(prices)\n\nmsg.avg = (eval(prices.join('+')) / prices.length) \n//node.warn(\"Signal: \" +msg.avg)\nmsg.query = \"update onesecprice set signal = \" +msg.avg+ \" where unixtime = \" +msg.ux+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1040,
        "wires": [
            [
                "1cf9915ce5091136"
            ]
        ]
    },
    {
        "id": "1cf9915ce5091136",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "ed22bdf3a4770246",
        "type": "change",
        "z": "77057fa77f557fbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ux",
                "pt": "flow",
                "to": "ux",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "ec4d9b44c93cbdd0",
        "type": "comment",
        "z": "77057fa77f557fbe",
        "name": "Download csv file",
        "info": "",
        "x": 120,
        "y": 340,
        "wires": []
    },
    {
        "id": "4ad4c52b57e4a28f",
        "type": "http in",
        "z": "77057fa77f557fbe",
        "name": "/api/download_onesecprice",
        "url": "/api/download_onesecprice",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "34616cbca8a4784a"
            ]
        ]
    },
    {
        "id": "54b19a89bbcda7c3",
        "type": "http response",
        "z": "77057fa77f557fbe",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 930,
        "y": 400,
        "wires": []
    },
    {
        "id": "34616cbca8a4784a",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "export query",
        "func": "//msg.query = \"select * from onesecprice order by unixtime limit 10000 offset 20000\"\nmsg.query = \"select * from onesecprice order by unixtime\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "1063c3e17aa0650d"
            ]
        ]
    },
    {
        "id": "0de636a4b7b209d7",
        "type": "csv",
        "z": "77057fa77f557fbe",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 650,
        "y": 400,
        "wires": [
            [
                "3289d89d47b65f69"
            ]
        ]
    },
    {
        "id": "3289d89d47b65f69",
        "type": "file",
        "z": "77057fa77f557fbe",
        "name": "write report",
        "filename": "./data/store/rsi.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 400,
        "wires": [
            [
                "54b19a89bbcda7c3"
            ]
        ]
    },
    {
        "id": "1063c3e17aa0650d",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 400,
        "wires": [
            [
                "0de636a4b7b209d7"
            ]
        ]
    },
    {
        "id": "ba994aa74f7de62a",
        "type": "inject",
        "z": "77057fa77f557fbe",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "3e48a859108628a5"
            ]
        ]
    },
    {
        "id": "3e48a859108628a5",
        "type": "function",
        "z": "77057fa77f557fbe",
        "name": "Display onesecprice",
        "func": "//msg.query = \"select * from onesecprice where rsi > 0 order by unixtime\"\nmsg.query = \"select * from onesecprice order by unixtime desc\"\n//msg.query = \"alter table onesecprice add column currentdt VARCHAR(100), add column trf_unixgtime BIGINT\"\nmsg.query = \"truncate table onesecprice\"\n//msg.query = \"drop table onesecprice\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 480,
        "wires": [
            [
                "4980990406de4be8"
            ]
        ]
    },
    {
        "id": "4980990406de4be8",
        "type": "postgresql",
        "z": "77057fa77f557fbe",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 480,
        "wires": [
            [
                "224f244e64acd2de"
            ]
        ]
    },
    {
        "id": "224f244e64acd2de",
        "type": "debug",
        "z": "77057fa77f557fbe",
        "name": "debug 887",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 480,
        "wires": []
    },
    {
        "id": "b7eae41092ec274e",
        "type": "alpaca-account",
        "name": "Live",
        "keyId": "PKW9OB4NY7PL2KAZ696T",
        "paper": false
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]