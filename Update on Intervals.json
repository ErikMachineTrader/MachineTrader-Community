[
    {
        "id": "0e823ae58e373fe9",
        "type": "tab",
        "label": "Update on Intervals",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c6e4cf513dee588a",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "b18dc685f06496c5",
                "6164730a41108718"
            ]
        ]
    },
    {
        "id": "b18dc685f06496c5",
        "type": "alpaca-account-query",
        "z": "0e823ae58e373fe9",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "a99beb48be97131a"
            ]
        ]
    },
    {
        "id": "a99beb48be97131a",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "Insert into live balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'live'\nbalance = parseInt(balance)\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 140,
        "wires": [
            [
                "4fca636d088ab985"
            ]
        ]
    },
    {
        "id": "5dafed76868d7643",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Daily at Midnight",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "33288dda2cfd1dd8",
                "ba67a91e91444440"
            ]
        ]
    },
    {
        "id": "33288dda2cfd1dd8",
        "type": "alpaca-account-query",
        "z": "0e823ae58e373fe9",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "492c7ccb82b3a0e9"
            ]
        ]
    },
    {
        "id": "776da0ab19d4516e",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Store account balances to sqlite tables",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "6164730a41108718",
        "type": "alpaca-account-query",
        "z": "0e823ae58e373fe9",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 180,
        "wires": [
            [
                "76735fdbcdc9e29c"
            ]
        ]
    },
    {
        "id": "ba67a91e91444440",
        "type": "alpaca-account-query",
        "z": "0e823ae58e373fe9",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 260,
        "wires": [
            [
                "eb7e3ab3698d1f61"
            ]
        ]
    },
    {
        "id": "76735fdbcdc9e29c",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "Insert into paper balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n//node.warn(Number.isInteger(balance))\nbalance = parseInt(balance)\n\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "cf757e84c5b9cd1c"
            ]
        ]
    },
    {
        "id": "eb7e3ab3698d1f61",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "344a85227fcd0130"
            ]
        ]
    },
    {
        "id": "4fca636d088ab985",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "cf757e84c5b9cd1c",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "56ec975e9dae4a0e",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "344a85227fcd0130",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "492c7ccb82b3a0e9",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "56ec975e9dae4a0e"
            ]
        ]
    },
    {
        "id": "eef09d290bf86e57",
        "type": "polygon-last-trade-v3",
        "z": "0e823ae58e373fe9",
        "conf": "2b5801c73dcc1d17",
        "symbol": "",
        "x": 900,
        "y": 420,
        "wires": [
            [
                "34c295f3d473f2fc"
            ]
        ]
    },
    {
        "id": "072567c10c83a663",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select * from markets",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "1443e2cfd96bd07b"
            ]
        ]
    },
    {
        "id": "34c295f3d473f2fc",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n    //node.warn(\"Price: \" +price)\n}\n\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "9fb33919ffc77a9e"
            ]
        ]
    },
    {
        "id": "ab2638107a0e77ef",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "75581050c7c7f50f"
            ]
        ]
    },
    {
        "id": "75581050c7c7f50f",
        "type": "function-npm",
        "z": "0e823ae58e373fe9",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 420,
        "wires": [
            [
                "eef09d290bf86e57"
            ]
        ]
    },
    {
        "id": "c69fd7c3373669e2",
        "type": "polygon-last-trade-v3",
        "z": "0e823ae58e373fe9",
        "conf": "2b5801c73dcc1d17",
        "symbol": "",
        "x": 900,
        "y": 460,
        "wires": [
            [
                "b52e3c72b72daec7"
            ]
        ]
    },
    {
        "id": "6fc763397a0c077a",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "f54dd29872df1bc3"
            ]
        ]
    },
    {
        "id": "b52e3c72b72daec7",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "de589cbdeed48c05"
            ]
        ]
    },
    {
        "id": "361d1b28f3cf19ab",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "c9d5397f053d512b"
            ]
        ]
    },
    {
        "id": "6ed86aa7b287ab90",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "770dfadb747b3f46"
            ]
        ]
    },
    {
        "id": "ea35964c9f466023",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 520,
        "wires": [
            [
                "ebc4046afdbc3a2c"
            ]
        ]
    },
    {
        "id": "ebc4046afdbc3a2c",
        "type": "function-npm",
        "z": "0e823ae58e373fe9",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 520,
        "wires": [
            [
                "226ecbf5ac4131ee"
            ]
        ]
    },
    {
        "id": "3aa0df4c32d9ed07",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "calculate changes",
        "func": "msg.query = \"update markets set change24h =  (closing - price24h), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            [
                "c1025f5b5659567a"
            ]
        ]
    },
    {
        "id": "93431f5cd58da617",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "calculate pct changes",
        "func": "msg.query = \"update markets set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100) where closing > 0\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "f86b55b017a128bb"
            ]
        ]
    },
    {
        "id": "6320ec0ff68472dd",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update markets set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "103a2bdcae35a6e0"
            ]
        ]
    },
    {
        "id": "226ecbf5ac4131ee",
        "type": "polygon-trades-min-agg-rest",
        "z": "0e823ae58e373fe9",
        "conf": "2b5801c73dcc1d17",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 520,
        "wires": [
            [
                "6320ec0ff68472dd"
            ]
        ]
    },
    {
        "id": "b98968cd0c7ee589",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "3aa0df4c32d9ed07"
            ]
        ]
    },
    {
        "id": "93e6047aae596035",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Watchlist Prices",
        "info": "",
        "x": 120,
        "y": 640,
        "wires": []
    },
    {
        "id": "5132fd874f417c32",
        "type": "polygon-last-trade-v3",
        "z": "0e823ae58e373fe9",
        "conf": "2b5801c73dcc1d17",
        "symbol": "",
        "x": 900,
        "y": 680,
        "wires": [
            [
                "e621ce6552eb52b0"
            ]
        ]
    },
    {
        "id": "e621ce6552eb52b0",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 680,
        "wires": [
            [
                "122da2f7d86905c9"
            ]
        ]
    },
    {
        "id": "e68cb0f8fd29ee4f",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 680,
        "wires": [
            [
                "295f4c6e15761625"
            ]
        ]
    },
    {
        "id": "90cfdf2bdbea4336",
        "type": "polygon-last-trade-v3",
        "z": "0e823ae58e373fe9",
        "conf": "2b5801c73dcc1d17",
        "symbol": "",
        "x": 860,
        "y": 740,
        "wires": [
            [
                "6af03e0abcc483b8"
            ]
        ]
    },
    {
        "id": "6af03e0abcc483b8",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 740,
        "wires": [
            [
                "64dea2df39363f7d"
            ]
        ]
    },
    {
        "id": "3f3fa8c59f36ad04",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 740,
        "wires": [
            [
                "449e53c6e2b6e047"
            ]
        ]
    },
    {
        "id": "7bdc0e53bc122a3a",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 800,
        "wires": [
            [
                "e28e4420674a70d0"
            ]
        ]
    },
    {
        "id": "67e8231c24e5061d",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "calculate changes",
        "func": "msg.query = \"update watchlist set change24h =  (closing - price24h), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 860,
        "wires": [
            [
                "0e1889a2f1d42b73"
            ]
        ]
    },
    {
        "id": "e4d8dc0e6e792ce4",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "calculate pct changes",
        "func": "msg.query = \"update watchlist set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100) where closing > 0\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 860,
        "wires": [
            [
                "3deb3c9e923e8649"
            ]
        ]
    },
    {
        "id": "a4e8becfafaea303",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update watchlist set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "28adf1a3af4dc1ff"
            ]
        ]
    },
    {
        "id": "6e90634da443c3ca",
        "type": "polygon-trades-min-agg-rest",
        "z": "0e823ae58e373fe9",
        "conf": "2b5801c73dcc1d17",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 800,
        "wires": [
            [
                "a4e8becfafaea303"
            ]
        ]
    },
    {
        "id": "b697e34f62549742",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 860,
        "wires": [
            [
                "67e8231c24e5061d"
            ]
        ]
    },
    {
        "id": "1443e2cfd96bd07b",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 420,
        "wires": [
            [
                "ab2638107a0e77ef"
            ]
        ]
    },
    {
        "id": "9fb33919ffc77a9e",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "f54dd29872df1bc3",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 460,
        "wires": [
            [
                "361d1b28f3cf19ab"
            ]
        ]
    },
    {
        "id": "de589cbdeed48c05",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "770dfadb747b3f46",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 520,
        "wires": [
            [
                "ea35964c9f466023"
            ]
        ]
    },
    {
        "id": "103a2bdcae35a6e0",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "c1025f5b5659567a",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 580,
        "wires": [
            [
                "93431f5cd58da617"
            ]
        ]
    },
    {
        "id": "c56088482e6e9e3a",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 680,
        "wires": [
            [
                "e68cb0f8fd29ee4f"
            ]
        ]
    },
    {
        "id": "122da2f7d86905c9",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "f0f0c08d4094380a",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 740,
        "wires": [
            [
                "3f3fa8c59f36ad04"
            ]
        ]
    },
    {
        "id": "64dea2df39363f7d",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "28adf1a3af4dc1ff",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "5617a927bcdb02f7",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 800,
        "wires": [
            [
                "7bdc0e53bc122a3a"
            ]
        ]
    },
    {
        "id": "0e1889a2f1d42b73",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 860,
        "wires": [
            [
                "e4d8dc0e6e792ce4"
            ]
        ]
    },
    {
        "id": "f86b55b017a128bb",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "3deb3c9e923e8649",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "8d09a2c185f2dd04",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Markets Prices",
        "info": "",
        "x": 120,
        "y": 360,
        "wires": []
    },
    {
        "id": "c9d5397f053d512b",
        "type": "function-npm",
        "z": "0e823ae58e373fe9",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 460,
        "wires": [
            [
                "c69fd7c3373669e2"
            ]
        ]
    },
    {
        "id": "295f4c6e15761625",
        "type": "function-npm",
        "z": "0e823ae58e373fe9",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 680,
        "wires": [
            [
                "5132fd874f417c32"
            ]
        ]
    },
    {
        "id": "449e53c6e2b6e047",
        "type": "function-npm",
        "z": "0e823ae58e373fe9",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 740,
        "wires": [
            [
                "90cfdf2bdbea4336"
            ]
        ]
    },
    {
        "id": "994a6d4a3d80561e",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "c56088482e6e9e3a"
            ]
        ]
    },
    {
        "id": "53e3e18886b7ddf4",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "f0f0c08d4094380a"
            ]
        ]
    },
    {
        "id": "1c10b25bec76c82e",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "5617a927bcdb02f7"
            ]
        ]
    },
    {
        "id": "e28e4420674a70d0",
        "type": "function-npm",
        "z": "0e823ae58e373fe9",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 800,
        "wires": [
            [
                "6e90634da443c3ca"
            ]
        ]
    },
    {
        "id": "e8f786de16092090",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "a6d3d812b328c72f"
            ]
        ]
    },
    {
        "id": "01cf607778ab890b",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "5dc1bac067d85a98",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "get 500 closed orders live",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "29f381a9e11bf62a"
            ]
        ]
    },
    {
        "id": "29f381a9e11bf62a",
        "type": "alpaca-query-order",
        "z": "0e823ae58e373fe9",
        "conf": "0c86a5f06a42b505",
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "e8f786de16092090"
            ]
        ]
    },
    {
        "id": "a6d3d812b328c72f",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'live');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1020,
        "wires": [
            [
                "01cf607778ab890b"
            ]
        ]
    },
    {
        "id": "9a24cadf1bcd866f",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "c0e0496a837a10a3"
            ]
        ]
    },
    {
        "id": "d970f684969eec2a",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "53db1aa5459fb704",
        "type": "alpaca-query-order",
        "z": "0e823ae58e373fe9",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "9a24cadf1bcd866f"
            ]
        ]
    },
    {
        "id": "728f687ee36a8e5d",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "get 500 closed orders paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "53db1aa5459fb704"
            ]
        ]
    },
    {
        "id": "c0e0496a837a10a3",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1060,
        "wires": [
            [
                "d970f684969eec2a"
            ]
        ]
    },
    {
        "id": "99a24b17c455f28f",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "2a5d2f56f2b40faf",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update symbol from alpaca_assets",
        "func": "msg.query = \"UPDATE orders SET symbol = alpaca_assets.symbol FROM alpaca_assets where orders.symbol = alpaca_assets.alpaca_symbol\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "99a24b17c455f28f"
            ]
        ]
    },
    {
        "id": "adba0e6787a42f2a",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1120,
        "wires": [
            [
                "2a5d2f56f2b40faf"
            ]
        ]
    },
    {
        "id": "e9d47fb1a7425ee8",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Upload Recent Orders",
        "info": "",
        "x": 140,
        "y": 960,
        "wires": []
    },
    {
        "id": "4988acfabb791c2b",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "4:30 am",
        "props": [],
        "repeat": "",
        "crontab": "30 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1020,
        "wires": [
            [
                "5dc1bac067d85a98",
                "728f687ee36a8e5d",
                "adba0e6787a42f2a"
            ]
        ]
    },
    {
        "id": "8dc5b2efa39c8aa5",
        "type": "alpaca-orders-close",
        "z": "0e823ae58e373fe9",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 410,
        "y": 1220,
        "wires": [
            [
                "bc98595a81e8da3b"
            ]
        ]
    },
    {
        "id": "5879247cfaa669c7",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Close all orders at 3 AM",
        "info": "",
        "x": 160,
        "y": 1180,
        "wires": []
    },
    {
        "id": "6ab121059e8a3ac4",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Close paper account",
        "props": [],
        "repeat": "",
        "crontab": "00 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1220,
        "wires": [
            [
                "8dc5b2efa39c8aa5"
            ]
        ]
    },
    {
        "id": "bc98595a81e8da3b",
        "type": "debug",
        "z": "0e823ae58e373fe9",
        "name": "debug 176",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1220,
        "wires": []
    },
    {
        "id": "26db2bcc0b591b3f",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "truncate positions table",
        "func": "msg.query = \"truncate table positions\"\n//msg.query = \"drop table positions\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "69d748bb2f36260d"
            ]
        ]
    },
    {
        "id": "69d748bb2f36260d",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 1340,
        "wires": [
            [
                "5d18d4dbde54f205"
            ]
        ]
    },
    {
        "id": "213b0dd37dc783e7",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "insert LIVE account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('live', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn('live')\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1400,
        "wires": [
            [
                "46e7d922bec303e2"
            ]
        ]
    },
    {
        "id": "5d18d4dbde54f205",
        "type": "alpaca-position-query",
        "z": "0e823ae58e373fe9",
        "conf": "0c86a5f06a42b505",
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "fb73749d8c9ddbdb"
            ]
        ]
    },
    {
        "id": "46e7d922bec303e2",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "f1cb48f96c6d24f0",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "26db2bcc0b591b3f",
                "de8fc459d461d8d3",
                "4564e2b85b685649",
                "123d372b913f890f",
                "859029fb282546fd",
                "641d760485bd5cb7"
            ]
        ]
    },
    {
        "id": "84b37293a8fc52bf",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Update positions table",
        "info": "",
        "x": 140,
        "y": 1280,
        "wires": []
    },
    {
        "id": "fb73749d8c9ddbdb",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 1400,
        "wires": [
            [
                "213b0dd37dc783e7"
            ]
        ]
    },
    {
        "id": "7b754f7b16265d66",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Update Orders Table ",
        "info": "",
        "x": 130,
        "y": 1720,
        "wires": []
    },
    {
        "id": "c8017a74d2e8bf98",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 1820,
        "wires": [
            [
                "e31d9fa234f5b711"
            ]
        ]
    },
    {
        "id": "600d46344471d134",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "fdcb273816cabbdf",
        "type": "alpaca-query-order",
        "z": "0e823ae58e373fe9",
        "conf": "e535f42f1df1b25f",
        "x": 660,
        "y": 1820,
        "wires": [
            [
                "c8017a74d2e8bf98"
            ]
        ]
    },
    {
        "id": "748f69927b5f3ad9",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "get last 100 closed paper orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1820,
        "wires": [
            [
                "fdcb273816cabbdf"
            ]
        ]
    },
    {
        "id": "e31d9fa234f5b711",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1820,
        "wires": [
            [
                "600d46344471d134"
            ]
        ]
    },
    {
        "id": "0ee535cf455fb082",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 1820,
        "wires": [
            [
                "748f69927b5f3ad9"
            ]
        ]
    },
    {
        "id": "96b7e7d39d91a08b",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1760,
        "wires": [
            [
                "d1137292a80a7e52"
            ]
        ]
    },
    {
        "id": "5067e32ef255fba3",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update order_confirms from orders",
        "func": "msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created_at,filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\n//msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created.at, filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1860,
        "wires": [
            [
                "c362143c424cfbb2"
            ]
        ]
    },
    {
        "id": "c362143c424cfbb2",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "bde76c5933ebda9a",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "truncate orders table",
        "func": "//msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\nmsg.query = \"truncate table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1760,
        "wires": [
            [
                "27d76de762af1309"
            ]
        ]
    },
    {
        "id": "27d76de762af1309",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "d1137292a80a7e52",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1760,
        "wires": [
            [
                "bde76c5933ebda9a",
                "0ee535cf455fb082",
                "9164da2cf9d3245c"
            ]
        ]
    },
    {
        "id": "9164da2cf9d3245c",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1860,
        "wires": [
            [
                "5067e32ef255fba3"
            ]
        ]
    },
    {
        "id": "c6921b251ffa9c9e",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Update from algos table for interday strategies",
        "info": "",
        "x": 220,
        "y": 1980,
        "wires": []
    },
    {
        "id": "b2383fb25766090b",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2040,
        "wires": [
            [
                "3635085febbbb07a"
            ]
        ]
    },
    {
        "id": "be0b5a87f770c2f7",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "get totals from positions",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(unrealized_pl) as b, sum(market_value) as c from positions where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2040,
        "wires": [
            [
                "e5ec474a148d1ecf"
            ]
        ]
    },
    {
        "id": "87766bd04cc13ad0",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "store sums",
        "func": "let gain_alltime = msg.payload[\"a\"]\nlet gain_today = msg.payload[\"b\"]\nlet total_value = msg.payload[\"c\"]\n\nmsg.totalvalue = total_value\nmsg.gainalltime = gain_alltime\nmsg.gaintoday = gain_today\n\nlet id = msg.name\n\n//node.warn(\"Strategy: \" +id+ \" Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" + total_value + \", gain_today = \" + gain_today + \", gain_alltime = \" + gain_alltime + \" where algo_name = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2100,
        "wires": [
            [
                "bed367fed7aeb8b1"
            ]
        ]
    },
    {
        "id": "0c045b0f9e02dfbf",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 390,
        "y": 2100,
        "wires": [
            [
                "87766bd04cc13ad0"
            ]
        ]
    },
    {
        "id": "e5ec474a148d1ecf",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 260,
        "y": 2100,
        "wires": [
            [
                "0c045b0f9e02dfbf"
            ]
        ]
    },
    {
        "id": "bed367fed7aeb8b1",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 2100,
        "wires": [
            [
                "825b408aba3b421d"
            ]
        ]
    },
    {
        "id": "825b408aba3b421d",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday + \", pctgain_alltime = \" +pctgainalltime+ \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2160,
        "wires": [
            [
                "90834e5192f8b04d"
            ]
        ]
    },
    {
        "id": "90834e5192f8b04d",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "96ba5b8e12fca3ec",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos where  algo_type = 'interday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2040,
        "wires": [
            [
                "93eb5020d6871283"
            ]
        ]
    },
    {
        "id": "93eb5020d6871283",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 2040,
        "wires": [
            [
                "113db619f310d0c3"
            ]
        ]
    },
    {
        "id": "113db619f310d0c3",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 2040,
        "wires": [
            [
                "2e383d0bc3fa22df"
            ]
        ]
    },
    {
        "id": "2e383d0bc3fa22df",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2040,
        "wires": [
            [
                "be0b5a87f770c2f7"
            ]
        ]
    },
    {
        "id": "3635085febbbb07a",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2040,
        "wires": [
            [
                "96ba5b8e12fca3ec"
            ]
        ]
    },
    {
        "id": "de8fc459d461d8d3",
        "type": "alpaca-position-query",
        "z": "0e823ae58e373fe9",
        "conf": "e535f42f1df1b25f",
        "x": 290,
        "y": 1440,
        "wires": [
            [
                "8269407c52c1bc17"
            ]
        ]
    },
    {
        "id": "2504ef9fb691cac3",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Truncate balances",
        "props": [
            {
                "p": "query",
                "v": "truncate table balances",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "truncate table daily_balances",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "787256c13bf1db28"
            ]
        ]
    },
    {
        "id": "787256c13bf1db28",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 320,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4d426a4ee7e8312b",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Truncate balances_daily",
        "props": [
            {
                "p": "query1",
                "v": "truncate table balances",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "truncate table balances_daily",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 80,
        "wires": [
            [
                "14de91d87ca15403"
            ]
        ]
    },
    {
        "id": "14de91d87ca15403",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3afc2d7ff8461bff",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "delete from order_confirms",
        "func": "msg.query = \"delete from order_confirms where filled_qty is null;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1900,
        "wires": [
            [
                "48fa47f89579d7bf"
            ]
        ]
    },
    {
        "id": "48fa47f89579d7bf",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "db6e194ee68513c5",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1900,
        "wires": [
            [
                "3afc2d7ff8461bff"
            ]
        ]
    },
    {
        "id": "76a3f31d71ee2e05",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "insert PAPER account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('paper', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn('paper')\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1440,
        "wires": [
            [
                "18db4ac1c8c9dee4"
            ]
        ]
    },
    {
        "id": "18db4ac1c8c9dee4",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "8269407c52c1bc17",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 1440,
        "wires": [
            [
                "76a3f31d71ee2e05"
            ]
        ]
    },
    {
        "id": "23c70af1c536607d",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update from alpaca_assets",
        "func": "msg.query = \"UPDATE positions SET name = alpaca_assets.name FROM alpaca_assets where positions.symbol = alpaca_assets.symbol\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1560,
        "wires": [
            [
                "e83fca40cb0d7397"
            ]
        ]
    },
    {
        "id": "e83fca40cb0d7397",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "d4035f54b1488288",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update from tickers_live",
        "func": "let sql = \"update positions set id = tickers_live.id, portfolioname = tickers_live.portfolioname, name = tickers_live.name FROM tickers_live where positions.symbol = tickers_live.symbol\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1480,
        "wires": [
            [
                "493e5ffd4098d7ec"
            ]
        ]
    },
    {
        "id": "d2d1ebacceb9e4a9",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update from tickers_paper",
        "func": "let sql = \"update positions set id = tickers_paper.id, portfolioname = tickers_paper.portfolioname, name = tickers_paper.name FROM tickers_paper where positions.symbol = tickers_paper.symbol\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1520,
        "wires": [
            [
                "57514258da4b009c"
            ]
        ]
    },
    {
        "id": "493e5ffd4098d7ec",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "57514258da4b009c",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "4564e2b85b685649",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1480,
        "wires": [
            [
                "d4035f54b1488288"
            ]
        ]
    },
    {
        "id": "02382603f5781d51",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Update from algos table for current prices for intraday strategies",
        "info": "",
        "x": 290,
        "y": 2240,
        "wires": []
    },
    {
        "id": "35a48d0a2ce677de",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 2300,
        "wires": [
            [
                "0e46b5b981534b65"
            ]
        ]
    },
    {
        "id": "39195ecf1216b76d",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "get totals from positions",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(market_value) as b from positions where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 2300,
        "wires": [
            [
                "69c39e2fd661f656"
            ]
        ]
    },
    {
        "id": "9fd2018a28808361",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "store sums",
        "func": "let gain_today = msg.payload[\"a\"]\nlet total_value = msg.payload[\"b\"]\n\nmsg.totalvalue = total_value\nmsg.gaintoday = gain_today\n\nlet id = msg.name\n\n//node.warn(\"Strategy: \" +id+ \" Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" + total_value + \", gain_today = \" + gain_today + \" where algo_name = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2360,
        "wires": [
            [
                "3f7e9ac60a007724"
            ]
        ]
    },
    {
        "id": "3fbeba5beb2746be",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 2360,
        "wires": [
            [
                "9fd2018a28808361"
            ]
        ]
    },
    {
        "id": "69c39e2fd661f656",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 280,
        "y": 2360,
        "wires": [
            [
                "3fbeba5beb2746be"
            ]
        ]
    },
    {
        "id": "3f7e9ac60a007724",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 2360,
        "wires": [
            [
                "cf0c3934e307f456"
            ]
        ]
    },
    {
        "id": "cf0c3934e307f456",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday +  \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2420,
        "wires": [
            [
                "17d2859197257e98"
            ]
        ]
    },
    {
        "id": "17d2859197257e98",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "fd78b0fad59e7ec4",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos where  algo_type = 'intraday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2300,
        "wires": [
            [
                "92d0d0df19970ad0"
            ]
        ]
    },
    {
        "id": "92d0d0df19970ad0",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 2300,
        "wires": [
            [
                "8b35ec8bf5d17e73"
            ]
        ]
    },
    {
        "id": "8b35ec8bf5d17e73",
        "type": "split",
        "z": "0e823ae58e373fe9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 2300,
        "wires": [
            [
                "1359448b2b3ebfd6"
            ]
        ]
    },
    {
        "id": "1359448b2b3ebfd6",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2300,
        "wires": [
            [
                "39195ecf1216b76d"
            ]
        ]
    },
    {
        "id": "0e46b5b981534b65",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 2300,
        "wires": [
            [
                "fd78b0fad59e7ec4"
            ]
        ]
    },
    {
        "id": "123d372b913f890f",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "1050",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1520,
        "wires": [
            [
                "d2d1ebacceb9e4a9"
            ]
        ]
    },
    {
        "id": "859029fb282546fd",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "1100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1560,
        "wires": [
            [
                "23c70af1c536607d"
            ]
        ]
    },
    {
        "id": "e0216b4e637262e2",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update positions for manual orders",
        "func": "msg.query = \"UPDATE positions SET portfolioname = 'Manual Trades', id = '99999999' where id is null\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1600,
        "wires": [
            [
                "0ff643f53c1e5382"
            ]
        ]
    },
    {
        "id": "0ff643f53c1e5382",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "641d760485bd5cb7",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "1200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "b1659ffa22cb960a",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Update from algos table benchmarks",
        "info": "",
        "x": 230,
        "y": 2520,
        "wires": []
    },
    {
        "id": "f879464c154a7d61",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2580,
        "wires": [
            [
                "9ccc0a218b99c30c"
            ]
        ]
    },
    {
        "id": "50b7ac38622a8609",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update algos table",
        "func": "let start = global.get(\"spy_start\")\nlet current = global.get(\"spy_current\")\nlet close = global.get(\"spy_close\")\n//node.warn(\"Start: \" +start+ \" Close: \" +close+ \" Current: \" +current)\n\nlet pctbench_today = ((current - close) / close) * 100 \nlet pctbench_alltime = ((current - start) / start) * 100\nlet info_ratio = \n\n//node.warn(\"Start: \" + start + \" Close: \" + close + \" Current: \" + current+ \" Pctbench Today: \" +pctbench_today+ \" Pctbench Alltime: \" +pctbench_alltime)\n\nmsg.query = \"update algos set pctbench_today = \" + pctbench_today+ \", pctbench_alltime = \" +pctbench_alltime+ \";\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2580,
        "wires": [
            [
                "76f13a1ec280942b"
            ]
        ]
    },
    {
        "id": "76f13a1ec280942b",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 2580,
        "wires": [
            [
                "e7fd0af1c7adb82f"
            ]
        ]
    },
    {
        "id": "e7fd0af1c7adb82f",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update info_ratio",
        "func": "msg.query = \"update algos set info_ratio = (pctgain_alltime - pctbench_alltime);\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2580,
        "wires": [
            [
                "efd1e51f4f90daa2"
            ]
        ]
    },
    {
        "id": "efd1e51f4f90daa2",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "9ccc0a218b99c30c",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2580,
        "wires": [
            [
                "50b7ac38622a8609"
            ]
        ]
    },
    {
        "id": "210be9059151e43e",
        "type": "comment",
        "z": "0e823ae58e373fe9",
        "name": "Update positions table for manual trades ",
        "info": "",
        "x": 220,
        "y": 2700,
        "wires": []
    },
    {
        "id": "5073b47e84b82c4b",
        "type": "function",
        "z": "0e823ae58e373fe9",
        "name": "update positions for manual trades",
        "func": "let sql = \"update positions set portfolioname = 'Manual Trades', id = '999999' where portfolioname is null;\"\nmsg.query = sql\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2760,
        "wires": [
            [
                "fd9f96025907ec56"
            ]
        ]
    },
    {
        "id": "fd9f96025907ec56",
        "type": "postgresql",
        "z": "0e823ae58e373fe9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "353e0b1187a4347d",
        "type": "inject",
        "z": "0e823ae58e373fe9",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2760,
        "wires": [
            [
                "56f2107c3821576d"
            ]
        ]
    },
    {
        "id": "56f2107c3821576d",
        "type": "delay",
        "z": "0e823ae58e373fe9",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2760,
        "wires": [
            [
                "5073b47e84b82c4b"
            ]
        ]
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PKJ7QEDYOP0ZZ5FQTMY4",
        "paper": true
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKJ7QEDYOP0ZZ5FQTMY4",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "2b5801c73dcc1d17",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]