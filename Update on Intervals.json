[
    {
        "id": "8eaa66f97eb5c8f4",
        "type": "tab",
        "label": "Update on Intervals",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "92682af4be204689",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "4538881ef28f43a6",
                "f05becfb1a39c231"
            ]
        ]
    },
    {
        "id": "4538881ef28f43a6",
        "type": "alpaca-account-query",
        "z": "8eaa66f97eb5c8f4",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "aaed729a0673f3db"
            ]
        ]
    },
    {
        "id": "aaed729a0673f3db",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "Insert into live balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'live'\nbalance = parseInt(balance)\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 140,
        "wires": [
            [
                "754e77fff726018b"
            ]
        ]
    },
    {
        "id": "acf1b126211114fd",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Daily at Midnight",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "d08ad632bc03fe63",
                "09a5cb87b6372f25"
            ]
        ]
    },
    {
        "id": "d08ad632bc03fe63",
        "type": "alpaca-account-query",
        "z": "8eaa66f97eb5c8f4",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "9e207d605ed4e80c"
            ]
        ]
    },
    {
        "id": "03ed224e7ad53656",
        "type": "comment",
        "z": "8eaa66f97eb5c8f4",
        "name": "Store account balances to sqlite tables",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "f05becfb1a39c231",
        "type": "alpaca-account-query",
        "z": "8eaa66f97eb5c8f4",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 180,
        "wires": [
            [
                "3910463a2e4c2060"
            ]
        ]
    },
    {
        "id": "09a5cb87b6372f25",
        "type": "alpaca-account-query",
        "z": "8eaa66f97eb5c8f4",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 260,
        "wires": [
            [
                "b2669b6fce150e7d"
            ]
        ]
    },
    {
        "id": "3910463a2e4c2060",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "Insert into paper balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n//node.warn(Number.isInteger(balance))\nbalance = parseInt(balance)\n\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "086a9273f63d54f8"
            ]
        ]
    },
    {
        "id": "b2669b6fce150e7d",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "276a652b2a1d7149"
            ]
        ]
    },
    {
        "id": "754e77fff726018b",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "086a9273f63d54f8",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "81977259b9581ab7",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "276a652b2a1d7149",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9e207d605ed4e80c",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "81977259b9581ab7"
            ]
        ]
    },
    {
        "id": "a96ce657a5493c2b",
        "type": "polygon-last-trade-v3",
        "z": "8eaa66f97eb5c8f4",
        "conf": "0d041cfc32f31c07",
        "symbol": "",
        "x": 900,
        "y": 420,
        "wires": [
            [
                "48ea4bb6c22a9c56"
            ]
        ]
    },
    {
        "id": "77607e45e858962d",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select * from markets",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "b4176911db4df6e3"
            ]
        ]
    },
    {
        "id": "48ea4bb6c22a9c56",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n    //node.warn(\"Price: \" +price)\n}\n\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "ee4b895e14178d7e"
            ]
        ]
    },
    {
        "id": "e115317afb97a1ea",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "d3b746ed4539aab6"
            ]
        ]
    },
    {
        "id": "d3b746ed4539aab6",
        "type": "function-npm",
        "z": "8eaa66f97eb5c8f4",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 420,
        "wires": [
            [
                "a96ce657a5493c2b"
            ]
        ]
    },
    {
        "id": "1818f04da0b05011",
        "type": "polygon-last-trade-v3",
        "z": "8eaa66f97eb5c8f4",
        "conf": "0d041cfc32f31c07",
        "symbol": "",
        "x": 900,
        "y": 460,
        "wires": [
            [
                "c6ad5a849ca7e024"
            ]
        ]
    },
    {
        "id": "8812da6464252cb1",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "23680634e087a7dd"
            ]
        ]
    },
    {
        "id": "c6ad5a849ca7e024",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "54b53acc1344530e"
            ]
        ]
    },
    {
        "id": "39ded7d310ca8763",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "65dbd8f02ea2940b"
            ]
        ]
    },
    {
        "id": "4b015dc42b65cd89",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "25cc03326fb90d09"
            ]
        ]
    },
    {
        "id": "8dde3d8d31f6bbdf",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 520,
        "wires": [
            [
                "270890842fb8dba7"
            ]
        ]
    },
    {
        "id": "270890842fb8dba7",
        "type": "function-npm",
        "z": "8eaa66f97eb5c8f4",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 520,
        "wires": [
            [
                "cc9b905beaa0b30f"
            ]
        ]
    },
    {
        "id": "fc72e7306b1e68f6",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "calculate changes",
        "func": "msg.query = \"update markets set change24h =  (closing - price24h), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            [
                "3663b7117fb49a44"
            ]
        ]
    },
    {
        "id": "45dbcae270d7819c",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "calculate pct changes",
        "func": "msg.query = \"update markets set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100) where closing > 0\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "2e2c131f404739ce"
            ]
        ]
    },
    {
        "id": "c21172089e166aea",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update markets set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "707d6e2d9ad33334"
            ]
        ]
    },
    {
        "id": "cc9b905beaa0b30f",
        "type": "polygon-trades-min-agg-rest",
        "z": "8eaa66f97eb5c8f4",
        "conf": "0d041cfc32f31c07",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 520,
        "wires": [
            [
                "c21172089e166aea"
            ]
        ]
    },
    {
        "id": "8dbf153cbe6783bc",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "fc72e7306b1e68f6"
            ]
        ]
    },
    {
        "id": "a12ea6a8a85b73f1",
        "type": "comment",
        "z": "8eaa66f97eb5c8f4",
        "name": "Watchlist Prices",
        "info": "",
        "x": 120,
        "y": 640,
        "wires": []
    },
    {
        "id": "996fbb3c696e4d4c",
        "type": "polygon-last-trade-v3",
        "z": "8eaa66f97eb5c8f4",
        "conf": "0d041cfc32f31c07",
        "symbol": "",
        "x": 900,
        "y": 680,
        "wires": [
            [
                "4269638f7aca1dba"
            ]
        ]
    },
    {
        "id": "4269638f7aca1dba",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 680,
        "wires": [
            [
                "8f17d40db9e6218c"
            ]
        ]
    },
    {
        "id": "65c234c220ccb1f1",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 680,
        "wires": [
            [
                "254faa18c31db0fe"
            ]
        ]
    },
    {
        "id": "9b02932814b2f024",
        "type": "polygon-last-trade-v3",
        "z": "8eaa66f97eb5c8f4",
        "conf": "0d041cfc32f31c07",
        "symbol": "",
        "x": 860,
        "y": 740,
        "wires": [
            [
                "1a4a7174e08dd262"
            ]
        ]
    },
    {
        "id": "1a4a7174e08dd262",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 740,
        "wires": [
            [
                "7749c452a65fe11f"
            ]
        ]
    },
    {
        "id": "63805b4c3af95e9a",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 740,
        "wires": [
            [
                "72af9383b42f6749"
            ]
        ]
    },
    {
        "id": "336c1ee0f61972f3",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 800,
        "wires": [
            [
                "c8ae16a101d18ab6"
            ]
        ]
    },
    {
        "id": "28d1f084918047c1",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "calculate changes",
        "func": "msg.query = \"update watchlist set change24h =  (closing - price24h), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 860,
        "wires": [
            [
                "6e10924fdd3fab02"
            ]
        ]
    },
    {
        "id": "4ba4faf88b9102f1",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "calculate pct changes",
        "func": "msg.query = \"update watchlist set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100) where closing > 0\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 860,
        "wires": [
            [
                "f08549afdcf56f02"
            ]
        ]
    },
    {
        "id": "9a16da540e6e7290",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update watchlist set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "e9365998b542a161"
            ]
        ]
    },
    {
        "id": "1e7b3beb0deec59a",
        "type": "polygon-trades-min-agg-rest",
        "z": "8eaa66f97eb5c8f4",
        "conf": "0d041cfc32f31c07",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 800,
        "wires": [
            [
                "9a16da540e6e7290"
            ]
        ]
    },
    {
        "id": "f5c880966bce0a15",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 860,
        "wires": [
            [
                "28d1f084918047c1"
            ]
        ]
    },
    {
        "id": "b4176911db4df6e3",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 420,
        "wires": [
            [
                "e115317afb97a1ea"
            ]
        ]
    },
    {
        "id": "ee4b895e14178d7e",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "23680634e087a7dd",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 460,
        "wires": [
            [
                "39ded7d310ca8763"
            ]
        ]
    },
    {
        "id": "54b53acc1344530e",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "25cc03326fb90d09",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 520,
        "wires": [
            [
                "8dde3d8d31f6bbdf"
            ]
        ]
    },
    {
        "id": "707d6e2d9ad33334",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "3663b7117fb49a44",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 580,
        "wires": [
            [
                "45dbcae270d7819c"
            ]
        ]
    },
    {
        "id": "aec4b242c1c11d1c",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 680,
        "wires": [
            [
                "65c234c220ccb1f1"
            ]
        ]
    },
    {
        "id": "8f17d40db9e6218c",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "5d75c5c8f1d7c087",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 740,
        "wires": [
            [
                "63805b4c3af95e9a"
            ]
        ]
    },
    {
        "id": "7749c452a65fe11f",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "e9365998b542a161",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "407d3b69b72938c7",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 800,
        "wires": [
            [
                "336c1ee0f61972f3"
            ]
        ]
    },
    {
        "id": "6e10924fdd3fab02",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 860,
        "wires": [
            [
                "4ba4faf88b9102f1"
            ]
        ]
    },
    {
        "id": "2e2c131f404739ce",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "f08549afdcf56f02",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "5b2e8df53e3b4112",
        "type": "comment",
        "z": "8eaa66f97eb5c8f4",
        "name": "Markets Prices",
        "info": "",
        "x": 120,
        "y": 360,
        "wires": []
    },
    {
        "id": "65dbd8f02ea2940b",
        "type": "function-npm",
        "z": "8eaa66f97eb5c8f4",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 460,
        "wires": [
            [
                "1818f04da0b05011"
            ]
        ]
    },
    {
        "id": "254faa18c31db0fe",
        "type": "function-npm",
        "z": "8eaa66f97eb5c8f4",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 680,
        "wires": [
            [
                "996fbb3c696e4d4c"
            ]
        ]
    },
    {
        "id": "72af9383b42f6749",
        "type": "function-npm",
        "z": "8eaa66f97eb5c8f4",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 740,
        "wires": [
            [
                "9b02932814b2f024"
            ]
        ]
    },
    {
        "id": "9cea8fc3a2582028",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "aec4b242c1c11d1c"
            ]
        ]
    },
    {
        "id": "bff534eeba77b303",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "5d75c5c8f1d7c087"
            ]
        ]
    },
    {
        "id": "402d7029233ef327",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "407d3b69b72938c7"
            ]
        ]
    },
    {
        "id": "c8ae16a101d18ab6",
        "type": "function-npm",
        "z": "8eaa66f97eb5c8f4",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 800,
        "wires": [
            [
                "1e7b3beb0deec59a"
            ]
        ]
    },
    {
        "id": "a9d9deaf5a7b9d95",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "fd27199e355e7dcc"
            ]
        ]
    },
    {
        "id": "2b6e544bdf5aea88",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "0fbe29bbfde0f806",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "get 500 closed orders live",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "caa58c635a5b8df2"
            ]
        ]
    },
    {
        "id": "caa58c635a5b8df2",
        "type": "alpaca-query-order",
        "z": "8eaa66f97eb5c8f4",
        "conf": "0c86a5f06a42b505",
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "a9d9deaf5a7b9d95"
            ]
        ]
    },
    {
        "id": "fd27199e355e7dcc",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'live');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1020,
        "wires": [
            [
                "2b6e544bdf5aea88"
            ]
        ]
    },
    {
        "id": "535a3e28eb264a4e",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "7a9e0141b3f2c68d"
            ]
        ]
    },
    {
        "id": "06dfd4ed5f94bc03",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "e80d7c148df3665c",
        "type": "alpaca-query-order",
        "z": "8eaa66f97eb5c8f4",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "535a3e28eb264a4e"
            ]
        ]
    },
    {
        "id": "564f09e903ca835f",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "get 500 closed orders paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "e80d7c148df3665c"
            ]
        ]
    },
    {
        "id": "7a9e0141b3f2c68d",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1060,
        "wires": [
            [
                "06dfd4ed5f94bc03"
            ]
        ]
    },
    {
        "id": "7c01dc4cb18aade5",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "a5f28196178db010",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update symbol from alpaca_assets",
        "func": "msg.query = \"UPDATE orders SET symbol = alpaca_assets.symbol FROM alpaca_assets where orders.symbol = alpaca_assets.alpaca_symbol\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "7c01dc4cb18aade5"
            ]
        ]
    },
    {
        "id": "3934aa4ae26573cf",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1120,
        "wires": [
            [
                "a5f28196178db010"
            ]
        ]
    },
    {
        "id": "07c4c801c9b7456a",
        "type": "comment",
        "z": "8eaa66f97eb5c8f4",
        "name": "Upload Recent Orders",
        "info": "",
        "x": 140,
        "y": 960,
        "wires": []
    },
    {
        "id": "ae099df54d84fb90",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "4:30 am",
        "props": [],
        "repeat": "",
        "crontab": "30 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1020,
        "wires": [
            [
                "0fbe29bbfde0f806",
                "564f09e903ca835f",
                "3934aa4ae26573cf"
            ]
        ]
    },
    {
        "id": "9dab445e917db5e5",
        "type": "alpaca-orders-close",
        "z": "8eaa66f97eb5c8f4",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 410,
        "y": 1220,
        "wires": [
            [
                "37463e6637912cfb"
            ]
        ]
    },
    {
        "id": "5f0be475dfec686b",
        "type": "comment",
        "z": "8eaa66f97eb5c8f4",
        "name": "Close all orders at 3 AM",
        "info": "",
        "x": 160,
        "y": 1180,
        "wires": []
    },
    {
        "id": "0ea7de73a2fd465b",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Close paper account",
        "props": [],
        "repeat": "",
        "crontab": "00 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1220,
        "wires": [
            [
                "9dab445e917db5e5"
            ]
        ]
    },
    {
        "id": "37463e6637912cfb",
        "type": "debug",
        "z": "8eaa66f97eb5c8f4",
        "name": "debug 176",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1220,
        "wires": []
    },
    {
        "id": "c1e6c60c8415af56",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "truncate positions table",
        "func": "msg.query = \"truncate table positions\"\n//msg.query = \"drop table positions\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "f20b300e7c92077b"
            ]
        ]
    },
    {
        "id": "f20b300e7c92077b",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 1340,
        "wires": [
            [
                "911a56bcf1216fff"
            ]
        ]
    },
    {
        "id": "637b2c0c808f338d",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "insert LIVE account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('live', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn('live')\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1400,
        "wires": [
            [
                "dc835bd5daedb59a"
            ]
        ]
    },
    {
        "id": "911a56bcf1216fff",
        "type": "alpaca-position-query",
        "z": "8eaa66f97eb5c8f4",
        "conf": "0c86a5f06a42b505",
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "b2594266cba33104"
            ]
        ]
    },
    {
        "id": "dc835bd5daedb59a",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "f8197d641228bd25",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "c1e6c60c8415af56",
                "c5f5fcdfefc6ad3e",
                "194cb80b4872c341",
                "882020bf86f46329",
                "0ba45ad03f75533d",
                "46bccaf976a1458c"
            ]
        ]
    },
    {
        "id": "c0c951222250df82",
        "type": "comment",
        "z": "8eaa66f97eb5c8f4",
        "name": "Update positions table",
        "info": "",
        "x": 140,
        "y": 1280,
        "wires": []
    },
    {
        "id": "b2594266cba33104",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 1400,
        "wires": [
            [
                "637b2c0c808f338d"
            ]
        ]
    },
    {
        "id": "4c08e8e23c93fbc4",
        "type": "comment",
        "z": "8eaa66f97eb5c8f4",
        "name": "Update Orders Table ",
        "info": "",
        "x": 130,
        "y": 1720,
        "wires": []
    },
    {
        "id": "34dc0268a47c135a",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 1820,
        "wires": [
            [
                "f432aab292581787"
            ]
        ]
    },
    {
        "id": "1886c9e19e2990d2",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "d50a1510367d8f9d",
        "type": "alpaca-query-order",
        "z": "8eaa66f97eb5c8f4",
        "conf": "e535f42f1df1b25f",
        "x": 660,
        "y": 1820,
        "wires": [
            [
                "34dc0268a47c135a"
            ]
        ]
    },
    {
        "id": "c7c054a74b9377e2",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "get last 100 closed paper orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1820,
        "wires": [
            [
                "d50a1510367d8f9d"
            ]
        ]
    },
    {
        "id": "f432aab292581787",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1820,
        "wires": [
            [
                "1886c9e19e2990d2"
            ]
        ]
    },
    {
        "id": "6efc229d5d97dec9",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 1820,
        "wires": [
            [
                "c7c054a74b9377e2"
            ]
        ]
    },
    {
        "id": "ccbbfb26ea400b53",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1760,
        "wires": [
            [
                "63ad6eb33c4a075d"
            ]
        ]
    },
    {
        "id": "9ef24048873e6cd3",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update order_confirms from orders",
        "func": "msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created_at,filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\n//msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created.at, filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1860,
        "wires": [
            [
                "ab6031cece3ca17f"
            ]
        ]
    },
    {
        "id": "ab6031cece3ca17f",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "de687d293c9fc4a3",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "truncate orders table",
        "func": "//msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\nmsg.query = \"truncate table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1760,
        "wires": [
            [
                "794de484949fdf0d"
            ]
        ]
    },
    {
        "id": "794de484949fdf0d",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "63ad6eb33c4a075d",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1760,
        "wires": [
            [
                "de687d293c9fc4a3",
                "6efc229d5d97dec9",
                "57824c9428ff7e0a"
            ]
        ]
    },
    {
        "id": "57824c9428ff7e0a",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1860,
        "wires": [
            [
                "9ef24048873e6cd3"
            ]
        ]
    },
    {
        "id": "1223b328b8b43965",
        "type": "comment",
        "z": "8eaa66f97eb5c8f4",
        "name": "Update from algos table for interday strategies",
        "info": "",
        "x": 220,
        "y": 1980,
        "wires": []
    },
    {
        "id": "b5f1e42c21442f28",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2040,
        "wires": [
            [
                "143f9237b038c9eb"
            ]
        ]
    },
    {
        "id": "c0034d0854662786",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "get totals from positions",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(unrealized_pl) as b, sum(market_value) as c from positions where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2040,
        "wires": [
            [
                "f6bc1061db57f6a6"
            ]
        ]
    },
    {
        "id": "97904cb327c2a4a0",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "store sums",
        "func": "let gain_alltime = msg.payload[\"a\"]\nlet gain_today = msg.payload[\"b\"]\nlet total_value = msg.payload[\"c\"]\n\nmsg.totalvalue = total_value\nmsg.gainalltime = gain_alltime\nmsg.gaintoday = gain_today\n\nlet id = msg.name\n\n//node.warn(\"Strategy: \" +id+ \" Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" + total_value + \", gain_today = \" + gain_today + \", gain_alltime = \" + gain_alltime + \" where algo_name = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2100,
        "wires": [
            [
                "2557d6f69a4ea9b2"
            ]
        ]
    },
    {
        "id": "068a8f4d524e3701",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 390,
        "y": 2100,
        "wires": [
            [
                "97904cb327c2a4a0"
            ]
        ]
    },
    {
        "id": "f6bc1061db57f6a6",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 260,
        "y": 2100,
        "wires": [
            [
                "068a8f4d524e3701"
            ]
        ]
    },
    {
        "id": "2557d6f69a4ea9b2",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 2100,
        "wires": [
            [
                "1dacc938f7440e2b"
            ]
        ]
    },
    {
        "id": "1dacc938f7440e2b",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday + \", pctgain_alltime = \" +pctgainalltime+ \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2160,
        "wires": [
            [
                "d15a148659fcbafa"
            ]
        ]
    },
    {
        "id": "d15a148659fcbafa",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "e81915c2679a6d6a",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos where  algo_type = 'interday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2040,
        "wires": [
            [
                "4e2fbea40e916bb5"
            ]
        ]
    },
    {
        "id": "4e2fbea40e916bb5",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 2040,
        "wires": [
            [
                "6c4f016a73392fd8"
            ]
        ]
    },
    {
        "id": "6c4f016a73392fd8",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 2040,
        "wires": [
            [
                "cd2ce8cbf1b23717"
            ]
        ]
    },
    {
        "id": "cd2ce8cbf1b23717",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2040,
        "wires": [
            [
                "c0034d0854662786"
            ]
        ]
    },
    {
        "id": "143f9237b038c9eb",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2040,
        "wires": [
            [
                "e81915c2679a6d6a"
            ]
        ]
    },
    {
        "id": "c5f5fcdfefc6ad3e",
        "type": "alpaca-position-query",
        "z": "8eaa66f97eb5c8f4",
        "conf": "e535f42f1df1b25f",
        "x": 290,
        "y": 1440,
        "wires": [
            [
                "df62bbe7f66c7ff2"
            ]
        ]
    },
    {
        "id": "4a223171d36cd53f",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Truncate balances",
        "props": [
            {
                "p": "query",
                "v": "truncate table balances",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "truncate table daily_balances",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "ed31634e57c8f4a1"
            ]
        ]
    },
    {
        "id": "ed31634e57c8f4a1",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 320,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "df2aa1c5d5f9e063",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Truncate balances_daily",
        "props": [
            {
                "p": "query1",
                "v": "truncate table balances",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "truncate table balances_daily",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 80,
        "wires": [
            [
                "dbc2aeab7c1f1a53"
            ]
        ]
    },
    {
        "id": "dbc2aeab7c1f1a53",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "edde912cb589835b",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "delete from order_confirms",
        "func": "msg.query = \"delete from order_confirms where filled_qty is null;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1900,
        "wires": [
            [
                "ddea75e36b7f32c7"
            ]
        ]
    },
    {
        "id": "ddea75e36b7f32c7",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "9e4ed14f43a26ba4",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1900,
        "wires": [
            [
                "edde912cb589835b"
            ]
        ]
    },
    {
        "id": "2faf1f666741d81d",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "insert PAPER account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('paper', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn('paper')\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1440,
        "wires": [
            [
                "1f0a326f80abba1e"
            ]
        ]
    },
    {
        "id": "1f0a326f80abba1e",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "df62bbe7f66c7ff2",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 1440,
        "wires": [
            [
                "2faf1f666741d81d"
            ]
        ]
    },
    {
        "id": "616e76126c834121",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update from alpaca_assets",
        "func": "msg.query = \"UPDATE positions SET name = alpaca_assets.name FROM alpaca_assets where positions.symbol = alpaca_assets.symbol\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1560,
        "wires": [
            [
                "9056c448d030cc50"
            ]
        ]
    },
    {
        "id": "9056c448d030cc50",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "2abf20d72a9d0def",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update from tickers_live",
        "func": "let sql = \"update positions set id = tickers_live.id, portfolioname = tickers_live.portfolioname, name = tickers_live.name FROM tickers_live where positions.symbol = tickers_live.symbol\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1480,
        "wires": [
            [
                "a1b5adc2b72a32c6"
            ]
        ]
    },
    {
        "id": "a2afe4ce16b75ebe",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update from tickers_paper",
        "func": "let sql = \"update positions set id = tickers_paper.id, portfolioname = tickers_paper.portfolioname, name = tickers_paper.name FROM tickers_paper where positions.symbol = tickers_paper.symbol\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1520,
        "wires": [
            [
                "96e38ae3cc4856b2"
            ]
        ]
    },
    {
        "id": "a1b5adc2b72a32c6",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "96e38ae3cc4856b2",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "194cb80b4872c341",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1480,
        "wires": [
            [
                "2abf20d72a9d0def"
            ]
        ]
    },
    {
        "id": "21446dc5b2d21166",
        "type": "comment",
        "z": "8eaa66f97eb5c8f4",
        "name": "Update from algos table for current prices for intraday strategies",
        "info": "",
        "x": 290,
        "y": 2240,
        "wires": []
    },
    {
        "id": "a4dc897756db6145",
        "type": "inject",
        "z": "8eaa66f97eb5c8f4",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 2300,
        "wires": [
            [
                "b00d285e70683cd2"
            ]
        ]
    },
    {
        "id": "b402dca4e38edf87",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "get totals from positions",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(market_value) as b from positions where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 2300,
        "wires": [
            [
                "7241b40d8dfd100c"
            ]
        ]
    },
    {
        "id": "9b4c190fe1a2248c",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "store sums",
        "func": "let gain_today = msg.payload[\"a\"]\nlet total_value = msg.payload[\"b\"]\n\nmsg.totalvalue = total_value\nmsg.gaintoday = gain_today\n\nlet id = msg.name\n\n//node.warn(\"Strategy: \" +id+ \" Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" + total_value + \", gain_today = \" + gain_today + \" where algo_name = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2360,
        "wires": [
            [
                "5dc35e1391a7d6bc"
            ]
        ]
    },
    {
        "id": "0da40c915ab9d674",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 2360,
        "wires": [
            [
                "9b4c190fe1a2248c"
            ]
        ]
    },
    {
        "id": "7241b40d8dfd100c",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 280,
        "y": 2360,
        "wires": [
            [
                "0da40c915ab9d674"
            ]
        ]
    },
    {
        "id": "5dc35e1391a7d6bc",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 2360,
        "wires": [
            [
                "7bb4c053994d7336"
            ]
        ]
    },
    {
        "id": "7bb4c053994d7336",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday +  \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2420,
        "wires": [
            [
                "2d57ca966a7b36a4"
            ]
        ]
    },
    {
        "id": "2d57ca966a7b36a4",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "d15d1da5e9c26873",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos where  algo_type = 'intraday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2300,
        "wires": [
            [
                "8b6f1ccfd81709d9"
            ]
        ]
    },
    {
        "id": "8b6f1ccfd81709d9",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 2300,
        "wires": [
            [
                "a4c676b20abf842e"
            ]
        ]
    },
    {
        "id": "a4c676b20abf842e",
        "type": "split",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 2300,
        "wires": [
            [
                "cdfc71cbe718bbeb"
            ]
        ]
    },
    {
        "id": "cdfc71cbe718bbeb",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2300,
        "wires": [
            [
                "b402dca4e38edf87"
            ]
        ]
    },
    {
        "id": "b00d285e70683cd2",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 2300,
        "wires": [
            [
                "d15d1da5e9c26873"
            ]
        ]
    },
    {
        "id": "882020bf86f46329",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1050",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1520,
        "wires": [
            [
                "a2afe4ce16b75ebe"
            ]
        ]
    },
    {
        "id": "0ba45ad03f75533d",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1560,
        "wires": [
            [
                "616e76126c834121"
            ]
        ]
    },
    {
        "id": "e9d0e9718104c639",
        "type": "function",
        "z": "8eaa66f97eb5c8f4",
        "name": "update positions for manual orders",
        "func": "msg.query = \"UPDATE positions SET portfolioname = 'Manual Trades', id = '99999999' where id is null\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1600,
        "wires": [
            [
                "c82737154102559b"
            ]
        ]
    },
    {
        "id": "c82737154102559b",
        "type": "postgresql",
        "z": "8eaa66f97eb5c8f4",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "46bccaf976a1458c",
        "type": "delay",
        "z": "8eaa66f97eb5c8f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PKTERXJMFXLHYHYE4R61",
        "paper": true
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKTERXJMFXLHYHYE4R61",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "0d041cfc32f31c07",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]