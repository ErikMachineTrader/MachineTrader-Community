[
    {
        "id": "70f07b94fda04347",
        "type": "tab",
        "label": "Update on Intervals",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "28da687658a87ab4",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "8c50c2691d97f736",
                "0b294e4e3aa2972b"
            ]
        ]
    },
    {
        "id": "8c50c2691d97f736",
        "type": "alpaca-account-query",
        "z": "70f07b94fda04347",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "421a43faf58f7a6b"
            ]
        ]
    },
    {
        "id": "421a43faf58f7a6b",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "Insert into live balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'live'\nbalance = parseInt(balance)\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 140,
        "wires": [
            [
                "88f49dafd22285f3"
            ]
        ]
    },
    {
        "id": "ac94168f4f398143",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Daily at Midnight",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "ec1c0eb4f8eb60b2",
                "e1f39bbd8a5ddfdf"
            ]
        ]
    },
    {
        "id": "ec1c0eb4f8eb60b2",
        "type": "alpaca-account-query",
        "z": "70f07b94fda04347",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "7b3a600d45c16aab"
            ]
        ]
    },
    {
        "id": "92d5ffe0aafeae9b",
        "type": "comment",
        "z": "70f07b94fda04347",
        "name": "Store account balances to sqlite tables",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "0b294e4e3aa2972b",
        "type": "alpaca-account-query",
        "z": "70f07b94fda04347",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 180,
        "wires": [
            [
                "06584fd78c4e922c"
            ]
        ]
    },
    {
        "id": "e1f39bbd8a5ddfdf",
        "type": "alpaca-account-query",
        "z": "70f07b94fda04347",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 260,
        "wires": [
            [
                "3ec4c80a6d30c984"
            ]
        ]
    },
    {
        "id": "06584fd78c4e922c",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "Insert into paper balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n//node.warn(Number.isInteger(balance))\nbalance = parseInt(balance)\n\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "c8dd540d83ddfe6a"
            ]
        ]
    },
    {
        "id": "3ec4c80a6d30c984",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "e4de8df1a4ef6c6b"
            ]
        ]
    },
    {
        "id": "88f49dafd22285f3",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c8dd540d83ddfe6a",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f8c41eaf942343fa",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e4de8df1a4ef6c6b",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7b3a600d45c16aab",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "f8c41eaf942343fa"
            ]
        ]
    },
    {
        "id": "2bb7f1a48a64d033",
        "type": "polygon-last-trade-v3",
        "z": "70f07b94fda04347",
        "conf": "997c798aa39b0b04",
        "symbol": "",
        "x": 900,
        "y": 420,
        "wires": [
            [
                "07d6ca67d5532243"
            ]
        ]
    },
    {
        "id": "47b00d29d047c36d",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select * from markets",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "f347c536c8954c84"
            ]
        ]
    },
    {
        "id": "07d6ca67d5532243",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n    //node.warn(\"Price: \" +price)\n}\n\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "5d0e597556021608"
            ]
        ]
    },
    {
        "id": "e831b41f0e6c0791",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "83ac9311053b5ff0"
            ]
        ]
    },
    {
        "id": "83ac9311053b5ff0",
        "type": "function-npm",
        "z": "70f07b94fda04347",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 420,
        "wires": [
            [
                "2bb7f1a48a64d033"
            ]
        ]
    },
    {
        "id": "20bf376af169adf3",
        "type": "polygon-last-trade-v3",
        "z": "70f07b94fda04347",
        "conf": "997c798aa39b0b04",
        "symbol": "",
        "x": 900,
        "y": 460,
        "wires": [
            [
                "b8caeb1eea3f7e9e"
            ]
        ]
    },
    {
        "id": "909e53e6d9641769",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "2a87161452913764"
            ]
        ]
    },
    {
        "id": "b8caeb1eea3f7e9e",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "4f1dfbbbb7a8774a"
            ]
        ]
    },
    {
        "id": "f1e81323ace297cb",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "5061c0d79dee1c60"
            ]
        ]
    },
    {
        "id": "09ec85286c949f79",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "ca3131570e36bd5d"
            ]
        ]
    },
    {
        "id": "39589c5707b010bd",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 520,
        "wires": [
            [
                "719e31afe716c8bc"
            ]
        ]
    },
    {
        "id": "719e31afe716c8bc",
        "type": "function-npm",
        "z": "70f07b94fda04347",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 520,
        "wires": [
            [
                "b92de22e1e2a9f9d"
            ]
        ]
    },
    {
        "id": "b52fb937afcc7f96",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "calculate changes",
        "func": "msg.query = \"update markets set change24h =  (price24h - closing), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            [
                "56861ddaa63a1ffe"
            ]
        ]
    },
    {
        "id": "dc1398cd5993a3a4",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "calculate pct changes",
        "func": "msg.query = \"update markets set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100) where closing > 0\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "74c54fa54dbb0475"
            ]
        ]
    },
    {
        "id": "db26071330b88f95",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update markets set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "5d7deee1430a4281"
            ]
        ]
    },
    {
        "id": "b92de22e1e2a9f9d",
        "type": "polygon-trades-min-agg-rest",
        "z": "70f07b94fda04347",
        "conf": "997c798aa39b0b04",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 520,
        "wires": [
            [
                "db26071330b88f95"
            ]
        ]
    },
    {
        "id": "f4c0076b8a1fdb81",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "b52fb937afcc7f96"
            ]
        ]
    },
    {
        "id": "d09c512ceb4271ee",
        "type": "comment",
        "z": "70f07b94fda04347",
        "name": "Watchlist Prices",
        "info": "",
        "x": 120,
        "y": 640,
        "wires": []
    },
    {
        "id": "08451a2e69e25d9c",
        "type": "polygon-last-trade-v3",
        "z": "70f07b94fda04347",
        "conf": "997c798aa39b0b04",
        "symbol": "",
        "x": 900,
        "y": 680,
        "wires": [
            [
                "82ebee0f4b36209a"
            ]
        ]
    },
    {
        "id": "82ebee0f4b36209a",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 680,
        "wires": [
            [
                "e171a95b850f6752"
            ]
        ]
    },
    {
        "id": "ca171794fc1ba774",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 680,
        "wires": [
            [
                "98099c6c8fa6900c"
            ]
        ]
    },
    {
        "id": "cb8c5ce4a8e93486",
        "type": "polygon-last-trade-v3",
        "z": "70f07b94fda04347",
        "conf": "997c798aa39b0b04",
        "symbol": "",
        "x": 860,
        "y": 740,
        "wires": [
            [
                "9a42c4fb5c5cd24e"
            ]
        ]
    },
    {
        "id": "9a42c4fb5c5cd24e",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 740,
        "wires": [
            [
                "ce33f61ba054a7c4"
            ]
        ]
    },
    {
        "id": "15b0b117aa7fa4f4",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 740,
        "wires": [
            [
                "c25b9ebcc94ad2a4"
            ]
        ]
    },
    {
        "id": "58e563db5b572f4b",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 800,
        "wires": [
            [
                "5f150b6e3fc925a2"
            ]
        ]
    },
    {
        "id": "fed4a2c057c290d2",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "calculate changes",
        "func": "msg.query = \"update watchlist set change24h =  (price24h - closing), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 860,
        "wires": [
            [
                "aa792c4060ec3257"
            ]
        ]
    },
    {
        "id": "a0281ae426fd560c",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "calculate pct changes",
        "func": "msg.query = \"update watchlist set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100) where closing > 0\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 860,
        "wires": [
            [
                "8cdad49fe685b3a4"
            ]
        ]
    },
    {
        "id": "d0c74b7c6acbb524",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update watchlist set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "fb7c19e2699e7f33"
            ]
        ]
    },
    {
        "id": "099a3ca71dbff30a",
        "type": "polygon-trades-min-agg-rest",
        "z": "70f07b94fda04347",
        "conf": "997c798aa39b0b04",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 800,
        "wires": [
            [
                "d0c74b7c6acbb524"
            ]
        ]
    },
    {
        "id": "430a6e8866420921",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 860,
        "wires": [
            [
                "fed4a2c057c290d2"
            ]
        ]
    },
    {
        "id": "f347c536c8954c84",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 420,
        "wires": [
            [
                "e831b41f0e6c0791"
            ]
        ]
    },
    {
        "id": "5d0e597556021608",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "2a87161452913764",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 460,
        "wires": [
            [
                "f1e81323ace297cb"
            ]
        ]
    },
    {
        "id": "4f1dfbbbb7a8774a",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ca3131570e36bd5d",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 520,
        "wires": [
            [
                "39589c5707b010bd"
            ]
        ]
    },
    {
        "id": "5d7deee1430a4281",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "56861ddaa63a1ffe",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 580,
        "wires": [
            [
                "dc1398cd5993a3a4"
            ]
        ]
    },
    {
        "id": "99c89b5f8734bbd0",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 680,
        "wires": [
            [
                "ca171794fc1ba774"
            ]
        ]
    },
    {
        "id": "e171a95b850f6752",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "b865c22c05a8ea71",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 740,
        "wires": [
            [
                "15b0b117aa7fa4f4"
            ]
        ]
    },
    {
        "id": "ce33f61ba054a7c4",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "fb7c19e2699e7f33",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "c79754f135455c44",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 800,
        "wires": [
            [
                "58e563db5b572f4b"
            ]
        ]
    },
    {
        "id": "aa792c4060ec3257",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 860,
        "wires": [
            [
                "a0281ae426fd560c"
            ]
        ]
    },
    {
        "id": "74c54fa54dbb0475",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "8cdad49fe685b3a4",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "49b7354cd48016aa",
        "type": "comment",
        "z": "70f07b94fda04347",
        "name": "Markets Prices",
        "info": "",
        "x": 120,
        "y": 360,
        "wires": []
    },
    {
        "id": "5061c0d79dee1c60",
        "type": "function-npm",
        "z": "70f07b94fda04347",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 460,
        "wires": [
            [
                "20bf376af169adf3"
            ]
        ]
    },
    {
        "id": "98099c6c8fa6900c",
        "type": "function-npm",
        "z": "70f07b94fda04347",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 680,
        "wires": [
            [
                "08451a2e69e25d9c"
            ]
        ]
    },
    {
        "id": "c25b9ebcc94ad2a4",
        "type": "function-npm",
        "z": "70f07b94fda04347",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 740,
        "wires": [
            [
                "cb8c5ce4a8e93486"
            ]
        ]
    },
    {
        "id": "47cd582437a15d2c",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "99c89b5f8734bbd0"
            ]
        ]
    },
    {
        "id": "eda6aa11b26a0488",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "b865c22c05a8ea71"
            ]
        ]
    },
    {
        "id": "6323790401538ea0",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "c79754f135455c44"
            ]
        ]
    },
    {
        "id": "5f150b6e3fc925a2",
        "type": "function-npm",
        "z": "70f07b94fda04347",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 800,
        "wires": [
            [
                "099a3ca71dbff30a"
            ]
        ]
    },
    {
        "id": "d59d361ad491d06d",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "5a0fe5a1bd7cc305"
            ]
        ]
    },
    {
        "id": "9c2d08f84259ba29",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "71235980733d5438",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "get 500 closed orders live",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "bed56ab6d658b9b6"
            ]
        ]
    },
    {
        "id": "bed56ab6d658b9b6",
        "type": "alpaca-query-order",
        "z": "70f07b94fda04347",
        "conf": "0c86a5f06a42b505",
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "d59d361ad491d06d"
            ]
        ]
    },
    {
        "id": "5a0fe5a1bd7cc305",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'live');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1020,
        "wires": [
            [
                "9c2d08f84259ba29"
            ]
        ]
    },
    {
        "id": "feb1ec748ee06376",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "f2de0c4dd318d7a4"
            ]
        ]
    },
    {
        "id": "3e626067a6403892",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "808aedce824d6a2e",
        "type": "alpaca-query-order",
        "z": "70f07b94fda04347",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "feb1ec748ee06376"
            ]
        ]
    },
    {
        "id": "613125a65de08514",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "get 500 closed orders paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "808aedce824d6a2e"
            ]
        ]
    },
    {
        "id": "f2de0c4dd318d7a4",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1060,
        "wires": [
            [
                "3e626067a6403892"
            ]
        ]
    },
    {
        "id": "b56d127673157c47",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "bc6a530d807bf841",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update symbol from alpaca_assets",
        "func": "msg.query = \"UPDATE orders SET symbol = alpaca_assets.symbol FROM alpaca_assets where orders.symbol = alpaca_assets.alpaca_symbol\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "b56d127673157c47"
            ]
        ]
    },
    {
        "id": "5174a34e8ffdf473",
        "type": "delay",
        "z": "70f07b94fda04347",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1120,
        "wires": [
            [
                "bc6a530d807bf841"
            ]
        ]
    },
    {
        "id": "8d8ce2f2d0b76bab",
        "type": "comment",
        "z": "70f07b94fda04347",
        "name": "Upload Recent Orders",
        "info": "",
        "x": 140,
        "y": 960,
        "wires": []
    },
    {
        "id": "eddc45adece2a44b",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "4:30 am",
        "props": [],
        "repeat": "",
        "crontab": "30 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1020,
        "wires": [
            [
                "71235980733d5438",
                "613125a65de08514",
                "5174a34e8ffdf473"
            ]
        ]
    },
    {
        "id": "a1d4b032c30989b4",
        "type": "alpaca-orders-close",
        "z": "70f07b94fda04347",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 410,
        "y": 1220,
        "wires": [
            [
                "74790ff516d99676"
            ]
        ]
    },
    {
        "id": "b249d94d43dc283c",
        "type": "comment",
        "z": "70f07b94fda04347",
        "name": "Close all orders at 3 AM",
        "info": "",
        "x": 160,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f8ccd89860787bb7",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Close paper account",
        "props": [],
        "repeat": "",
        "crontab": "00 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1220,
        "wires": [
            [
                "a1d4b032c30989b4"
            ]
        ]
    },
    {
        "id": "74790ff516d99676",
        "type": "debug",
        "z": "70f07b94fda04347",
        "name": "debug 176",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f90467aff259c9f7",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "truncate positions table",
        "func": "msg.query = \"truncate table positions\"\n//msg.query = \"drop table positions\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "34bf97a0c011765d"
            ]
        ]
    },
    {
        "id": "34bf97a0c011765d",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 1340,
        "wires": [
            [
                "02fee8f2ccd563d4"
            ]
        ]
    },
    {
        "id": "b69cc5297e60dcc8",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "insert LIVE account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('live', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn('live')\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1400,
        "wires": [
            [
                "9cef48a6586da818"
            ]
        ]
    },
    {
        "id": "02fee8f2ccd563d4",
        "type": "alpaca-position-query",
        "z": "70f07b94fda04347",
        "conf": "0c86a5f06a42b505",
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "5baa5b15677f568b"
            ]
        ]
    },
    {
        "id": "9cef48a6586da818",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "528151ae0dc64c62",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "f90467aff259c9f7",
                "867934b845bcd98d",
                "cbfe61149dc37475",
                "3739be8ab8eae5da",
                "4023d84bcd804d02"
            ]
        ]
    },
    {
        "id": "4cc76fe1630f62b4",
        "type": "comment",
        "z": "70f07b94fda04347",
        "name": "Update positions table",
        "info": "",
        "x": 140,
        "y": 1280,
        "wires": []
    },
    {
        "id": "5baa5b15677f568b",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 1400,
        "wires": [
            [
                "b69cc5297e60dcc8"
            ]
        ]
    },
    {
        "id": "c1562d987f3d1b28",
        "type": "comment",
        "z": "70f07b94fda04347",
        "name": "Update Orders Table ",
        "info": "",
        "x": 110,
        "y": 1620,
        "wires": []
    },
    {
        "id": "cf792e35f0811868",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 1720,
        "wires": [
            [
                "680b7a6f4a8fc114"
            ]
        ]
    },
    {
        "id": "78c7271c92aa624d",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1160,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "fd49663f6f0f7ab9",
        "type": "alpaca-query-order",
        "z": "70f07b94fda04347",
        "conf": "e535f42f1df1b25f",
        "x": 640,
        "y": 1720,
        "wires": [
            [
                "cf792e35f0811868"
            ]
        ]
    },
    {
        "id": "946da2600b3988e6",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "get last 100 closed paper orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1720,
        "wires": [
            [
                "fd49663f6f0f7ab9"
            ]
        ]
    },
    {
        "id": "680b7a6f4a8fc114",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1720,
        "wires": [
            [
                "78c7271c92aa624d"
            ]
        ]
    },
    {
        "id": "0e53d1a2b5751e05",
        "type": "delay",
        "z": "70f07b94fda04347",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 150,
        "y": 1720,
        "wires": [
            [
                "946da2600b3988e6"
            ]
        ]
    },
    {
        "id": "6ed73030fb8d4947",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1660,
        "wires": [
            [
                "3e5950040e133754"
            ]
        ]
    },
    {
        "id": "9b12f4c5cb7e53ea",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update order_confirms from orders",
        "func": "msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created_at,filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\n//msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created.at, filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1760,
        "wires": [
            [
                "97113eace27d1861"
            ]
        ]
    },
    {
        "id": "97113eace27d1861",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "dec6e040c7eb1106",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "truncate orders table",
        "func": "//msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\nmsg.query = \"truncate table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1660,
        "wires": [
            [
                "c3e18dac94ebdf50"
            ]
        ]
    },
    {
        "id": "c3e18dac94ebdf50",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "3e5950040e133754",
        "type": "delay",
        "z": "70f07b94fda04347",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1660,
        "wires": [
            [
                "dec6e040c7eb1106",
                "0e53d1a2b5751e05",
                "bf1f68292967424a"
            ]
        ]
    },
    {
        "id": "bf1f68292967424a",
        "type": "delay",
        "z": "70f07b94fda04347",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 140,
        "y": 1760,
        "wires": [
            [
                "9b12f4c5cb7e53ea"
            ]
        ]
    },
    {
        "id": "aa60d3fdb688ef1f",
        "type": "comment",
        "z": "70f07b94fda04347",
        "name": "Update from algos table for interday strategies",
        "info": "",
        "x": 200,
        "y": 1860,
        "wires": []
    },
    {
        "id": "5edcb4da57270bff",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1920,
        "wires": [
            [
                "cf4837058cb2cece"
            ]
        ]
    },
    {
        "id": "1ce86d92d384cb55",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "get totals from positions",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(unrealized_pl) as b, sum(market_value) as c from positions where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1920,
        "wires": [
            [
                "518061c5a37a5ab7"
            ]
        ]
    },
    {
        "id": "b3705f4b78704e58",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "store sums",
        "func": "let gain_alltime = msg.payload[\"a\"]\nlet gain_today = msg.payload[\"b\"]\nlet total_value = msg.payload[\"c\"]\n\nmsg.totalvalue = total_value\nmsg.gainalltime = gain_alltime\nmsg.gaintoday = gain_today\n\nlet id = msg.name\n\n//node.warn(\"Strategy: \" +id+ \" Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" + total_value + \", gain_today = \" + gain_today + \", gain_alltime = \" + gain_alltime + \" where algo_name = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1980,
        "wires": [
            [
                "7e0cfd178bfe7288"
            ]
        ]
    },
    {
        "id": "2d6034102b5c87dc",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 370,
        "y": 1980,
        "wires": [
            [
                "b3705f4b78704e58"
            ]
        ]
    },
    {
        "id": "518061c5a37a5ab7",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 240,
        "y": 1980,
        "wires": [
            [
                "2d6034102b5c87dc"
            ]
        ]
    },
    {
        "id": "7e0cfd178bfe7288",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 1980,
        "wires": [
            [
                "57ccadecdb11411a"
            ]
        ]
    },
    {
        "id": "57ccadecdb11411a",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday + \", pctgain_alltime = \" +pctgainalltime+ \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2040,
        "wires": [
            [
                "620040a2a43c1847"
            ]
        ]
    },
    {
        "id": "620040a2a43c1847",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "7125433d5d060fcb",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos where  algo_type = 'interday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1920,
        "wires": [
            [
                "0314c3b5460ae221"
            ]
        ]
    },
    {
        "id": "0314c3b5460ae221",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 1920,
        "wires": [
            [
                "8011cb2723c07e88"
            ]
        ]
    },
    {
        "id": "8011cb2723c07e88",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 1920,
        "wires": [
            [
                "2e201119e711a927"
            ]
        ]
    },
    {
        "id": "2e201119e711a927",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1920,
        "wires": [
            [
                "1ce86d92d384cb55"
            ]
        ]
    },
    {
        "id": "cf4837058cb2cece",
        "type": "delay",
        "z": "70f07b94fda04347",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1920,
        "wires": [
            [
                "7125433d5d060fcb"
            ]
        ]
    },
    {
        "id": "867934b845bcd98d",
        "type": "alpaca-position-query",
        "z": "70f07b94fda04347",
        "conf": "e535f42f1df1b25f",
        "x": 290,
        "y": 1440,
        "wires": [
            [
                "2f2f212b6385c5ed"
            ]
        ]
    },
    {
        "id": "e33aef22ed18c50c",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Truncate balances",
        "props": [
            {
                "p": "query",
                "v": "truncate table balances",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "truncate table daily_balances",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "23e38f0ed45b1da4"
            ]
        ]
    },
    {
        "id": "23e38f0ed45b1da4",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 320,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d41434fc6e9744e5",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Truncate balances_daily",
        "props": [
            {
                "p": "query1",
                "v": "truncate table balances",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "truncate table balances_daily",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 80,
        "wires": [
            [
                "073dd6706dd950e8"
            ]
        ]
    },
    {
        "id": "073dd6706dd950e8",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "2e1b6d570b4a59b1",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "delete from order_confirms",
        "func": "msg.query = \"delete from order_confirms where filled_qty is null;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1800,
        "wires": [
            [
                "b3712d881fe446ec"
            ]
        ]
    },
    {
        "id": "b3712d881fe446ec",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "1894e3f8a4646f78",
        "type": "delay",
        "z": "70f07b94fda04347",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 140,
        "y": 1800,
        "wires": [
            [
                "2e1b6d570b4a59b1"
            ]
        ]
    },
    {
        "id": "2fe08c01021ed859",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "insert PAPER account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('paper', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn('paper')\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1440,
        "wires": [
            [
                "12f5344d0b858509"
            ]
        ]
    },
    {
        "id": "12f5344d0b858509",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "2f2f212b6385c5ed",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 1440,
        "wires": [
            [
                "2fe08c01021ed859"
            ]
        ]
    },
    {
        "id": "cff39994351d975e",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update from alpaca_assets",
        "func": "msg.query = \"UPDATE positions SET name = alpaca_assets.name FROM alpaca_assets where positions.symbol = alpaca_assets.symbol\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1560,
        "wires": [
            [
                "2e3cc95d35cde87d"
            ]
        ]
    },
    {
        "id": "2e3cc95d35cde87d",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "124bd86fafb18aba",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update from tickers_live",
        "func": "let sql = \"update positions set id = tickers_live.id, portfolioname = tickers_live.portfolioname, name = tickers_live.name FROM tickers_live where positions.symbol = tickers_live.symbol\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1480,
        "wires": [
            [
                "7d9892bb9e7992cb"
            ]
        ]
    },
    {
        "id": "ed85fff00e4e3568",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update from tickers_paper",
        "func": "let sql = \"update positions set id = tickers_paper.id, portfolioname = tickers_paper.portfolioname, name = tickers_paper.name FROM tickers_paper where positions.symbol = tickers_paper.symbol\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1520,
        "wires": [
            [
                "1a5b7f93e119e5a0"
            ]
        ]
    },
    {
        "id": "7d9892bb9e7992cb",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "1a5b7f93e119e5a0",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "cbfe61149dc37475",
        "type": "delay",
        "z": "70f07b94fda04347",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1480,
        "wires": [
            [
                "124bd86fafb18aba"
            ]
        ]
    },
    {
        "id": "1e57e1fef674b9b1",
        "type": "comment",
        "z": "70f07b94fda04347",
        "name": "Update from algos table for current prices for intraday strategies",
        "info": "",
        "x": 270,
        "y": 2120,
        "wires": []
    },
    {
        "id": "9c7ca5642072ed54",
        "type": "inject",
        "z": "70f07b94fda04347",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2180,
        "wires": [
            [
                "8684711d0c788ada"
            ]
        ]
    },
    {
        "id": "dbd10ebe67a3ec3d",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "get totals from positions",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(market_value) as b from positions where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2180,
        "wires": [
            [
                "33268c822a753786"
            ]
        ]
    },
    {
        "id": "d3757f983c575fb9",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "store sums",
        "func": "let gain_today = msg.payload[\"a\"]\nlet total_value = msg.payload[\"b\"]\n\nmsg.totalvalue = total_value\nmsg.gaintoday = gain_today\n\nlet id = msg.name\n\n//node.warn(\"Strategy: \" +id+ \" Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" + total_value + \", gain_today = \" + gain_today + \" where algo_name = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2240,
        "wires": [
            [
                "d8b7c19bf1547ed0"
            ]
        ]
    },
    {
        "id": "38634587148f59e5",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 390,
        "y": 2240,
        "wires": [
            [
                "d3757f983c575fb9"
            ]
        ]
    },
    {
        "id": "33268c822a753786",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 260,
        "y": 2240,
        "wires": [
            [
                "38634587148f59e5"
            ]
        ]
    },
    {
        "id": "d8b7c19bf1547ed0",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 2240,
        "wires": [
            [
                "d7a7ae53aed2fee9"
            ]
        ]
    },
    {
        "id": "d7a7ae53aed2fee9",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday +  \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2300,
        "wires": [
            [
                "424c583e47846c4c"
            ]
        ]
    },
    {
        "id": "424c583e47846c4c",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "287b520e63ed6849",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos where  algo_type = 'intraday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2180,
        "wires": [
            [
                "e0819569a358475b"
            ]
        ]
    },
    {
        "id": "e0819569a358475b",
        "type": "postgresql",
        "z": "70f07b94fda04347",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 2180,
        "wires": [
            [
                "0929797169af5a19"
            ]
        ]
    },
    {
        "id": "0929797169af5a19",
        "type": "split",
        "z": "70f07b94fda04347",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 2180,
        "wires": [
            [
                "32f974d29efe83e5"
            ]
        ]
    },
    {
        "id": "32f974d29efe83e5",
        "type": "function",
        "z": "70f07b94fda04347",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2180,
        "wires": [
            [
                "dbd10ebe67a3ec3d"
            ]
        ]
    },
    {
        "id": "8684711d0c788ada",
        "type": "delay",
        "z": "70f07b94fda04347",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2180,
        "wires": [
            [
                "287b520e63ed6849"
            ]
        ]
    },
    {
        "id": "3739be8ab8eae5da",
        "type": "delay",
        "z": "70f07b94fda04347",
        "name": "",
        "pauseType": "delay",
        "timeout": "1050",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1520,
        "wires": [
            [
                "ed85fff00e4e3568"
            ]
        ]
    },
    {
        "id": "4023d84bcd804d02",
        "type": "delay",
        "z": "70f07b94fda04347",
        "name": "",
        "pauseType": "delay",
        "timeout": "1100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1560,
        "wires": [
            [
                "cff39994351d975e"
            ]
        ]
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PKA7ZL2KR9705ERT2BCO",
        "paper": true
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKA7ZL2KR9705ERT2BCO",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "997c798aa39b0b04",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]