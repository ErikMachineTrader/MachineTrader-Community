[
    {
        "id": "b50ca0dd2985728a",
        "type": "tab",
        "label": "Update on Intervals",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4302a7294ddc953e",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "8bf5d50a287b2af9",
                "cef253b7bd92e35b"
            ]
        ]
    },
    {
        "id": "8bf5d50a287b2af9",
        "type": "alpaca-account-query",
        "z": "b50ca0dd2985728a",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "07f538a80b45e57f"
            ]
        ]
    },
    {
        "id": "07f538a80b45e57f",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "Insert into live balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'live'\nbalance = parseInt(balance)\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 140,
        "wires": [
            [
                "60ea1b9dc2667667"
            ]
        ]
    },
    {
        "id": "75edb433ae293e5c",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Daily at Midnight",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "ccaa8ace79da4ff6",
                "7ef482942ca439b5"
            ]
        ]
    },
    {
        "id": "ccaa8ace79da4ff6",
        "type": "alpaca-account-query",
        "z": "b50ca0dd2985728a",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "64ba50231574989f"
            ]
        ]
    },
    {
        "id": "de6fef462acace82",
        "type": "comment",
        "z": "b50ca0dd2985728a",
        "name": "Store account balances to sqlite tables",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "cef253b7bd92e35b",
        "type": "alpaca-account-query",
        "z": "b50ca0dd2985728a",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 180,
        "wires": [
            [
                "377fb0b541cf1e44"
            ]
        ]
    },
    {
        "id": "7ef482942ca439b5",
        "type": "alpaca-account-query",
        "z": "b50ca0dd2985728a",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 260,
        "wires": [
            [
                "e0e537158a16b34e"
            ]
        ]
    },
    {
        "id": "377fb0b541cf1e44",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "Insert into paper balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n//node.warn(Number.isInteger(balance))\nbalance = parseInt(balance)\n\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "3a24b15e4a6b513b"
            ]
        ]
    },
    {
        "id": "e0e537158a16b34e",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "0a9c24136f52233f"
            ]
        ]
    },
    {
        "id": "60ea1b9dc2667667",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "3a24b15e4a6b513b",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2b33cc8f880c6fb9",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "0a9c24136f52233f",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "64ba50231574989f",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "2b33cc8f880c6fb9"
            ]
        ]
    },
    {
        "id": "6cd7813357651061",
        "type": "polygon-last-trade-v3",
        "z": "b50ca0dd2985728a",
        "conf": "fd8867127ba3e5c1",
        "symbol": "",
        "x": 900,
        "y": 420,
        "wires": [
            [
                "407710a36882e826"
            ]
        ]
    },
    {
        "id": "a09b876a7a98407d",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select * from markets",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "8291d95f08bbfae2"
            ]
        ]
    },
    {
        "id": "407710a36882e826",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n    //node.warn(\"Price: \" +price)\n}\n\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "b78461713a94b7fc"
            ]
        ]
    },
    {
        "id": "ee03e878b8d18470",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "9f87b226f0c3b969"
            ]
        ]
    },
    {
        "id": "9f87b226f0c3b969",
        "type": "function-npm",
        "z": "b50ca0dd2985728a",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 420,
        "wires": [
            [
                "6cd7813357651061"
            ]
        ]
    },
    {
        "id": "574955de37af2ba7",
        "type": "polygon-last-trade-v3",
        "z": "b50ca0dd2985728a",
        "conf": "fd8867127ba3e5c1",
        "symbol": "",
        "x": 900,
        "y": 460,
        "wires": [
            [
                "2879cf86e7d02f64"
            ]
        ]
    },
    {
        "id": "612c5a54bccbfebb",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "c91cf12b4e8d8f5a"
            ]
        ]
    },
    {
        "id": "2879cf86e7d02f64",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "6a6fb3b2dbb3885b"
            ]
        ]
    },
    {
        "id": "a81dfe10c9c63f28",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "e59bf0eaeed4cbb3"
            ]
        ]
    },
    {
        "id": "cc815ec03b5522e9",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "0108a6bf53bedb52"
            ]
        ]
    },
    {
        "id": "4f20cee11e54583e",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 520,
        "wires": [
            [
                "a8a27154b390aa49"
            ]
        ]
    },
    {
        "id": "a8a27154b390aa49",
        "type": "function-npm",
        "z": "b50ca0dd2985728a",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 520,
        "wires": [
            [
                "cd709a43233607b3"
            ]
        ]
    },
    {
        "id": "252b20d31257fd0c",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "calculate changes",
        "func": "msg.query = \"update markets set change24h =  (closing - price24h), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            [
                "445bfcedc076eeea"
            ]
        ]
    },
    {
        "id": "b1ccf2de4b4b15fd",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "calculate pct changes",
        "func": "msg.query = \"update markets set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100) where closing > 0\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "df0d70bfc43b6ceb"
            ]
        ]
    },
    {
        "id": "8e95c6a126239e3d",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update markets set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "9b431ea5915d6a15"
            ]
        ]
    },
    {
        "id": "cd709a43233607b3",
        "type": "polygon-trades-min-agg-rest",
        "z": "b50ca0dd2985728a",
        "conf": "fd8867127ba3e5c1",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 520,
        "wires": [
            [
                "8e95c6a126239e3d"
            ]
        ]
    },
    {
        "id": "d397fdd849375d0f",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "252b20d31257fd0c"
            ]
        ]
    },
    {
        "id": "108d55055d9ae2db",
        "type": "comment",
        "z": "b50ca0dd2985728a",
        "name": "Watchlist Prices",
        "info": "",
        "x": 120,
        "y": 640,
        "wires": []
    },
    {
        "id": "907a491fa701f678",
        "type": "polygon-last-trade-v3",
        "z": "b50ca0dd2985728a",
        "conf": "fd8867127ba3e5c1",
        "symbol": "",
        "x": 900,
        "y": 680,
        "wires": [
            [
                "2caf243c9cb75223"
            ]
        ]
    },
    {
        "id": "2caf243c9cb75223",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 680,
        "wires": [
            [
                "02c9b37e93e9d3f6"
            ]
        ]
    },
    {
        "id": "2b8edbd971ed7dbb",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 680,
        "wires": [
            [
                "9037590992580384"
            ]
        ]
    },
    {
        "id": "c4d1d4af462aa689",
        "type": "polygon-last-trade-v3",
        "z": "b50ca0dd2985728a",
        "conf": "fd8867127ba3e5c1",
        "symbol": "",
        "x": 860,
        "y": 740,
        "wires": [
            [
                "0651631ee6b42708"
            ]
        ]
    },
    {
        "id": "0651631ee6b42708",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 740,
        "wires": [
            [
                "f942f5f4230de0e5"
            ]
        ]
    },
    {
        "id": "9e33f7a0d7aba5fa",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 740,
        "wires": [
            [
                "cf1fe0663bb52419"
            ]
        ]
    },
    {
        "id": "35ed347812471696",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 800,
        "wires": [
            [
                "1124597b8e8e9659"
            ]
        ]
    },
    {
        "id": "88d61bf087625968",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "calculate changes",
        "func": "msg.query = \"update watchlist set change24h =  (closing - price24h), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 860,
        "wires": [
            [
                "d9eaa4afa32418a0"
            ]
        ]
    },
    {
        "id": "cdddb49e5cf2c584",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "calculate pct changes",
        "func": "msg.query = \"update watchlist set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100) where closing > 0\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 860,
        "wires": [
            [
                "edfdf318fdd5b42a"
            ]
        ]
    },
    {
        "id": "7fd52feb6a6ea8f6",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update watchlist set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "b1183f473105b1b7"
            ]
        ]
    },
    {
        "id": "74be71cf4400ca6a",
        "type": "polygon-trades-min-agg-rest",
        "z": "b50ca0dd2985728a",
        "conf": "fd8867127ba3e5c1",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 800,
        "wires": [
            [
                "7fd52feb6a6ea8f6"
            ]
        ]
    },
    {
        "id": "700dbce63cf4ae71",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 860,
        "wires": [
            [
                "88d61bf087625968"
            ]
        ]
    },
    {
        "id": "8291d95f08bbfae2",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 420,
        "wires": [
            [
                "ee03e878b8d18470"
            ]
        ]
    },
    {
        "id": "b78461713a94b7fc",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "c91cf12b4e8d8f5a",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 460,
        "wires": [
            [
                "a81dfe10c9c63f28"
            ]
        ]
    },
    {
        "id": "6a6fb3b2dbb3885b",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "0108a6bf53bedb52",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 520,
        "wires": [
            [
                "4f20cee11e54583e"
            ]
        ]
    },
    {
        "id": "9b431ea5915d6a15",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "445bfcedc076eeea",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 580,
        "wires": [
            [
                "b1ccf2de4b4b15fd"
            ]
        ]
    },
    {
        "id": "ea43e27e11b5981a",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 680,
        "wires": [
            [
                "2b8edbd971ed7dbb"
            ]
        ]
    },
    {
        "id": "02c9b37e93e9d3f6",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "5a944365afb7974a",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 740,
        "wires": [
            [
                "9e33f7a0d7aba5fa"
            ]
        ]
    },
    {
        "id": "f942f5f4230de0e5",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "b1183f473105b1b7",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "357ca549b8363d5e",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 800,
        "wires": [
            [
                "35ed347812471696"
            ]
        ]
    },
    {
        "id": "d9eaa4afa32418a0",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 860,
        "wires": [
            [
                "cdddb49e5cf2c584"
            ]
        ]
    },
    {
        "id": "df0d70bfc43b6ceb",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "edfdf318fdd5b42a",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "6025689102baffe9",
        "type": "comment",
        "z": "b50ca0dd2985728a",
        "name": "Markets Prices",
        "info": "",
        "x": 120,
        "y": 360,
        "wires": []
    },
    {
        "id": "e59bf0eaeed4cbb3",
        "type": "function-npm",
        "z": "b50ca0dd2985728a",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 460,
        "wires": [
            [
                "574955de37af2ba7"
            ]
        ]
    },
    {
        "id": "9037590992580384",
        "type": "function-npm",
        "z": "b50ca0dd2985728a",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 680,
        "wires": [
            [
                "907a491fa701f678"
            ]
        ]
    },
    {
        "id": "cf1fe0663bb52419",
        "type": "function-npm",
        "z": "b50ca0dd2985728a",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 740,
        "wires": [
            [
                "c4d1d4af462aa689"
            ]
        ]
    },
    {
        "id": "36004d674f5a4202",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "ea43e27e11b5981a"
            ]
        ]
    },
    {
        "id": "3a0ea25b3673442a",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "5a944365afb7974a"
            ]
        ]
    },
    {
        "id": "edb173c044afc5a8",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "357ca549b8363d5e"
            ]
        ]
    },
    {
        "id": "1124597b8e8e9659",
        "type": "function-npm",
        "z": "b50ca0dd2985728a",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 800,
        "wires": [
            [
                "74be71cf4400ca6a"
            ]
        ]
    },
    {
        "id": "77a1d7746d074b30",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "0b2a9fe4f9f8827b"
            ]
        ]
    },
    {
        "id": "d37723f33e321aaf",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "5ef75cfb74cdb7ba",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "get 500 closed orders live",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "74ae6e764bb9a2ed"
            ]
        ]
    },
    {
        "id": "74ae6e764bb9a2ed",
        "type": "alpaca-query-order",
        "z": "b50ca0dd2985728a",
        "conf": "0c86a5f06a42b505",
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "77a1d7746d074b30"
            ]
        ]
    },
    {
        "id": "0b2a9fe4f9f8827b",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'live');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1020,
        "wires": [
            [
                "d37723f33e321aaf"
            ]
        ]
    },
    {
        "id": "94088e36bc5fc096",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "07e44f093f2f94ce"
            ]
        ]
    },
    {
        "id": "adddf06be3e314d8",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "e196c1f33ea59bbf",
        "type": "alpaca-query-order",
        "z": "b50ca0dd2985728a",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "94088e36bc5fc096"
            ]
        ]
    },
    {
        "id": "3d11c88d185530d3",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "get 500 closed orders paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "e196c1f33ea59bbf"
            ]
        ]
    },
    {
        "id": "07e44f093f2f94ce",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1060,
        "wires": [
            [
                "adddf06be3e314d8"
            ]
        ]
    },
    {
        "id": "2b004a43256432fa",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "97c2846f94072bee",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update symbol from alpaca_assets",
        "func": "msg.query = \"UPDATE orders SET symbol = alpaca_assets.symbol FROM alpaca_assets where orders.symbol = alpaca_assets.alpaca_symbol\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "2b004a43256432fa"
            ]
        ]
    },
    {
        "id": "e690068d76792eb0",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1120,
        "wires": [
            [
                "97c2846f94072bee"
            ]
        ]
    },
    {
        "id": "3e20854295421f42",
        "type": "comment",
        "z": "b50ca0dd2985728a",
        "name": "Upload Recent Orders",
        "info": "",
        "x": 140,
        "y": 960,
        "wires": []
    },
    {
        "id": "1248dff44104d215",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "4:30 am",
        "props": [],
        "repeat": "",
        "crontab": "30 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1020,
        "wires": [
            [
                "5ef75cfb74cdb7ba",
                "3d11c88d185530d3",
                "e690068d76792eb0"
            ]
        ]
    },
    {
        "id": "db36bd5b3acc4892",
        "type": "alpaca-orders-close",
        "z": "b50ca0dd2985728a",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 410,
        "y": 1220,
        "wires": [
            [
                "4addb5c5ee97c1da"
            ]
        ]
    },
    {
        "id": "8108edb94f25f7f5",
        "type": "comment",
        "z": "b50ca0dd2985728a",
        "name": "Close all orders at 3 AM",
        "info": "",
        "x": 160,
        "y": 1180,
        "wires": []
    },
    {
        "id": "234c1f8d48f934b0",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Close paper account",
        "props": [],
        "repeat": "",
        "crontab": "00 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1220,
        "wires": [
            [
                "db36bd5b3acc4892"
            ]
        ]
    },
    {
        "id": "4addb5c5ee97c1da",
        "type": "debug",
        "z": "b50ca0dd2985728a",
        "name": "debug 176",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1220,
        "wires": []
    },
    {
        "id": "2c92f3bc7801e11f",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "truncate positions table",
        "func": "msg.query = \"truncate table positions\"\n//msg.query = \"drop table positions\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "c6a94895471fb439"
            ]
        ]
    },
    {
        "id": "c6a94895471fb439",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 1340,
        "wires": [
            [
                "fd67d34fd8dfd337"
            ]
        ]
    },
    {
        "id": "4aa1631741f3adfb",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "insert LIVE account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('live', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn('live')\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1400,
        "wires": [
            [
                "804cfcf66161d6ca"
            ]
        ]
    },
    {
        "id": "fd67d34fd8dfd337",
        "type": "alpaca-position-query",
        "z": "b50ca0dd2985728a",
        "conf": "0c86a5f06a42b505",
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "b027508e2b3a8a6d"
            ]
        ]
    },
    {
        "id": "804cfcf66161d6ca",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "6268cffa086b5ce9",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "2c92f3bc7801e11f",
                "c3eee4592775d5e2",
                "d7c4ea52cd7faeda",
                "8e40cf3473339a8f",
                "c9f94989545db458",
                "2259da7b5141dea0"
            ]
        ]
    },
    {
        "id": "9380d5aed8758101",
        "type": "comment",
        "z": "b50ca0dd2985728a",
        "name": "Update positions table",
        "info": "",
        "x": 140,
        "y": 1280,
        "wires": []
    },
    {
        "id": "b027508e2b3a8a6d",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 1400,
        "wires": [
            [
                "4aa1631741f3adfb"
            ]
        ]
    },
    {
        "id": "ba0af02ca8c8a5fa",
        "type": "comment",
        "z": "b50ca0dd2985728a",
        "name": "Update Orders Table ",
        "info": "",
        "x": 130,
        "y": 1720,
        "wires": []
    },
    {
        "id": "d469773bf97ffca6",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 1820,
        "wires": [
            [
                "a466a931a0a61d51"
            ]
        ]
    },
    {
        "id": "6b99606aa148b01d",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "5a32fc45618ec9df",
        "type": "alpaca-query-order",
        "z": "b50ca0dd2985728a",
        "conf": "e535f42f1df1b25f",
        "x": 660,
        "y": 1820,
        "wires": [
            [
                "d469773bf97ffca6"
            ]
        ]
    },
    {
        "id": "45875843b6613e62",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "get last 100 closed paper orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1820,
        "wires": [
            [
                "5a32fc45618ec9df"
            ]
        ]
    },
    {
        "id": "a466a931a0a61d51",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1820,
        "wires": [
            [
                "6b99606aa148b01d"
            ]
        ]
    },
    {
        "id": "60a1fbc773b23548",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 1820,
        "wires": [
            [
                "45875843b6613e62"
            ]
        ]
    },
    {
        "id": "a1e4e73c8387aa1a",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1760,
        "wires": [
            [
                "ed762db1e4681306"
            ]
        ]
    },
    {
        "id": "2ea39db13c67f184",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update order_confirms from orders",
        "func": "msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created_at,filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\n//msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created.at, filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1860,
        "wires": [
            [
                "39dcefa88c55c247"
            ]
        ]
    },
    {
        "id": "39dcefa88c55c247",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "722ae2f41e3010ee",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "truncate orders table",
        "func": "//msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\nmsg.query = \"truncate table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1760,
        "wires": [
            [
                "73630a2478d8ad86"
            ]
        ]
    },
    {
        "id": "73630a2478d8ad86",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "ed762db1e4681306",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1760,
        "wires": [
            [
                "722ae2f41e3010ee",
                "60a1fbc773b23548",
                "ceb8658a2e5660f4"
            ]
        ]
    },
    {
        "id": "ceb8658a2e5660f4",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1860,
        "wires": [
            [
                "2ea39db13c67f184"
            ]
        ]
    },
    {
        "id": "68f17eb57708f804",
        "type": "comment",
        "z": "b50ca0dd2985728a",
        "name": "Update from algos table for interday strategies",
        "info": "",
        "x": 220,
        "y": 1980,
        "wires": []
    },
    {
        "id": "95f4d5fbc16b63ef",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2040,
        "wires": [
            [
                "7390e88379205062"
            ]
        ]
    },
    {
        "id": "59ab03f1b0986f44",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "get totals from positions",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(unrealized_pl) as b, sum(market_value) as c from positions where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2040,
        "wires": [
            [
                "55d84c8a57574b92"
            ]
        ]
    },
    {
        "id": "5c4df42bce2a3714",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "store sums",
        "func": "let gain_alltime = msg.payload[\"a\"]\nlet gain_today = msg.payload[\"b\"]\nlet total_value = msg.payload[\"c\"]\n\nmsg.totalvalue = total_value\nmsg.gainalltime = gain_alltime\nmsg.gaintoday = gain_today\n\nlet id = msg.name\n\n//node.warn(\"Strategy: \" +id+ \" Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" + total_value + \", gain_today = \" + gain_today + \", gain_alltime = \" + gain_alltime + \" where algo_name = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2100,
        "wires": [
            [
                "5c2e7d7343ba8838"
            ]
        ]
    },
    {
        "id": "4d8aac4f622eab79",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 390,
        "y": 2100,
        "wires": [
            [
                "5c4df42bce2a3714"
            ]
        ]
    },
    {
        "id": "55d84c8a57574b92",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 260,
        "y": 2100,
        "wires": [
            [
                "4d8aac4f622eab79"
            ]
        ]
    },
    {
        "id": "5c2e7d7343ba8838",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 2100,
        "wires": [
            [
                "af44d6ff3c353602"
            ]
        ]
    },
    {
        "id": "af44d6ff3c353602",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday + \", pctgain_alltime = \" +pctgainalltime+ \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2160,
        "wires": [
            [
                "eafc497e2532d849"
            ]
        ]
    },
    {
        "id": "eafc497e2532d849",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "b5ea421cb9998456",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos where  algo_type = 'interday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2040,
        "wires": [
            [
                "1528de17491b2aef"
            ]
        ]
    },
    {
        "id": "1528de17491b2aef",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 2040,
        "wires": [
            [
                "f648574724488203"
            ]
        ]
    },
    {
        "id": "f648574724488203",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 2040,
        "wires": [
            [
                "37b95fb153610483"
            ]
        ]
    },
    {
        "id": "37b95fb153610483",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2040,
        "wires": [
            [
                "59ab03f1b0986f44"
            ]
        ]
    },
    {
        "id": "7390e88379205062",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2040,
        "wires": [
            [
                "b5ea421cb9998456"
            ]
        ]
    },
    {
        "id": "c3eee4592775d5e2",
        "type": "alpaca-position-query",
        "z": "b50ca0dd2985728a",
        "conf": "e535f42f1df1b25f",
        "x": 290,
        "y": 1440,
        "wires": [
            [
                "478b7f8da0ec3259"
            ]
        ]
    },
    {
        "id": "5f328fe16cebf9c3",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Truncate balances",
        "props": [
            {
                "p": "query",
                "v": "truncate table balances",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "truncate table daily_balances",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "7034a8eda727998c"
            ]
        ]
    },
    {
        "id": "7034a8eda727998c",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 320,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "453c9da998987ebf",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Truncate balances_daily",
        "props": [
            {
                "p": "query1",
                "v": "truncate table balances",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "truncate table balances_daily",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 80,
        "wires": [
            [
                "0b0cacf71c15ed71"
            ]
        ]
    },
    {
        "id": "0b0cacf71c15ed71",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "91b7e2517cde1556",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "delete from order_confirms",
        "func": "msg.query = \"delete from order_confirms where filled_qty is null;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1900,
        "wires": [
            [
                "4125dc97a1463fc3"
            ]
        ]
    },
    {
        "id": "4125dc97a1463fc3",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "e3fc6915a3bb8c21",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1900,
        "wires": [
            [
                "91b7e2517cde1556"
            ]
        ]
    },
    {
        "id": "f7fa2edfca6a2435",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "insert PAPER account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('paper', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn('paper')\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1440,
        "wires": [
            [
                "1b117da1a3fedd0d"
            ]
        ]
    },
    {
        "id": "1b117da1a3fedd0d",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "478b7f8da0ec3259",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 1440,
        "wires": [
            [
                "f7fa2edfca6a2435"
            ]
        ]
    },
    {
        "id": "2fad598817853524",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update from alpaca_assets",
        "func": "msg.query = \"UPDATE positions SET name = alpaca_assets.name FROM alpaca_assets where positions.symbol = alpaca_assets.symbol\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1560,
        "wires": [
            [
                "b0c5ba243d19393d"
            ]
        ]
    },
    {
        "id": "b0c5ba243d19393d",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "180b9ea76b13a388",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update from tickers_live",
        "func": "let sql = \"update positions set id = tickers_live.id, portfolioname = tickers_live.portfolioname, name = tickers_live.name FROM tickers_live where positions.symbol = tickers_live.symbol\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1480,
        "wires": [
            [
                "6c573c1be8b2f29f"
            ]
        ]
    },
    {
        "id": "afaec8027a5e42e9",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update from tickers_paper",
        "func": "let sql = \"update positions set id = tickers_paper.id, portfolioname = tickers_paper.portfolioname, name = tickers_paper.name FROM tickers_paper where positions.symbol = tickers_paper.symbol\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1520,
        "wires": [
            [
                "67079ccc3e6bf2f9"
            ]
        ]
    },
    {
        "id": "6c573c1be8b2f29f",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "67079ccc3e6bf2f9",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "d7c4ea52cd7faeda",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1480,
        "wires": [
            [
                "180b9ea76b13a388"
            ]
        ]
    },
    {
        "id": "8f054fbd62180704",
        "type": "comment",
        "z": "b50ca0dd2985728a",
        "name": "Update from algos table for current prices for intraday strategies",
        "info": "",
        "x": 290,
        "y": 2240,
        "wires": []
    },
    {
        "id": "52965e38aa868e07",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 2300,
        "wires": [
            [
                "759eb45322cc86a0"
            ]
        ]
    },
    {
        "id": "def9e3fc935f83db",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "get totals from positions",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(market_value) as b from positions where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 2300,
        "wires": [
            [
                "19bfa0f64a431d7f"
            ]
        ]
    },
    {
        "id": "f25f30f9f6038ff6",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "store sums",
        "func": "let gain_today = msg.payload[\"a\"]\nlet total_value = msg.payload[\"b\"]\n\nmsg.totalvalue = total_value\nmsg.gaintoday = gain_today\n\nlet id = msg.name\n\n//node.warn(\"Strategy: \" +id+ \" Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" + total_value + \", gain_today = \" + gain_today + \" where algo_name = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2360,
        "wires": [
            [
                "85ed74f66c95e480"
            ]
        ]
    },
    {
        "id": "c6d189e9dd9a5127",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 2360,
        "wires": [
            [
                "f25f30f9f6038ff6"
            ]
        ]
    },
    {
        "id": "19bfa0f64a431d7f",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 280,
        "y": 2360,
        "wires": [
            [
                "c6d189e9dd9a5127"
            ]
        ]
    },
    {
        "id": "85ed74f66c95e480",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 2360,
        "wires": [
            [
                "66e051df230777cb"
            ]
        ]
    },
    {
        "id": "66e051df230777cb",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday +  \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2420,
        "wires": [
            [
                "31c0fb49c8058c3f"
            ]
        ]
    },
    {
        "id": "31c0fb49c8058c3f",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "81750e343db4f2d8",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos where  algo_type = 'intraday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2300,
        "wires": [
            [
                "c9592d24abc33687"
            ]
        ]
    },
    {
        "id": "c9592d24abc33687",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 2300,
        "wires": [
            [
                "a5c986cb7cb5fbe8"
            ]
        ]
    },
    {
        "id": "a5c986cb7cb5fbe8",
        "type": "split",
        "z": "b50ca0dd2985728a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 2300,
        "wires": [
            [
                "14be79ea6be583e6"
            ]
        ]
    },
    {
        "id": "14be79ea6be583e6",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2300,
        "wires": [
            [
                "def9e3fc935f83db"
            ]
        ]
    },
    {
        "id": "759eb45322cc86a0",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 2300,
        "wires": [
            [
                "81750e343db4f2d8"
            ]
        ]
    },
    {
        "id": "8e40cf3473339a8f",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1050",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1520,
        "wires": [
            [
                "afaec8027a5e42e9"
            ]
        ]
    },
    {
        "id": "c9f94989545db458",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1560,
        "wires": [
            [
                "2fad598817853524"
            ]
        ]
    },
    {
        "id": "ec129a524598bf90",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update positions for manual orders",
        "func": "msg.query = \"UPDATE positions SET portfolioname = 'Manual Trades', id = '99999999' where id is null\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1600,
        "wires": [
            [
                "b06410a57c56d657"
            ]
        ]
    },
    {
        "id": "b06410a57c56d657",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "2259da7b5141dea0",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "ed9307b1c4e75951",
        "type": "comment",
        "z": "b50ca0dd2985728a",
        "name": "Update from algos table benchmarks",
        "info": "",
        "x": 230,
        "y": 2520,
        "wires": []
    },
    {
        "id": "4799c0856d297617",
        "type": "inject",
        "z": "b50ca0dd2985728a",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2580,
        "wires": [
            [
                "92b082319b70d506"
            ]
        ]
    },
    {
        "id": "5b4fcfef51cd5237",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update algos table",
        "func": "let start = global.get(\"spy_start\")\nlet current = global.get(\"spy_current\")\nlet close = global.get(\"spy_close\")\n//node.warn(\"Start: \" +start+ \" Close: \" +close+ \" Current: \" +current)\n\nlet pctbench_today = ((current - close) / close) * 100 \nlet pctbench_alltime = ((current - start) / start) * 100\nlet info_ratio = \n\nnode.warn(\"Start: \" + start + \" Close: \" + close + \" Current: \" + current+ \" Pctbench Today: \" +pctbench_today+ \" Pctbench Alltime: \" +pctbench_alltime)\n\nmsg.query = \"update algos set pctbench_today = \" + pctbench_today+ \", pctbench_alltime = \" +pctbench_alltime+ \";\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2580,
        "wires": [
            [
                "18ced9cc0b1202a4"
            ]
        ]
    },
    {
        "id": "18ced9cc0b1202a4",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 2580,
        "wires": [
            [
                "f46a06aa70294d87"
            ]
        ]
    },
    {
        "id": "f46a06aa70294d87",
        "type": "function",
        "z": "b50ca0dd2985728a",
        "name": "update info_ratio",
        "func": "msg.query = \"update algos set info_ratio = (pctgain_alltime - pctbench_alltime);\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2580,
        "wires": [
            [
                "dceeadadb0962ac9"
            ]
        ]
    },
    {
        "id": "dceeadadb0962ac9",
        "type": "postgresql",
        "z": "b50ca0dd2985728a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "92b082319b70d506",
        "type": "delay",
        "z": "b50ca0dd2985728a",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2580,
        "wires": [
            [
                "5b4fcfef51cd5237"
            ]
        ]
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PKY5TN4Q4ZKTO14IRGQN",
        "paper": true
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKY5TN4Q4ZKTO14IRGQN",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "fd8867127ba3e5c1",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]