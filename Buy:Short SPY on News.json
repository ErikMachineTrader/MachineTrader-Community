[
    {
        "id": "cee390a7fc1b6b4e",
        "type": "tab",
        "label": "Buy/Short SPY on News Senetiment Daily",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ceed19a150be74c",
        "type": "comment",
        "z": "cee390a7fc1b6b4e",
        "name": "The name of this strategy is \"Buy/Short SPY on News\"",
        "info": "",
        "x": 280,
        "y": 40,
        "wires": []
    },
    {
        "id": "8bcfab1d2994ea30",
        "type": "comment",
        "z": "cee390a7fc1b6b4e",
        "name": "Flow 1: Define Strategy and Set Trading Values (ONCE)",
        "info": "",
        "x": 240,
        "y": 220,
        "wires": []
    },
    {
        "id": "8ac1a3ba3507552a",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "define values required for adding trade to portfolio",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet login = 'pta18'\nlet ticker = 'SPY'\nlet algo_name = \"Buy/Short SPY on New Sentiment\"\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 1 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet benchmark = 'SPY'\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 280,
        "wires": [
            [
                "56d8690c0da83439"
            ]
        ]
    },
    {
        "id": "5f8030abd1adc1ca",
        "type": "inject",
        "z": "cee390a7fc1b6b4e",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "05 06 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "8ac1a3ba3507552a",
                "9ff93a88356e4c97"
            ]
        ]
    },
    {
        "id": "56d8690c0da83439",
        "type": "change",
        "z": "cee390a7fc1b6b4e",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "07b7a9bcdb81ae9b",
        "type": "comment",
        "z": "cee390a7fc1b6b4e",
        "name": "Flow 2: Create new entry in algos table (ONCE)",
        "info": "",
        "x": 220,
        "y": 400,
        "wires": []
    },
    {
        "id": "bed63522e75b3536",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "add values to algos table",
        "func": "let login = flow.get(\"login\")\nlet id = flow.get(\"id\")\nlet algo_name = flow.get(\"algo_name\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet portfolio_size = flow.get(\"psize\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_start = global.get(\"spy_current\")\n\nmsg.query = \"insert into algos (login,id,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values ('\" + login + \"','\" +id+ \"','\" +algo_name+ \"','\" +algo_type+ \"','\" +status+ \"','\" +portfolio_size+ \"','\" +benchmark+ \"','\" +benchmark_start+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 440,
        "wires": [
            [
                "aad41d292cada214"
            ]
        ]
    },
    {
        "id": "aad41d292cada214",
        "type": "postgresql",
        "z": "cee390a7fc1b6b4e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "f1b428f1ff4bece5",
        "type": "inject",
        "z": "cee390a7fc1b6b4e",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "06 06 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 440,
        "wires": [
            [
                "bed63522e75b3536"
            ]
        ]
    },
    {
        "id": "e635eb0eca81991c",
        "type": "inject",
        "z": "cee390a7fc1b6b4e",
        "name": "Display Algos",
        "props": [
            {
                "p": "query",
                "v": "select * from algos",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "delete from algos where id = 1671644563932",
                "vt": "str"
            },
            {
                "p": "query2",
                "v": "update algos set login = 'pta19'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update algos set gain_today = -158.7135149876422767159823658, gain_alltime = -158.71351498764227674, pctgain_today = 0, pctgain_alltime = 0 where algo_name = 'Buy and Sell BTCUSD on Profit Target';",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 870,
        "y": 440,
        "wires": [
            [
                "65034c33f0436ae2"
            ]
        ]
    },
    {
        "id": "65034c33f0436ae2",
        "type": "postgresql",
        "z": "cee390a7fc1b6b4e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 440,
        "wires": [
            [
                "855ff7e411d626b0"
            ]
        ]
    },
    {
        "id": "855ff7e411d626b0",
        "type": "debug",
        "z": "cee390a7fc1b6b4e",
        "name": "debug 213",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 440,
        "wires": []
    },
    {
        "id": "97987bbcd580ef79",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "get matchling symbols from lookup table",
        "func": "let symbol =flow.get(\"ticker\")\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 320,
        "wires": [
            [
                "01d7bfcc9716ad66"
            ]
        ]
    },
    {
        "id": "01d7bfcc9716ad66",
        "type": "postgresql",
        "z": "cee390a7fc1b6b4e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 320,
        "wires": [
            [
                "65932ce158d198f8"
            ]
        ]
    },
    {
        "id": "65932ce158d198f8",
        "type": "split",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 320,
        "wires": [
            [
                "db518b063ebd18a2"
            ]
        ]
    },
    {
        "id": "db518b063ebd18a2",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nnode.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "ed573ee6abe28c58"
            ]
        ]
    },
    {
        "id": "ed573ee6abe28c58",
        "type": "change",
        "z": "cee390a7fc1b6b4e",
        "name": "store symbols as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "polygon_symbol",
                "pt": "flow",
                "to": "polygon_symbol",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "alpaca_symbol",
                "pt": "flow",
                "to": "alpaca_symbol",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9ff93a88356e4c97",
        "type": "delay",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 190,
        "y": 320,
        "wires": [
            [
                "97987bbcd580ef79"
            ]
        ]
    },
    {
        "id": "c33f3e8a9a83caa9",
        "type": "comment",
        "z": "cee390a7fc1b6b4e",
        "name": "This calculates current moving average of the news (last 100 items) and determins the sentiment score relative to the average sentiiment of all headlines (.1935)",
        "info": "",
        "x": 610,
        "y": 100,
        "wires": []
    },
    {
        "id": "9cb0dcc296c2e9be",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "create array for average",
        "func": "// this function reuses old variable names from time seeries arrays.  You can rename if you like.\n\nconst prices = [];\nlet item = 0\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload) {\n    price = item.sent;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "a047adf5c803daa0"
            ]
        ]
    },
    {
        "id": "bfe624df590d4e31",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(3)\nnode.warn(\" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 140,
        "wires": [
            [
                "40f3a1d225ec5a4a"
            ]
        ]
    },
    {
        "id": "a9202f5d5cad8e7c",
        "type": "mysql",
        "z": "cee390a7fc1b6b4e",
        "mydb": "f8ca5a41.3e1448",
        "name": "news",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "9cb0dcc296c2e9be"
            ]
        ]
    },
    {
        "id": "0f5d767b4888df96",
        "type": "inject",
        "z": "cee390a7fc1b6b4e",
        "name": "select sent from  headlines ",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 06 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select sent from headlines where sent is not null order by time_pub desc limit 1000;",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "a9202f5d5cad8e7c"
            ]
        ]
    },
    {
        "id": "40f3a1d225ec5a4a",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "relative sentiment",
        "func": "let avg = msg.moving_avg\n//node.warn(\"Moving Avg: \" +avg)\nlet alltime = 0.19\nlet rel = avg - alltime\nrel = rel.toFixed(3)\nnode.warn(rel)\n\nif (rel > 0 && rel < .10){\n//    node.warn(\"positive\")\n}\n\nelse if (rel > .10){\n//  node.warn(\"strongly positive\")\n}\n\nelse if  (rel < 0) {\n//    node.warn(\"negative\")\n\n}\n\nmsg.sentiment = rel\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 140,
        "wires": [
            [
                "ac1a423b2ae1c29b"
            ]
        ]
    },
    {
        "id": "a047adf5c803daa0",
        "type": "calculator",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 780,
        "y": 140,
        "wires": [
            [
                "bfe624df590d4e31"
            ]
        ]
    },
    {
        "id": "ac1a423b2ae1c29b",
        "type": "change",
        "z": "cee390a7fc1b6b4e",
        "name": "sentiment",
        "rules": [
            {
                "t": "set",
                "p": "sentiment",
                "pt": "flow",
                "to": "sentiment",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "99031dc52bcac983",
        "type": "alpaca-position-query",
        "z": "cee390a7fc1b6b4e",
        "conf": "e535f42f1df1b25f",
        "x": 390,
        "y": 1100,
        "wires": [
            [
                "365e890e3821580a"
            ]
        ]
    },
    {
        "id": "ca7b00b445494c74",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "get values from alpaca positions if symbol = BTCUSD",
        "func": "let symbol = flow.get(\"ticker\")\n\n\nlet asset_id = msg.payload[\"asset_id\"]\nlet ticker = msg.payload[\"symbol\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n\n//qty = parseFloat(qty) \n//qty = qty.toFixed(2)\n\nlet profit = parseFloat(unrealized_pl) \nprofit = profit.toFixed(2)\n\nlet profitpct = parseFloat(unrealized_plpc)\nprofitpct = profitpct.toFixed(2)\nprofitpct = profitpct * 100   \n\nlet result = ticker.includes(symbol);\n//node.warn(result)\n\nif ( result == true ){\n//    node.warn(\"Ticker:\" + symbol + \" Qty Held:\" + qty + \" Current Price: \" + current_price + \" Profit: \" + profit+ \" Profit %: \" +profitpct)\nmsg.ticker = symbol\nmsg.qty = qty\nmsg.price = current_price\nmsg.profit = profit\nmsg.profitpct - profitpct\nreturn msg;\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1100,
        "wires": [
            [
                "2c5bd069a1c0bb14"
            ]
        ]
    },
    {
        "id": "365e890e3821580a",
        "type": "split",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "ca7b00b445494c74"
            ]
        ]
    },
    {
        "id": "80c6314c21837b47",
        "type": "inject",
        "z": "cee390a7fc1b6b4e",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1100,
        "wires": [
            [
                "99031dc52bcac983"
            ]
        ]
    },
    {
        "id": "51e4ee57f16204bd",
        "type": "function-npm",
        "z": "cee390a7fc1b6b4e",
        "name": "Get price of trade trade",
        "func": "let symbol = flow.get(\"polygon_symbol\")\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 600,
        "wires": [
            [
                "4803744263fdc12b"
            ]
        ]
    },
    {
        "id": "55968035066c8b26",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 600,
        "wires": [
            [
                "8f91c3439a145607"
            ]
        ]
    },
    {
        "id": "4803744263fdc12b",
        "type": "polygon-last-trade-v3",
        "z": "cee390a7fc1b6b4e",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 620,
        "y": 600,
        "wires": [
            [
                "55968035066c8b26"
            ]
        ]
    },
    {
        "id": "c4d0a95989ac25f6",
        "type": "comment",
        "z": "cee390a7fc1b6b4e",
        "name": "Flow 3: Create trading flow DAILY",
        "info": "",
        "x": 190,
        "y": 540,
        "wires": []
    },
    {
        "id": "0831e23a2f41a51e",
        "type": "inject",
        "z": "cee390a7fc1b6b4e",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "10 06 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 600,
        "wires": [
            [
                "51e4ee57f16204bd"
            ]
        ]
    },
    {
        "id": "8f91c3439a145607",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "create Alpaca order ",
        "func": "let ticker = flow.get(\"alpaca_symbol\")\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // when using limit orders, no fracrtionals\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\n\n\nlet subtag = algo_name\nlet side = ''\nlet sentiment = flow.get(\"sentiment\")\n\nif ( sentiment < 0 ){ side = 'sell'}\nif (sentiment > 0) { side = 'buy' }\n\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": side,\n    \"type\": 'limit',\n    \"limit_price\": price,\n    \"client_order_id\": client_order_id,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\nmsg.ticker = ticker\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "e71a6984b0c06ea4",
        "type": "alpaca-order",
        "z": "cee390a7fc1b6b4e",
        "conf": "e535f42f1df1b25f",
        "x": 570,
        "y": 660,
        "wires": [
            [
                "5dd264f51a84dafd"
            ]
        ]
    },
    {
        "id": "5dd264f51a84dafd",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 660,
        "wires": [
            [
                "6c61074d219451b4"
            ]
        ]
    },
    {
        "id": "6c61074d219451b4",
        "type": "postgresql",
        "z": "cee390a7fc1b6b4e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "d8fc301ca22aa1ec",
        "type": "split",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "f82486e358e171cc"
            ]
        ]
    },
    {
        "id": "7f8fd37c76f3c567",
        "type": "alpaca-query-order",
        "z": "cee390a7fc1b6b4e",
        "conf": "e535f42f1df1b25f",
        "x": 840,
        "y": 720,
        "wires": [
            [
                "d8fc301ca22aa1ec"
            ]
        ]
    },
    {
        "id": "29f2beb919b587a1",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "get last closed order paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"10\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "7f8fd37c76f3c567"
            ]
        ]
    },
    {
        "id": "f82486e358e171cc",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "update orders confirms",
        "func": "let ticker = flow.get(\"ticker\")\n\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet source = msg.payload[\"source\"]\nlet subtag = flow.get(\"algo_name\")\n\n\nmsg.query = \"update order_confirms set filled_at = '\" + filled_at + \"', filled_qty = '\" + filled_qty + \"', filled_avg_price = '\" + filled_avg_price + \"', limit_price = '\" + limit_price + \"', status = '\" + status + \"', subtag = '\" + subtag+ \"', source = '\" + source + \"', extended_hours = '\" + extended_hours+ \"' where id = '\" +id+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 780,
        "wires": [
            [
                "23db6ea75775e9c8"
            ]
        ]
    },
    {
        "id": "23db6ea75775e9c8",
        "type": "postgresql",
        "z": "cee390a7fc1b6b4e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "08fdf288fcc70150",
        "type": "delay",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 720,
        "wires": [
            [
                "29f2beb919b587a1"
            ]
        ]
    },
    {
        "id": "6afbcb20f6f268e9",
        "type": "comment",
        "z": "cee390a7fc1b6b4e",
        "name": "Flow 4: Sell once profit target reached",
        "info": "",
        "x": 210,
        "y": 1040,
        "wires": []
    },
    {
        "id": "2c5bd069a1c0bb14",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "create Alpaca order ",
        "func": "let ticker = flow.get(\"alpaca_symbol\")\nlet qty = msg.qty\nlet price = msg.price\nlet profit = msg.profit\nlet profitpct = msg.profitpct\nlet target = flow.get(\"target\")\nlet algo_name = flow.get(\"algo_name\")\nlet subtag = algo_name\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = \"Cover-\" +ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nif ( profitpct > target) {\n\n// create a order for Alpaca\n\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1160,
        "wires": [
            [
                "b3ed01314de43a49",
                "80e366c19d6a4d66"
            ]
        ]
    },
    {
        "id": "b3ed01314de43a49",
        "type": "alpaca-order",
        "z": "cee390a7fc1b6b4e",
        "conf": "e535f42f1df1b25f",
        "x": 510,
        "y": 1160,
        "wires": [
            [
                "04645885ff6a0867"
            ]
        ]
    },
    {
        "id": "a7c0ba2bd38e1459",
        "type": "postgresql",
        "z": "cee390a7fc1b6b4e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "04645885ff6a0867",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1160,
        "wires": [
            [
                "a7c0ba2bd38e1459"
            ]
        ]
    },
    {
        "id": "f482fa1ef3ede613",
        "type": "split",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1010,
        "y": 1220,
        "wires": [
            [
                "a81f8515505a8d64"
            ]
        ]
    },
    {
        "id": "755702c1ee2062f3",
        "type": "alpaca-query-order",
        "z": "cee390a7fc1b6b4e",
        "conf": "e535f42f1df1b25f",
        "x": 840,
        "y": 1220,
        "wires": [
            [
                "f482fa1ef3ede613"
            ]
        ]
    },
    {
        "id": "8b8f59d05e095756",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "get last closed order paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"10\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1220,
        "wires": [
            [
                "755702c1ee2062f3"
            ]
        ]
    },
    {
        "id": "a81f8515505a8d64",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "update orders confirms",
        "func": "let ticker = flow.get(\"ticker\")\n\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet source = msg.payload[\"source\"]\nlet subtag = flow.get(\"algo_name\")\n\n\nmsg.query = \"update order_confirms set filled_at = '\" + filled_at + \"', filled_qty = '\" + filled_qty + \"', filled_avg_price = '\" + filled_avg_price + \"', limit_price = '\" + limit_price + \"', status = '\" + status + \"', subtag = '\" + subtag+ \"', source = '\" + source + \"', extended_hours = '\" + extended_hours+ \"' where id = '\" +id+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1280,
        "wires": [
            [
                "7dd8dc12828a0b0e",
                "36b485c403e39902"
            ]
        ]
    },
    {
        "id": "7dd8dc12828a0b0e",
        "type": "postgresql",
        "z": "cee390a7fc1b6b4e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "80e366c19d6a4d66",
        "type": "delay",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1220,
        "wires": [
            [
                "8b8f59d05e095756"
            ]
        ]
    },
    {
        "id": "36b485c403e39902",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "delete from positions",
        "func": "let ticker = msg.ticker\n\n\nmsg.query = \"delete from positions where symbol = '\" +ticker+ \"';'\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1340,
        "wires": [
            [
                "89585a1b3f11a70e"
            ]
        ]
    },
    {
        "id": "89585a1b3f11a70e",
        "type": "postgresql",
        "z": "cee390a7fc1b6b4e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "1724b915da057b9f",
        "type": "inject",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 780,
        "wires": [
            [
                "f82486e358e171cc"
            ]
        ]
    },
    {
        "id": "7d94bb6065b80632",
        "type": "split",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 990,
        "y": 900,
        "wires": [
            [
                "94d553332b8be389"
            ]
        ]
    },
    {
        "id": "12571ed3ac87aae7",
        "type": "alpaca-query-order",
        "z": "cee390a7fc1b6b4e",
        "conf": "e535f42f1df1b25f",
        "x": 820,
        "y": 900,
        "wires": [
            [
                "7d94bb6065b80632"
            ]
        ]
    },
    {
        "id": "877a30c663ade1c4",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "get last closed order paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"10\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 900,
        "wires": [
            [
                "12571ed3ac87aae7"
            ]
        ]
    },
    {
        "id": "94d553332b8be389",
        "type": "function",
        "z": "cee390a7fc1b6b4e",
        "name": "update orders confirms",
        "func": "let ticker = flow.get(\"ticker\")\n\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet source = msg.payload[\"source\"]\nlet subtag = flow.get(\"algo_name\")\n\n\nmsg.query = \"update order_confirms set filled_at = '\" + filled_at + \"', filled_qty = '\" + filled_qty + \"', filled_avg_price = '\" + filled_avg_price + \"', limit_price = '\" + limit_price + \"', status = '\" + status + \"', subtag = '\" + subtag+ \"', source = '\" + source + \"', extended_hours = '\" + extended_hours+ \"' where id = '\" +id+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 960,
        "wires": [
            [
                "805de1712a5fed09"
            ]
        ]
    },
    {
        "id": "805de1712a5fed09",
        "type": "postgresql",
        "z": "cee390a7fc1b6b4e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "23e4e215ab840d3c",
        "type": "delay",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 900,
        "wires": [
            [
                "877a30c663ade1c4"
            ]
        ]
    },
    {
        "id": "a6b0df8f59847701",
        "type": "inject",
        "z": "cee390a7fc1b6b4e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 960,
        "wires": [
            [
                "94d553332b8be389"
            ]
        ]
    },
    {
        "id": "ceb9c7f588e6642f",
        "type": "comment",
        "z": "cee390a7fc1b6b4e",
        "name": "wait until market opens and check to see if order is confirmed.",
        "info": "",
        "x": 420,
        "y": 860,
        "wires": []
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "f8ca5a41.3e1448",
        "type": "MySQLdatabase",
        "name": "news",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "news",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKH06YB3E5D1CK3M6M8Q",
        "paper": true
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]