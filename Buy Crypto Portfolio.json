[
    {
        "id": "e28b2c8b0468f023",
        "type": "tab",
        "label": "Buy Crypto Portfolio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bb1f694edff1524b",
        "type": "function",
        "z": "e28b2c8b0468f023",
        "name": "define values required for adding trade to portfolo",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet login = 'pta4'\nlet ticker = flow.get(\"tickers\")  \nlet name = \"Buy Crypto Portfolio\"\nlet asset_class = 'crypto' // stocks or crypto\nlet number = 24 // number of tickers in portfolio\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet benchmark = 'SPY'\nlet algo_name = name\n\nmsg.id = id\nmsg.login = login\nmsg.account = account\nmsg.symbol = ticker\nmsg.name = name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.portfolio_size = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\nmsg.algo_type = algo_type\nmsg.algo_name = algo_name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 220,
        "wires": [
            [
                "916ab1f8ab94569a",
                "8e3a9a57fe69dc92"
            ]
        ]
    },
    {
        "id": "a966f5b9c7019814",
        "type": "inject",
        "z": "e28b2c8b0468f023",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "bb1f694edff1524b"
            ]
        ]
    },
    {
        "id": "bc0e2be7ded39c7a",
        "type": "comment",
        "z": "e28b2c8b0468f023",
        "name": "The name of this strategy is \"Buy Crypto Stocks\"",
        "info": "",
        "x": 220,
        "y": 20,
        "wires": []
    },
    {
        "id": "8e3a9a57fe69dc92",
        "type": "function",
        "z": "e28b2c8b0468f023",
        "name": "get list of tickers to buy",
        "func": "let ticker = msg.symbol\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "4cc67b2aef8d8859"
            ]
        ]
    },
    {
        "id": "4cc67b2aef8d8859",
        "type": "split",
        "z": "e28b2c8b0468f023",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 280,
        "wires": [
            [
                "6ea768c24fdcb831"
            ]
        ]
    },
    {
        "id": "489cf5ab070442f2",
        "type": "function",
        "z": "e28b2c8b0468f023",
        "name": "place market or limit order ",
        "func": "let id = msg.id\nlet login = msg.login\nlet portfolioname = msg.name // name of the strategy\nlet ticker = msg.symbol\nlet asset_class = msg.asset_class\nlet price = msg.price\nlet number = msg.number // number of tickers in portfolio \nlet psize = msg.portfolio_size\nlet account = msg.account\n//let target = flow.get(\"diff\")\n\n//node.warn(\"Psize: \" +psize+ \" Price: \" +price+ \" Number:\" +number)\n\n// use this to balance the portfolio equally\nlet qty = (psize / number) / price\nqty = Math.round(qty) // to get whole numbers \n\nlet order_value = price * qty\n\nlet localtime = new Date();\nlet cryptoticker = ''\n\nif (asset_class == 'crypto') {\n    ticker = ticker.replace(\"X:\", \"\");\n    cryptoticker = ticker\n    ticker = ticker.replace(\"USD\", \"/USD\");  // this works only if the currency is USD\n    price = +price + +1 // price has to be $1 greater for cryptos\n}\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet order_type = 'limit'\n// add the order to the portfolio table\n\n\n\nif (asset_class == 'crypto') {\n\n    msg.query = \"insert into portfolio (account,id,login,symbol,asset_class,portfolioname,order_time,order_qty,order_price,order_type,order_value,clientorderid) values ('\"\n        + account + \"', '\" + id + \"','\" + login + \"','\" + cryptoticker + \"','\" + asset_class + \"','\" + portfolioname + \"','\" + localtime + \"','\" + qty + \"','\" + price + \"','\" + order_type + \"','\" + order_value + \"','\" + client_order_id + \"');\"\n    //node.warn(msg.query)\n}\n\nelse {\n    msg.query = \"insert into portfolio (account,id,login,symbol,asset_class,portfolioname,order_time,order_qty,order_price,order_type,order_value,clientorderid) values ('\"\n        + account + \"', '\" + id + \"','\" + login + \"','\" + ticker + \"','\" + asset_class + \"','\" + portfolioname + \"','\" + localtime + \"','\" + qty + \"','\" + price + \"','\" + order_type + \"','\" + order_value + \"','\" + client_order_id + \"');\"\n    //node.warn(msg.query)\n\n}\n\nlet side = 'buy'\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": side,\n    \"type\": order_type,\n     \"limit_price\": price,\n    \"client_order_id\": client_order_id,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n//}\n\nmsg.symbol = ticker\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 460,
        "wires": [
            [
                "ecc4b1ad72803b32",
                "048cef1c4ef133c7",
                "d2e88c040edebaa5"
            ]
        ]
    },
    {
        "id": "ad335cf1407f856c",
        "type": "function",
        "z": "e28b2c8b0468f023",
        "name": "add values to algos table",
        "func": "let login = msg.login\nlet id = msg.id\nlet algo_name = msg.algo_name \nlet algo_type = msg.algo_type\nlet status = msg.status\nlet portfolio_size = msg.portfolio_size \nlet benchmark =  msg.benchmark\nlet benchmark_start = global.get(\"spy_current\")\n\nmsg.query = \"insert into algos (login,id,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values ('\" + login + \"','\" +id+ \"','\" +algo_name+ \"','\" +algo_type+ \"','\" +status+ \"','\" +portfolio_size+ \"','\" +benchmark+ \"','\" +benchmark_start+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 220,
        "wires": [
            [
                "c5ab658f06a35c61"
            ]
        ]
    },
    {
        "id": "268966e93adcb335",
        "type": "comment",
        "z": "e28b2c8b0468f023",
        "name": "Flow 1: Set values for portfoio and algos tables and launch strategy",
        "info": "",
        "x": 280,
        "y": 100,
        "wires": []
    },
    {
        "id": "f301a82b66042c09",
        "type": "inject",
        "z": "e28b2c8b0468f023",
        "name": "get crytos",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select symbol from alpaca_assets where exchange like 'FTXU';",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "ae6886777152a439"
            ]
        ]
    },
    {
        "id": "ae6886777152a439",
        "type": "mysql",
        "z": "e28b2c8b0468f023",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 270,
        "y": 160,
        "wires": [
            [
                "6f677b31875274bd"
            ]
        ]
    },
    {
        "id": "6f677b31875274bd",
        "type": "function",
        "z": "e28b2c8b0468f023",
        "name": "get tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.symbol;\n    tickers += ticker+ \", \"\n}\n\nmsg.tickers = tickers\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "8c6a9f1b56c86379"
            ]
        ]
    },
    {
        "id": "8c6a9f1b56c86379",
        "type": "change",
        "z": "e28b2c8b0468f023",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "66a929a5b2e4946e",
        "type": "function",
        "z": "e28b2c8b0468f023",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nmsg.symbol = symbol\n//node.warn(msg.symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 280,
        "wires": [
            [
                "8c647631021325e5"
            ]
        ]
    },
    {
        "id": "8c647631021325e5",
        "type": "function-npm",
        "z": "e28b2c8b0468f023",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.symbol\nsymbol = symbol.replace(\" \",\"\")\nsymbol = \"X:\" +symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\nnode.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 340,
        "wires": [
            [
                "3b27c1b5a8d7dc6d"
            ]
        ]
    },
    {
        "id": "ed731a67cabfdf29",
        "type": "function",
        "z": "e28b2c8b0468f023",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 340,
        "wires": [
            [
                "489cf5ab070442f2"
            ]
        ]
    },
    {
        "id": "3b27c1b5a8d7dc6d",
        "type": "polygon-last-trade-v3",
        "z": "e28b2c8b0468f023",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 660,
        "y": 340,
        "wires": [
            [
                "ed731a67cabfdf29"
            ]
        ]
    },
    {
        "id": "c5ab658f06a35c61",
        "type": "postgresql",
        "z": "e28b2c8b0468f023",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "7e652cc3d6eedc57",
        "type": "postgresql",
        "z": "e28b2c8b0468f023",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1680,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "916ab1f8ab94569a",
        "type": "delay",
        "z": "e28b2c8b0468f023",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 220,
        "wires": [
            [
                "ad335cf1407f856c"
            ]
        ]
    },
    {
        "id": "6ea768c24fdcb831",
        "type": "delay",
        "z": "e28b2c8b0468f023",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 690,
        "y": 280,
        "wires": [
            [
                "66a929a5b2e4946e"
            ]
        ]
    },
    {
        "id": "d2e88c040edebaa5",
        "type": "alpaca-order",
        "z": "e28b2c8b0468f023",
        "conf": "e535f42f1df1b25f",
        "x": 770,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ecc4b1ad72803b32",
        "type": "change",
        "z": "e28b2c8b0468f023",
        "name": "set id, clientorderid",
        "rules": [
            {
                "t": "set",
                "p": "clientorderid",
                "pt": "flow",
                "to": "clientorderid",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "048cef1c4ef133c7",
        "type": "postgresql",
        "z": "e28b2c8b0468f023",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 760,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKQFY449K0DJQN3QF3WE",
        "paper": true
    }
]