[
    {
        "id": "34ac5be6c27fd9f2",
        "type": "tab",
        "label": "Buy Crypto Portfolio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "96c0a600d2873920",
        "type": "comment",
        "z": "34ac5be6c27fd9f2",
        "name": "Flow 1: Define Strategy and Set Trading Values",
        "info": "",
        "x": 220,
        "y": 20,
        "wires": []
    },
    {
        "id": "0af73ed45b22202b",
        "type": "comment",
        "z": "34ac5be6c27fd9f2",
        "name": "Flow 2: Create new entry in algos table (FIRSTTIME ONLY)",
        "info": "",
        "x": 250,
        "y": 300,
        "wires": []
    },
    {
        "id": "88f20afb1f711130",
        "type": "comment",
        "z": "34ac5be6c27fd9f2",
        "name": "Flow 3: Create trading flow",
        "info": "",
        "x": 150,
        "y": 420,
        "wires": []
    },
    {
        "id": "6b4489dd777918b7",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.alpaca_symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\n//node.warn(\"Alpaca Symbol: \" +ticker+ \" Price: \" +price+ \" NUmber: \" +number+ \" PSize: \" +psize)\n\nlet qty = ((psize / number) / price)\n\n\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet subtag = algo_name\nlet temp = ''\n\nif (qty < 100000){\n\n// create a order for Alpaca\n\n\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'buy',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//  limit_price\": price,  // limit orders only\n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 680,
        "wires": [
            [
                "9d2543570f5ef14f"
            ]
        ]
    },
    {
        "id": "9d2543570f5ef14f",
        "type": "alpaca-order",
        "z": "34ac5be6c27fd9f2",
        "conf": "c06cec183f9317f9",
        "x": 470,
        "y": 680,
        "wires": [
            [
                "7c934bc6ad93dc3b"
            ]
        ]
    },
    {
        "id": "ca2deecadba04794",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 540,
        "wires": [
            [
                "df5f558f23ed0101"
            ]
        ]
    },
    {
        "id": "df5f558f23ed0101",
        "type": "split",
        "z": "34ac5be6c27fd9f2",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 540,
        "wires": [
            [
                "93fbfa7d0c87774b"
            ]
        ]
    },
    {
        "id": "93fbfa7d0c87774b",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "ticker lookups",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "78d3a38a9c78e73d"
            ]
        ]
    },
    {
        "id": "3c27482ad914a585",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "store symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 600,
        "wires": [
            [
                "0d186cbdafb133ea"
            ]
        ]
    },
    {
        "id": "78d3a38a9c78e73d",
        "type": "postgresql",
        "z": "34ac5be6c27fd9f2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 540,
        "wires": [
            [
                "82c90d5cf70149b2"
            ]
        ]
    },
    {
        "id": "82c90d5cf70149b2",
        "type": "split",
        "z": "34ac5be6c27fd9f2",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 600,
        "wires": [
            [
                "3c27482ad914a585"
            ]
        ]
    },
    {
        "id": "3bc95ab21d471dd5",
        "type": "inject",
        "z": "34ac5be6c27fd9f2",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "ca2deecadba04794"
            ]
        ]
    },
    {
        "id": "65cf9341ea142fab",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(10)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 600,
        "wires": [
            [
                "6b4489dd777918b7"
            ]
        ]
    },
    {
        "id": "ffda0ae9112f9a53",
        "type": "polygon-last-trade-v3",
        "z": "34ac5be6c27fd9f2",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 960,
        "y": 600,
        "wires": [
            [
                "65cf9341ea142fab"
            ]
        ]
    },
    {
        "id": "a8c0ffeff045074b",
        "type": "postgresql",
        "z": "34ac5be6c27fd9f2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "7c934bc6ad93dc3b",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 680,
        "wires": [
            [
                "a8c0ffeff045074b"
            ]
        ]
    },
    {
        "id": "fe28c995eb2fd259",
        "type": "comment",
        "z": "34ac5be6c27fd9f2",
        "name": "Flow 4: Place sell order at Market ",
        "info": "",
        "x": 190,
        "y": 760,
        "wires": []
    },
    {
        "id": "7dbf3835daed0261",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\nnode.warn(\"Ticker: \" + ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 880,
        "wires": [
            [
                "c99098c25a5b9e6e"
            ]
        ]
    },
    {
        "id": "c99098c25a5b9e6e",
        "type": "split",
        "z": "34ac5be6c27fd9f2",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 880,
        "wires": [
            [
                "bc8c240f76e78217"
            ]
        ]
    },
    {
        "id": "423820b663bd36f3",
        "type": "switch",
        "z": "34ac5be6c27fd9f2",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 940,
        "wires": [
            [
                "b337a880f35535fe"
            ],
            []
        ]
    },
    {
        "id": "aa8350bf28b774b9",
        "type": "split",
        "z": "34ac5be6c27fd9f2",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 940,
        "wires": [
            [
                "423820b663bd36f3"
            ]
        ]
    },
    {
        "id": "bc8c240f76e78217",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "split tickers",
        "func": "let ticker = msg.payload\nticker = ticker.replace(\" \",\"\")\nnode.warn(ticker) \nmsg.ticker = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 880,
        "wires": [
            [
                "8fa55bf6e85658a5"
            ]
        ]
    },
    {
        "id": "362fd7aba90dbe6a",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "create Alpaca sell order ",
        "func": "let ticker = msg.ticker\nlet qty = msg.qty\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet side = msg.side\nlet profit = msg.profit\n\nlet id1 = (\"Ticker\" +ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Side: \" +side+ \" Profit: \" +profit)\n//node.warn(id1)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n\n\nlet order_type = 'market' // select limit for limit orders\n\nlet temp = ''\n\n//if ( profit > 10){\n\n    if ( (qty > 0 && order_type == 'market')){\n\n    temp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"sell\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            //\"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n    }\n\n    if ((qty < 0 && order_type == 'market')) {\n\n    qty = (qty * -1)\n    \n    temp = {\n        \n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n        };\n    }\n\n    if ((qty > 0 && order_type == 'limit')) {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n    }\n\n//}\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\nlet id2 = temp\nmsg.query = \"insert into log_tqqq (id, id2) values ('\" + id1 + \"','\" + id2 + \"');\" \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1000,
        "wires": [
            [
                "3c57ededc17e44b2"
            ]
        ]
    },
    {
        "id": "b337a880f35535fe",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\nnode.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 940,
        "wires": [
            [
                "362fd7aba90dbe6a"
            ]
        ]
    },
    {
        "id": "8fa55bf6e85658a5",
        "type": "alpaca-position-query",
        "z": "34ac5be6c27fd9f2",
        "conf": "c06cec183f9317f9",
        "x": 370,
        "y": 940,
        "wires": [
            [
                "aa8350bf28b774b9"
            ]
        ]
    },
    {
        "id": "3c57ededc17e44b2",
        "type": "alpaca-order",
        "z": "34ac5be6c27fd9f2",
        "conf": "c06cec183f9317f9",
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "f1fcad4c571dd462"
            ]
        ]
    },
    {
        "id": "5e5125b6505b6ae7",
        "type": "postgresql",
        "z": "34ac5be6c27fd9f2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "f1fcad4c571dd462",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1000,
        "wires": [
            [
                "5e5125b6505b6ae7"
            ]
        ]
    },
    {
        "id": "f9b17df894c033e0",
        "type": "inject",
        "z": "34ac5be6c27fd9f2",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 880,
        "wires": [
            [
                "7dbf3835daed0261"
            ]
        ]
    },
    {
        "id": "0d186cbdafb133ea",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "format payload for polygon",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 600,
        "wires": [
            [
                "ffda0ae9112f9a53"
            ]
        ]
    },
    {
        "id": "109e7041f08f7f38",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "get fresh list of tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.symbol;\n    tickers += ticker+ \", \"\n}\n\n// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nmsg.id = d\nmsg.tickers = tickers\nmsg.algo_name = 'Buy Crypto Portfolio'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 60,
        "wires": [
            [
                "0c90aa416c843989"
            ]
        ]
    },
    {
        "id": "0c90aa416c843989",
        "type": "change",
        "z": "34ac5be6c27fd9f2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 60,
        "wires": [
            [
                "793c9a8a4cc1e47a"
            ]
        ]
    },
    {
        "id": "793c9a8a4cc1e47a",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "Display flow vars",
        "func": "let id = flow.get(\"id\")\nlet name = flow.get(\"algo_name\")\nlet tickers = flow.get(\"tickers\")\nnode.warn(\"ID: \" +id+ \" Name: \" +name+ \" Tickers: \" +tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "6b528e36f951cb4e",
        "type": "postgresql",
        "z": "34ac5be6c27fd9f2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 60,
        "wires": [
            [
                "109e7041f08f7f38"
            ]
        ]
    },
    {
        "id": "634b21ef14885f0d",
        "type": "inject",
        "z": "34ac5be6c27fd9f2",
        "name": "Get cryto tickers",
        "props": [
            {
                "p": "query",
                "v": "select symbol from alpaca_assets where exchange = 'FTXU' and tradable is true;",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 60,
        "wires": [
            [
                "6b528e36f951cb4e"
            ]
        ]
    },
    {
        "id": "4f7d472ea032c3cd",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet login = 'danielsavage'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'cryptos' // stocks or crypto\nlet number = 25 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet strategy_type = \"long\"\nlet benchmark = 'SPY'\n\nnode.warn(ticker)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 120,
        "wires": [
            [
                "532cea1dc8ead95d"
            ]
        ]
    },
    {
        "id": "0336e93098b79e99",
        "type": "inject",
        "z": "34ac5be6c27fd9f2",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "4f7d472ea032c3cd"
            ]
        ]
    },
    {
        "id": "532cea1dc8ead95d",
        "type": "change",
        "z": "34ac5be6c27fd9f2",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7ee1d603807d72e8",
        "type": "inject",
        "z": "34ac5be6c27fd9f2",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "1de2bb0e65dd152f",
                "caf8c744696cdf25"
            ]
        ]
    },
    {
        "id": "1de2bb0e65dd152f",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            [
                "38a173b24e92faf9"
            ]
        ]
    },
    {
        "id": "38a173b24e92faf9",
        "type": "split",
        "z": "34ac5be6c27fd9f2",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 200,
        "wires": [
            [
                "20f5185797a05446"
            ]
        ]
    },
    {
        "id": "20f5185797a05446",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "insert into tickers_paper",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nlet algo_type = flow.get(\"algo_type\")\n\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers_paper (id, symbol, portfolioname, algo_type) values (\" + id + \",'\" + symbol + \"', '\" + portfolioname + \"','\" +algo_type+ \"') ON CONFLICT DO NOTHING;\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 200,
        "wires": [
            [
                "c103eae914d7a24a"
            ]
        ]
    },
    {
        "id": "c103eae914d7a24a",
        "type": "postgresql",
        "z": "34ac5be6c27fd9f2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d7cd4156a4cf8951",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers_paper set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_paper.symbol\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "af235351524faf98"
            ]
        ]
    },
    {
        "id": "caf8c744696cdf25",
        "type": "delay",
        "z": "34ac5be6c27fd9f2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 240,
        "wires": [
            [
                "d7cd4156a4cf8951"
            ]
        ]
    },
    {
        "id": "af235351524faf98",
        "type": "postgresql",
        "z": "34ac5be6c27fd9f2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c909da9b6381bbcd",
        "type": "function",
        "z": "34ac5be6c27fd9f2",
        "name": "add values to algos table",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = flow.get(\"login\")\nlet asset_class = flow.get(\"asset_class\")\nlet number = flow.get(\"number\")\nlet target = flow.get(\"target\")\nlet account = flow.get(\"account\")\nlet psize = flow.get(\"psize\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet benchmark = flow.get(\"benchmark\")\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 360,
        "wires": [
            [
                "57914e1a21e44e59"
            ]
        ]
    },
    {
        "id": "0f8697948ced763b",
        "type": "inject",
        "z": "34ac5be6c27fd9f2",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "c909da9b6381bbcd"
            ]
        ]
    },
    {
        "id": "57914e1a21e44e59",
        "type": "postgresql",
        "z": "34ac5be6c27fd9f2",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "bb95a04d33cf2e31",
        "type": "debug",
        "z": "34ac5be6c27fd9f2",
        "name": "display ticker list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 480,
        "wires": []
    },
    {
        "id": "2877a44008ede235",
        "type": "inject",
        "z": "34ac5be6c27fd9f2",
        "name": "Confirm list of tickers in flow.tickers",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "tickers",
        "payloadType": "flow",
        "x": 220,
        "y": 480,
        "wires": [
            [
                "bb95a04d33cf2e31"
            ]
        ]
    },
    {
        "id": "706d2bb5dc2c9855",
        "type": "debug",
        "z": "34ac5be6c27fd9f2",
        "name": "display ticker list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 820,
        "wires": []
    },
    {
        "id": "cdf99e4b316af9d1",
        "type": "inject",
        "z": "34ac5be6c27fd9f2",
        "name": "Confirm list of tickers in flow.tickers",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "tickers",
        "payloadType": "flow",
        "x": 240,
        "y": 820,
        "wires": [
            [
                "706d2bb5dc2c9855"
            ]
        ]
    },
    {
        "id": "66cbf048a504b133",
        "type": "comment",
        "z": "34ac5be6c27fd9f2",
        "name": "Copyright©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 1050,
        "y": 20,
        "wires": []
    },
    {
        "id": "98f5b06889a17588",
        "type": "comment",
        "z": "34ac5be6c27fd9f2",
        "name": "PAPER",
        "info": "",
        "x": 590,
        "y": 20,
        "wires": []
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKLC7VFEM4UNMBQ4OTD8",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]