[
    {
        "id": "2e00102c79a39f88",
        "type": "tab",
        "label": "Buy Crypto Portfolio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "39affefb4bc477fb",
        "type": "comment",
        "z": "2e00102c79a39f88",
        "name": "The name of this strategy is \"Buy Crypto Stocks\"",
        "info": "",
        "x": 220,
        "y": 60,
        "wires": []
    },
    {
        "id": "21e837da76de81ae",
        "type": "inject",
        "z": "2e00102c79a39f88",
        "name": "get crytos",
        "props": [
            {
                "p": "query",
                "v": "select symbol from alpaca_assets where exchange = 'FTXU' and tradable is true;",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "fafbf281b506dcca"
            ]
        ]
    },
    {
        "id": "eaa7a1f9b1511726",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.symbol;\n    tickers += ticker+ \", \"\n}\n\nmsg.tickers = tickers\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "9ea9bbf406777bcb",
                "138a49508ab11372",
                "a08f4556fb4e4664"
            ]
        ]
    },
    {
        "id": "9ea9bbf406777bcb",
        "type": "change",
        "z": "2e00102c79a39f88",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "adb48485f2b51296",
        "type": "comment",
        "z": "2e00102c79a39f88",
        "name": "Flow 1: Define Strategy and Set Trading Values (FIRSTTIME ONLY)",
        "info": "",
        "x": 280,
        "y": 220,
        "wires": []
    },
    {
        "id": "3a0ab7f2291a67a3",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "define values required for adding trade to portfolio",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet login = 'pta17'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = \"Buy Crypto Portfolio\"\nlet asset_class = 'crypto' // stocks or crypto\nlet number = 20 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet benchmark = 'SPY'\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "0b725339877ab065"
            ]
        ]
    },
    {
        "id": "fe09d1af9fba07dd",
        "type": "inject",
        "z": "2e00102c79a39f88",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "3a0ab7f2291a67a3"
            ]
        ]
    },
    {
        "id": "0b725339877ab065",
        "type": "change",
        "z": "2e00102c79a39f88",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "8aa66b348ab25186",
        "type": "comment",
        "z": "2e00102c79a39f88",
        "name": "Flow 2: Create new entry in algos table (FIRSTTIME ONLY)",
        "info": "",
        "x": 250,
        "y": 340,
        "wires": []
    },
    {
        "id": "288f5c0f5685e256",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "add values to algos table",
        "func": "let login = flow.get(\"login\")\nlet id = flow.get(\"id\")\nlet algo_name = flow.get(\"algo_name\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet portfolio_size = flow.get(\"psize\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_start = global.get(\"spy_current\")\n\nmsg.query = \"insert into algos (login,id,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values ('\" + login + \"','\" +id+ \"','\" +algo_name+ \"','\" +algo_type+ \"','\" +status+ \"','\" +portfolio_size+ \"','\" +benchmark+ \"','\" +benchmark_start+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 380,
        "wires": [
            [
                "27954ee207c2f1fe"
            ]
        ]
    },
    {
        "id": "27954ee207c2f1fe",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "b05faf0e4a5a3131",
        "type": "inject",
        "z": "2e00102c79a39f88",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 380,
        "wires": [
            [
                "288f5c0f5685e256"
            ]
        ]
    },
    {
        "id": "40a5fe1fe3d8e382",
        "type": "comment",
        "z": "2e00102c79a39f88",
        "name": "Flow 3: Create trading flow (REPEATABLE)",
        "info": "",
        "x": 200,
        "y": 440,
        "wires": []
    },
    {
        "id": "d0ec1c9e2e82e704",
        "type": "inject",
        "z": "2e00102c79a39f88",
        "name": "Display Algos",
        "props": [
            {
                "p": "query1",
                "v": "select * from algos",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "delete from algos where id = 1671644577762",
                "vt": "str"
            },
            {
                "p": "query2",
                "v": "update algos set login = 'pta19'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update algos set gain_today = -158.7135149876422767159823658, gain_alltime = -158.71351498764227674, pctgain_today = 0, pctgain_alltime = 0 where algo_name = 'Buy and Sell BTCUSD on Profit Target';",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "select * from order_confirms",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update order_confirms set subtag = 'Buy/Short SPY on News' where symbol = 'SPY'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update order_confirms set subtag = 'Trade BTCUSD'  where symbol = 'BTC/USD'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 790,
        "y": 380,
        "wires": [
            [
                "f259ac5b0b3a588c"
            ]
        ]
    },
    {
        "id": "f259ac5b0b3a588c",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 380,
        "wires": [
            [
                "52b165fac9d97448"
            ]
        ]
    },
    {
        "id": "52b165fac9d97448",
        "type": "debug",
        "z": "2e00102c79a39f88",
        "name": "debug 215",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 380,
        "wires": []
    },
    {
        "id": "b1e4f0365e503e4b",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.alpaca_symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n//node.warn(\"Alpaca Symbol: \" +ticker+ \" Price: \" +price)\n\nlet qty = ((psize / number) / price)\n\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'buy',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//  limit_price\": price,  // limit orders only\n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\n//node.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 660,
        "wires": [
            [
                "d115ae658ca0dfc4"
            ]
        ]
    },
    {
        "id": "d115ae658ca0dfc4",
        "type": "alpaca-order",
        "z": "2e00102c79a39f88",
        "conf": "e535f42f1df1b25f",
        "x": 450,
        "y": 660,
        "wires": [
            [
                "7d73a16fbe1b0678"
            ]
        ]
    },
    {
        "id": "7a48716ee6b8106f",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "118611118e3b8c1f",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 520,
        "wires": [
            [
                "13541223f90fbeed"
            ]
        ]
    },
    {
        "id": "13541223f90fbeed",
        "type": "split",
        "z": "2e00102c79a39f88",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 520,
        "wires": [
            [
                "89aa16e7cfd63e26"
            ]
        ]
    },
    {
        "id": "2d25d6909e3a7817",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 520,
        "wires": [
            [
                "ed6a4c1eb1d0f9a3"
            ]
        ]
    },
    {
        "id": "4dfed25d04c503e2",
        "type": "function-npm",
        "z": "2e00102c79a39f88",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 580,
        "wires": [
            [
                "5c8b94bfaa601664"
            ]
        ]
    },
    {
        "id": "89aa16e7cfd63e26",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 520,
        "wires": [
            [
                "2d25d6909e3a7817"
            ]
        ]
    },
    {
        "id": "3ca3aa103c5f1e4f",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 580,
        "wires": [
            [
                "4dfed25d04c503e2"
            ]
        ]
    },
    {
        "id": "ed6a4c1eb1d0f9a3",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1060,
        "y": 520,
        "wires": [
            [
                "1e846709b9e267b0"
            ]
        ]
    },
    {
        "id": "1e846709b9e267b0",
        "type": "split",
        "z": "2e00102c79a39f88",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 210,
        "y": 580,
        "wires": [
            [
                "3ca3aa103c5f1e4f"
            ]
        ]
    },
    {
        "id": "46e22b11448ff269",
        "type": "inject",
        "z": "2e00102c79a39f88",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "118611118e3b8c1f",
                "d211f11b335489a7",
                "315a37ecc59643b0"
            ]
        ]
    },
    {
        "id": "96835eab044db998",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(10)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 580,
        "wires": [
            [
                "b1e4f0365e503e4b"
            ]
        ]
    },
    {
        "id": "5c8b94bfaa601664",
        "type": "polygon-last-trade-v3",
        "z": "2e00102c79a39f88",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 920,
        "y": 580,
        "wires": [
            [
                "96835eab044db998"
            ]
        ]
    },
    {
        "id": "7d73a16fbe1b0678",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\n//node.warn(msg.query)\nmsg.id = id\nmsg.sql = \"create table IF NOT EXISTS temp_ids (id VARCHAR(500) PRIMARY KEY)\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 660,
        "wires": [
            [
                "7a48716ee6b8106f",
                "58fa855aeb29c5dc"
            ]
        ]
    },
    {
        "id": "c97ab4a05bc1711a",
        "type": "comment",
        "z": "2e00102c79a39f88",
        "name": "Flow 4: Sell once profit target reached",
        "info": "",
        "x": 190,
        "y": 1380,
        "wires": []
    },
    {
        "id": "14520887a1ede618",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet qty = msg.qty\nlet price = msg.price\nlet profit = msg.profit\nlet profitpct = msg.profitpct\nlet target = flow.get(\"target\")\nlet algo_name = flow.get(\"algo_name\")\nlet subtag = algo_name\nlet orderid = msg.orderid\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\n//if ( profitpct > target) {\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nmsg.symbol = ticker\nnode.warn(msg.payload)\nreturn msg;\n//}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1500,
        "wires": [
            [
                "835aaec775bf5139",
                "40f61da11cf12116"
            ]
        ]
    },
    {
        "id": "835aaec775bf5139",
        "type": "alpaca-order",
        "z": "2e00102c79a39f88",
        "conf": "e535f42f1df1b25f",
        "x": 330,
        "y": 1560,
        "wires": [
            [
                "51ee38e6681dfeb9"
            ]
        ]
    },
    {
        "id": "51ee38e6681dfeb9",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "insert into order_confirms table",
        "func": "\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + subtag + \"', '\" + source + \"', '\" +status+ \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1560,
        "wires": [
            [
                "1a7167bdad534ef3"
            ]
        ]
    },
    {
        "id": "1a7167bdad534ef3",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "d562ea6d59b886ee",
        "type": "split",
        "z": "2e00102c79a39f88",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 1620,
        "wires": [
            [
                "93c61b1e88a20cc5"
            ]
        ]
    },
    {
        "id": "59e884bd306f6206",
        "type": "alpaca-query-order",
        "z": "2e00102c79a39f88",
        "conf": "e535f42f1df1b25f",
        "x": 760,
        "y": 1620,
        "wires": [
            [
                "d562ea6d59b886ee"
            ]
        ]
    },
    {
        "id": "d1e6b05e32ea26ba",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get last closed order paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"50\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1620,
        "wires": [
            [
                "59e884bd306f6206"
            ]
        ]
    },
    {
        "id": "93c61b1e88a20cc5",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "update orders confirms",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet source = msg.payload[\"source\"]\nlet subtag = flow.get(\"algo_name\")\n\n\nmsg.query = \"update order_confirms set filled_at = '\" + filled_at + \"', filled_qty = '\" + filled_qty + \"', filled_avg_price = '\" + filled_avg_price + \"', limit_price = '\" + limit_price + \"', status = '\" + status + \"', subtag = '\" + subtag+ \"', source = '\" + source + \"', extended_hours = '\" + extended_hours+ \"' where id = '\" +id+ \"';\"\n\nsymbol = msg.symbol // this is the correct format\n\nif ( status == 'filled'){ \nlet sql = \"delete from positions where symbol = '\" +symbol+ \"';\"\nnode.warn(sql)\nmsg.sql = sql\n}\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1680,
        "wires": [
            [
                "671000e6f73470b9"
            ]
        ]
    },
    {
        "id": "671000e6f73470b9",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "40f61da11cf12116",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1620,
        "wires": [
            [
                "d1e6b05e32ea26ba"
            ]
        ]
    },
    {
        "id": "389da7790a364fde",
        "type": "split",
        "z": "2e00102c79a39f88",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 1440,
        "wires": [
            [
                "1b52d408013124c6"
            ]
        ]
    },
    {
        "id": "b14c8e7f99bb1a8e",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get tickers",
        "func": "let algo_name = flow.get(\"algo_name\")\nlet sql = \"select symbol,qty, current_price, unrealized_pl, unrealized_plpc, orderid from positions where portfolioname  = '\" + algo_name + \"';\"\nnode.warn(sql)\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1440,
        "wires": [
            [
                "671717c9cd97a958"
            ]
        ]
    },
    {
        "id": "671717c9cd97a958",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 1440,
        "wires": [
            [
                "389da7790a364fde"
            ]
        ]
    },
    {
        "id": "1b52d408013124c6",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get list of tickers to buy",
        "func": "let symbol = msg.payload[\"symbol\"]\nlet qty = msg.payload[\"qty\"]\nlet price = msg.payload[\"current_price\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet profitpct = msg.payload[\"unrealized_plpc\"]\nlet orderid = msg.payload[\"orderid\"]\n//node.warn(\"Symbol: \" +symbol)\n\nmsg.symbol = symbol\nmsg.qty = qty\nmsg.price = price\nmsg.profit = profit\nmsg.profitpct = profitpct\nmsg.orderid = orderid\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1440,
        "wires": [
            [
                "6b82d157bbb8e499"
            ]
        ]
    },
    {
        "id": "9bb4bbdf4a2de232",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "delete from positions",
        "func": "let sql = msg.sql\nnode.warn(sql)\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1740,
        "wires": [
            [
                "a04ffd58d1572b9a"
            ]
        ]
    },
    {
        "id": "a04ffd58d1572b9a",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "7e23102c3129abc0",
        "type": "inject",
        "z": "2e00102c79a39f88",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1440,
        "wires": [
            [
                "b14c8e7f99bb1a8e"
            ]
        ]
    },
    {
        "id": "40d8dba5955af287",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 1740,
        "wires": [
            [
                "9bb4bbdf4a2de232"
            ]
        ]
    },
    {
        "id": "138a49508ab11372",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get tickers ",
        "func": "let ticker = msg.tickers\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 180,
        "wires": [
            [
                "5efa79a46f37ce1e"
            ]
        ]
    },
    {
        "id": "5efa79a46f37ce1e",
        "type": "split",
        "z": "2e00102c79a39f88",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "1e0dc97769d117bc"
            ]
        ]
    },
    {
        "id": "1e0dc97769d117bc",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "insert into tickers",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"insert into tickers (symbol, portfolioname) values ('\" + symbol + \"', 'Buy Crypto Portfolio');\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 180,
        "wires": [
            [
                "bf07b1a432f01c0b"
            ]
        ]
    },
    {
        "id": "bf07b1a432f01c0b",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1060,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6b82d157bbb8e499",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 990,
        "y": 1440,
        "wires": [
            [
                "14520887a1ede618"
            ]
        ]
    },
    {
        "id": "9b755d8cd9edbf42",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get list of tickers to buy",
        "func": "let sql = \"select id from temp_ids;\"\nnode.warn(sql)\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1100,
        "wires": [
            [
                "46f884dee7aaf3f4"
            ]
        ]
    },
    {
        "id": "46f884dee7aaf3f4",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 1100,
        "wires": [
            [
                "c525cd601eec1bad"
            ]
        ]
    },
    {
        "id": "f65afc15df67c173",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get list of ids to confirm",
        "func": "let id = msg.payload[\"id\"]\nnode.warn(id)\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1100,
        "wires": [
            [
                "2f8ad96f58ded352"
            ]
        ]
    },
    {
        "id": "e60fc9587ac37769",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "insert into temp_ids",
        "func": "let sql = msg.sql\nmsg.query = sql\n//node.warn(msg.sql)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 720,
        "wires": [
            [
                "1e00f6b04d39fb51"
            ]
        ]
    },
    {
        "id": "58fa855aeb29c5dc",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 720,
        "wires": [
            [
                "e60fc9587ac37769",
                "cb4d3bd8742a6ca3"
            ]
        ]
    },
    {
        "id": "1e00f6b04d39fb51",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "a14e7c21d4266ee8",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "insert into temp_ids",
        "func": "let id = msg.id\nmsg.query = \"insert into temp_ids (id) values ('\" +id+ \"');\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 760,
        "wires": [
            [
                "8f8d160b8600c12d"
            ]
        ]
    },
    {
        "id": "cb4d3bd8742a6ca3",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 760,
        "wires": [
            [
                "a14e7c21d4266ee8"
            ]
        ]
    },
    {
        "id": "8f8d160b8600c12d",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "fafbf281b506dcca",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 140,
        "wires": [
            [
                "eaa7a1f9b1511726"
            ]
        ]
    },
    {
        "id": "c525cd601eec1bad",
        "type": "split",
        "z": "2e00102c79a39f88",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 1100,
        "wires": [
            [
                "3fa0e339d3116b91"
            ]
        ]
    },
    {
        "id": "3fa0e339d3116b91",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 1100,
        "wires": [
            [
                "f65afc15df67c173"
            ]
        ]
    },
    {
        "id": "e8b045cf2ef9b90a",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1240,
        "wires": [
            [
                "e42b2c6cefe9ce89"
            ]
        ]
    },
    {
        "id": "d211f11b335489a7",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 140,
        "y": 1100,
        "wires": [
            [
                "9b755d8cd9edbf42",
                "e8b045cf2ef9b90a"
            ]
        ]
    },
    {
        "id": "2f8ad96f58ded352",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get values from orders",
        "func": "let id = msg.id\nlet sql = \"select * from orders where id = '\" +id+ \"';\"\nmsg.query = sql\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1160,
        "wires": [
            [
                "a1985ef771937168"
            ]
        ]
    },
    {
        "id": "a1985ef771937168",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 1160,
        "wires": [
            [
                "1ad4b33d43637ec9"
            ]
        ]
    },
    {
        "id": "1ad4b33d43637ec9",
        "type": "split",
        "z": "2e00102c79a39f88",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 1160,
        "wires": [
            [
                "e4c08817a090e805"
            ]
        ]
    },
    {
        "id": "36272084b64a5da7",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "update order_confirms",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet source = msg.payload[\"source\"]\nlet subtag = flow.get(\"algo_name\")\n\n\nmsg.query = \"update order_confirms set filled_at = '\" + filled_at + \"', filled_qty = '\" + filled_qty + \"', filled_avg_price = '\" + filled_avg_price + \"', limit_price = '\" + limit_price + \"', status = '\" + status + \"', subtag = '\" + subtag+ \"', source = '\" + source + \"', extended_hours = '\" + extended_hours+ \"' where id = '\" +id+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1160,
        "wires": [
            [
                "f23957d359c659e6"
            ]
        ]
    },
    {
        "id": "e4c08817a090e805",
        "type": "switch",
        "z": "2e00102c79a39f88",
        "name": "matched",
        "property": "payload[\"id\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "id",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 860,
        "y": 1160,
        "wires": [
            [
                "36272084b64a5da7"
            ],
            []
        ]
    },
    {
        "id": "f34a01fbed9f4d04",
        "type": "comment",
        "z": "2e00102c79a39f88",
        "name": "Refresh the Orders Table - set time period for length to process orders",
        "info": "",
        "x": 390,
        "y": 820,
        "wires": []
    },
    {
        "id": "9fd9d35c69633028",
        "type": "split",
        "z": "2e00102c79a39f88",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 960,
        "wires": [
            [
                "be43fe937f08aa0b"
            ]
        ]
    },
    {
        "id": "a21708a7b855ec8c",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "cbde4b84641ef0e5",
        "type": "alpaca-query-order",
        "z": "2e00102c79a39f88",
        "conf": "e535f42f1df1b25f",
        "x": 680,
        "y": 960,
        "wires": [
            [
                "9fd9d35c69633028"
            ]
        ]
    },
    {
        "id": "37f90ec2d643f92c",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "drop orders table",
        "func": "//msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\nmsg.query = \"drop table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 860,
        "wires": [
            [
                "4c11b5275e433d71"
            ]
        ]
    },
    {
        "id": "4c11b5275e433d71",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "ebd7346ee6c617e3",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "get last 500 closed paper orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 960,
        "wires": [
            [
                "cbde4b84641ef0e5"
            ]
        ]
    },
    {
        "id": "be43fe937f08aa0b",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 960,
        "wires": [
            [
                "a21708a7b855ec8c"
            ]
        ]
    },
    {
        "id": "37ad4d72373403fd",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 920,
        "wires": [
            [
                "9b898b6a84074503"
            ]
        ]
    },
    {
        "id": "9b898b6a84074503",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "create orders table ",
        "func": "msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\n//msg.query = \"drop table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 920,
        "wires": [
            [
                "3fd213d24eafa1d2"
            ]
        ]
    },
    {
        "id": "3fd213d24eafa1d2",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 760,
        "y": 920,
        "wires": [
            [
                "ea5dfa5b25e0cc56"
            ]
        ]
    },
    {
        "id": "ea5dfa5b25e0cc56",
        "type": "debug",
        "z": "2e00102c79a39f88",
        "name": "debug 242",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 920,
        "wires": []
    },
    {
        "id": "12fab9a3311e43e0",
        "type": "comment",
        "z": "2e00102c79a39f88",
        "name": "update the order_confirms table from the orders",
        "info": "",
        "x": 440,
        "y": 1040,
        "wires": []
    },
    {
        "id": "4d59118dedc85439",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 960,
        "wires": [
            [
                "ebd7346ee6c617e3"
            ]
        ]
    },
    {
        "id": "f23957d359c659e6",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "e42b2c6cefe9ce89",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "drop table temp_ids",
        "func": "msg.query = \"select * from temp_ids\"\n//msg.query = \"drop table temp_ids\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1240,
        "wires": [
            [
                "431bf043cf724ca2"
            ]
        ]
    },
    {
        "id": "431bf043cf724ca2",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 1240,
        "wires": [
            [
                "a64e9f4d8280aa97"
            ]
        ]
    },
    {
        "id": "a64e9f4d8280aa97",
        "type": "debug",
        "z": "2e00102c79a39f88",
        "name": "debug 241",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1240,
        "wires": []
    },
    {
        "id": "a08f4556fb4e4664",
        "type": "function",
        "z": "2e00102c79a39f88",
        "name": "drop table temp_ids",
        "func": "//msg.query = \"select * from temp_ids\"\nmsg.query = \"drop table temp_ids\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 100,
        "wires": [
            [
                "45b53d4e10043493"
            ]
        ]
    },
    {
        "id": "45b53d4e10043493",
        "type": "postgresql",
        "z": "2e00102c79a39f88",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 100,
        "wires": [
            [
                "2b3470f52cc5a4fc"
            ]
        ]
    },
    {
        "id": "2b3470f52cc5a4fc",
        "type": "debug",
        "z": "2e00102c79a39f88",
        "name": "debug 243",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 100,
        "wires": []
    },
    {
        "id": "315a37ecc59643b0",
        "type": "delay",
        "z": "2e00102c79a39f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 880,
        "wires": [
            [
                "37f90ec2d643f92c",
                "37ad4d72373403fd",
                "4d59118dedc85439"
            ]
        ]
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]