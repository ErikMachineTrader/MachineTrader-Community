[
    {
        "id": "85eceb0d1b034832",
        "type": "tab",
        "label": "Buy Crypto Portfolio ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eba125cb8cf6a42a",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "set id,tickers, portfolioname",
        "func": "// describe algo with msg vars\n\n// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n//d = 1680191929229\nmsg.id = d\nmsg.tickers = ''\nmsg.algo_name = 'Buy CRYPTO Portfolio'\nmsg.asset_class = 'crypto' // stocks or crypto\nmsg.number = 16 // number of cryptos that are priced > 0.01\nmsg.target = 1 // target profit pct\nmsg.account = 'paper'\nmsg.psize = 50000 // size of portfolio\nmsg.status = 'running'\nmsg.algo_type = 'interday'\nmsg.strategy_type = \"long\"\nmsg.benchmark = 'SPY'\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "ad110cd5b04fd1eb"
            ]
        ]
    },
    {
        "id": "82d35737b2e4150a",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "define values required for adding trade to portfolio",
        "func": "// set flow vars for use by unconnected nodes\n\nflow.set(\"tickers\", +msg.tickers)\nflow.set(\"algo_name\", +msg.algo_name)\nflow.set(\"number\", +msg.number)\nflow.set(\"psize\", +msg.psize)\n\nnode.warn(\"Tickers: \" +msg.tickers+ \" Algo Name: \" +msg.algo_name+ \" Portfolio Size: \" +msg.psize+ \" Number of stocks: \" +msg.number)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "5d023f9dddca0aa7",
                "9954b9e7ad99c1d0"
            ]
        ]
    },
    {
        "id": "5141b3abae4e9e24",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "CopyrightÂ©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 270,
        "y": 2120,
        "wires": []
    },
    {
        "id": "5d023f9dddca0aa7",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 280,
        "wires": [
            [
                "7f42c05f728adcd2"
            ]
        ]
    },
    {
        "id": "f9b0d6cfb9079ca4",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "ad110cd5b04fd1eb",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "delete existing algo",
        "func": "msg.query = \"delete from algos where algo_name = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 220,
        "wires": [
            [
                "f221892678fb3082"
            ]
        ]
    },
    {
        "id": "f221892678fb3082",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 220,
        "wires": [
            [
                "82d35737b2e4150a"
            ]
        ]
    },
    {
        "id": "7f42c05f728adcd2",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "add values to algos table",
        "func": "msg.benchmark_start = global.get(\"spy_current\")\n\nmsg.query = \"insert into algos (id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nmsg.query += \"('\" + msg.id + \"','\" + msg.account + \"','\" + msg.algo_name + \"','\" + msg.algo_type + \"','\" + msg.status + \"','\" + msg.psize + \"','\" + msg.benchmark + \"','\" + msg.benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 280,
        "wires": [
            [
                "f9b0d6cfb9079ca4"
            ]
        ]
    },
    {
        "id": "d3387508fb75ccdf",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "Create the CRYPTO Portfolio Algo.  The algo name is \"Buy CRYPTO portfolio\"",
        "info": "",
        "x": 310,
        "y": 160,
        "wires": []
    },
    {
        "id": "c50407aa257d3437",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "create algo",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "eba125cb8cf6a42a"
            ]
        ]
    },
    {
        "id": "fee275f129955de4",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "Please refer to the Flow Documentation detailed explanation of this flow.",
        "info": "",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "06031c4a55c64cca",
        "type": "pts_oauth_browser",
        "z": "85eceb0d1b034832",
        "callback": "",
        "redirect": "",
        "name": "Documentation Link",
        "x": 380,
        "y": 80,
        "wires": []
    },
    {
        "id": "32d55553c951e220",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "Click Here to Open",
        "props": [
            {
                "p": "redirect",
                "v": "https://docs.google.com/document/d/1JrOxeQVfjAsRMMBDR6p9b-yRzCCs8m8frQoQvqwtjjw/edit",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "06031c4a55c64cca"
            ]
        ]
    },
    {
        "id": "9954b9e7ad99c1d0",
        "type": "change",
        "z": "85eceb0d1b034832",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "dcf7d9e9af73d6db",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 720,
        "wires": [
            [
                "49128faac09e56c0"
            ]
        ]
    },
    {
        "id": "49128faac09e56c0",
        "type": "split",
        "z": "85eceb0d1b034832",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 720,
        "wires": [
            [
                "24e93a9aa283195b"
            ]
        ]
    },
    {
        "id": "327dd57aab945560",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "store msg vars",
        "func": "msg.symbol  = msg.payload[\"symbol\"]\nmsg.name = msg.payload[\"name\"]\nmsg.algo_id = msg.payload[\"algo_id\"]\nmsg.algo_name = msg.payload[\"algo_name\"]\nmsg.feed = 'sip'\n//node.warn(msg.symbol)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 720,
        "wires": [
            [
                "f1c26618aac8883e"
            ]
        ]
    },
    {
        "id": "24e93a9aa283195b",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 720,
        "wires": [
            [
                "327dd57aab945560"
            ]
        ]
    },
    {
        "id": "f1c26618aac8883e",
        "type": "alpaca-data-crypto-last-trade",
        "z": "85eceb0d1b034832",
        "conf": "c06cec183f9317f9",
        "symbol": "",
        "name": "",
        "x": 450,
        "y": 780,
        "wires": [
            [
                "2aed9da2efca91f4"
            ]
        ]
    },
    {
        "id": "2aed9da2efca91f4",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "set last price",
        "func": "//node.warn(msg.payload)\nmsg.price = msg.payload[\"price\"]\nflow.set(\"last_price\", +msg.price)\n\n//node.warn(\"Ticker: \" +msg.symbol+ \" Price: \" +msg.price)\nmsg.query = \"update tickers_paper set price = \" +msg.price+ \" where symbol = '\" +msg.symbol+ \"';\" \nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 780,
        "wires": [
            [
                "6ba44b136d7dca51"
            ]
        ]
    },
    {
        "id": "6ba44b136d7dca51",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 820,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "afea4c95b9421dd5",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "Close Portfolio",
        "info": "",
        "x": 100,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f539ac9326e817f5",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "Execute trading orders in paper account",
        "info": "",
        "x": 220,
        "y": 960,
        "wires": []
    },
    {
        "id": "7bb7974813b1dac5",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "Update the tickers_paper table with current prices",
        "info": "",
        "x": 230,
        "y": 660,
        "wires": []
    },
    {
        "id": "a63698b872b2e8d8",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "rate limit at 1 per second",
        "info": "",
        "x": 630,
        "y": 660,
        "wires": []
    },
    {
        "id": "8e33afbc7815a652",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "execute algo",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "c879aec44a6e0c38",
                "f5f173a4079b5152"
            ]
        ]
    },
    {
        "id": "c879aec44a6e0c38",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "select cryptos",
        "func": "msg.algo_name = flow.get(\"algo_name\")\nmsg.query = \"select * from tickers_paper where portfolioname = '\" +msg.algo_name+ \"' and price > 0.01\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1040,
        "wires": [
            [
                "f3854081b7cbfff4"
            ]
        ]
    },
    {
        "id": "f3854081b7cbfff4",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 1040,
        "wires": [
            [
                "287944f0f5e26195"
            ]
        ]
    },
    {
        "id": "287944f0f5e26195",
        "type": "split",
        "z": "85eceb0d1b034832",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 1040,
        "wires": [
            [
                "4e5e8dcd5012e96c"
            ]
        ]
    },
    {
        "id": "9db465c1b3844e50",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "create orders",
        "func": "msg.ticker = msg.payload[\"symbol\"]\nmsg.price = msg.payload[\"price\"]\n\n\n// get flow vars\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet sql = ''\n\nmsg.price = msg.price.toFixed(2)\nlet qty = ((psize / number) / msg.price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet ticker = msg.ticker\nticker = ticker.replace(\"/\",\"\")\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = msg.algo_name\n\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": msg.ticker,\n    \"qty\": qty,\n    \"side\": 'buy',\n    \"type\": 'market',\n //   \"extended_time\": true,\n    \"client_order_id\": client_order_id,\n //   \"limit_price\": msg.price,\n    //    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nnode.warn(temp)\nmsg.payload = temp\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1040,
        "wires": [
            [
                "ae9b23db8d9fe696"
            ]
        ]
    },
    {
        "id": "4e5e8dcd5012e96c",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 1040,
        "wires": [
            [
                "9db465c1b3844e50"
            ]
        ]
    },
    {
        "id": "bb4021075a30665b",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "display order response",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif (subtag == null) { subtag = '' }\n\nif ( source == null) { source = 0}\nif (limit_price == null) { limit_price = 0 }\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nif ( limit_price == null){ limit_price = 0}\nif ( stop_price == null){ stop_price = 0}\n\nmsg.query = \"insert into order_confirms (id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, limit_price, stop_price, status, extended_hours, subtag) values \"\nmsg.query += \"('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + qty + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + extended_hours + \"','\" + subtag+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1100,
        "wires": [
            [
                "46dda76aab73d85c"
            ]
        ]
    },
    {
        "id": "46dda76aab73d85c",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 1100,
        "wires": [
            [
                "d30d24a89b2d6d67"
            ]
        ]
    },
    {
        "id": "d30d24a89b2d6d67",
        "type": "debug",
        "z": "85eceb0d1b034832",
        "name": "debug 789",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ae9b23db8d9fe696",
        "type": "alpaca-order",
        "z": "85eceb0d1b034832",
        "conf": "c06cec183f9317f9",
        "x": 1070,
        "y": 1040,
        "wires": [
            [
                "bb4021075a30665b"
            ]
        ]
    },
    {
        "id": "289bed9d1d3dd31c",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "select tickers",
        "func": "msg.query = \"select * from crypto_tickers where filled_qty > 0\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1380,
        "wires": [
            [
                "e91127cc834bec63"
            ]
        ]
    },
    {
        "id": "fcf2260169f0acde",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 1380,
        "wires": [
            [
                "289bed9d1d3dd31c",
                "768567e7b49411c5"
            ]
        ]
    },
    {
        "id": "e91127cc834bec63",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 1380,
        "wires": [
            [
                "e4d1513a8d2a79bc"
            ]
        ]
    },
    {
        "id": "e4d1513a8d2a79bc",
        "type": "split",
        "z": "85eceb0d1b034832",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 560,
        "y": 1380,
        "wires": [
            [
                "287a6c355d54dcfd"
            ]
        ]
    },
    {
        "id": "287a6c355d54dcfd",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 1380,
        "wires": [
            [
                "bfa4f42b340ea72e"
            ]
        ]
    },
    {
        "id": "bfa4f42b340ea72e",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "prepare Alpaca positions query",
        "func": "msg.ticker = msg.payload[\"ticker\"]\nmsg.symbol = msg.ticker.replace(\"/\",\"\") \n\n/* Setup Alpaca position request arguments */\nmsg.payload = {\n    symbol: msg.symbol,\n}\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1380,
        "wires": [
            [
                "379a923689077540"
            ]
        ]
    },
    {
        "id": "379a923689077540",
        "type": "alpaca-position-query",
        "z": "85eceb0d1b034832",
        "conf": "c06cec183f9317f9",
        "symbol": "",
        "x": 1190,
        "y": 1380,
        "wires": [
            [
                "b80dd1530b0928c9"
            ]
        ]
    },
    {
        "id": "d4d115a40280a530",
        "type": "alpaca-order",
        "z": "85eceb0d1b034832",
        "conf": "c06cec183f9317f9",
        "x": 650,
        "y": 1440,
        "wires": [
            [
                "d57ccdc16b250fe2"
            ]
        ]
    },
    {
        "id": "b80dd1530b0928c9",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "create Alpaca order ",
        "func": "let qty = msg.payload[\"qty\"]\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet t = msg.ticker.replace(\"/\",\"\")\nlet client_order_id = t + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": msg.ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//    \"limit_price\": price,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1440,
        "wires": [
            [
                "d4d115a40280a530"
            ]
        ]
    },
    {
        "id": "d57ccdc16b250fe2",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "display order response",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif (subtag == null) { subtag = '' }\n\nif ( source == null) { source = 0}\nif (limit_price == null) { limit_price = 0 }\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nif ( limit_price == null){ limit_price = 0}\nif ( stop_price == null){ stop_price = 0}\n\nmsg.query = \"insert into order_confirms (id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, limit_price, stop_price, status, extended_hours, subtag) values \"\nmsg.query += \"('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + qty + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + extended_hours + \"','\" + subtag+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1440,
        "wires": [
            [
                "0ad6432d25116aea"
            ]
        ]
    },
    {
        "id": "0ad6432d25116aea",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 1440,
        "wires": [
            [
                "97345cee4dc72db5"
            ]
        ]
    },
    {
        "id": "97345cee4dc72db5",
        "type": "debug",
        "z": "85eceb0d1b034832",
        "name": "debug 799",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1440,
        "wires": []
    },
    {
        "id": "b6666c938e59ebdc",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update order_confirms with complete orders",
        "func": "msg.query = \"update order_confirms set filled_at = orders_paper.filled_at, asset_id = orders_paper.asset_id, symbol = orders_paper.symbol, asset_class = orders_paper.asset_class, qty = orders_paper.qty, filled_qty = orders_paper.filled_qty, filled_avg_price = orders_paper.filled_avg_price, order_type = orders_paper.order_type, type = orders_paper.type, side = orders_paper.side, time_in_force = orders_paper.time_in_force, limit_price = orders_paper.limit_price, stop_price = orders_paper.stop_price, status = orders_paper.status, extended_hours = orders_paper.extended_hours, trail_percent = orders_paper.trail_percent, trail_price = orders_paper.trail_price  FROM orders_paper where orders_paper.id = order_confirms.id\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1540,
        "wires": [
            [
                "4a73192c8c61a219"
            ]
        ]
    },
    {
        "id": "4a73192c8c61a219",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 1540,
        "wires": [
            [
                "76b57d96ad3e5a5d"
            ]
        ]
    },
    {
        "id": "768567e7b49411c5",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 120,
        "y": 1540,
        "wires": [
            [
                "b6666c938e59ebdc"
            ]
        ]
    },
    {
        "id": "d4b2fef4bb0377bc",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update order_confirms with complete orders",
        "func": "msg.query = \"update order_confirms set filled_at = orders_paper.filled_at, asset_id = orders_paper.asset_id, symbol = orders_paper.symbol, asset_class = orders_paper.asset_class, qty = orders_paper.qty, filled_qty = orders_paper.filled_qty, filled_avg_price = orders_paper.filled_avg_price, order_type = orders_paper.order_type, type = orders_paper.type, side = orders_paper.side, time_in_force = orders_paper.time_in_force, limit_price = orders_paper.limit_price, stop_price = orders_paper.stop_price, status = orders_paper.status, extended_hours = orders_paper.extended_hours, trail_percent = orders_paper.trail_percent, trail_price = orders_paper.trail_price  FROM orders_paper where orders_paper.id = order_confirms.id\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1180,
        "wires": [
            [
                "c9612d3183dcad16"
            ]
        ]
    },
    {
        "id": "c9612d3183dcad16",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 1180,
        "wires": [
            [
                "7caf1ac58b89a662"
            ]
        ]
    },
    {
        "id": "f5f173a4079b5152",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1180,
        "wires": [
            [
                "d4b2fef4bb0377bc"
            ]
        ]
    },
    {
        "id": "2c27c1a303cc8282",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update names in positions",
        "func": "msg.query = \"update positions set portfolioname = tickers_paper.portfolioname, id = tickers_paper.id, name = tickers_paper.name FROM tickers_paper where tickers_paper.symbol = positions.symbol\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1600,
        "wires": [
            [
                "e7d51bad4c411785"
            ]
        ]
    },
    {
        "id": "e7d51bad4c411785",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "d5d7188824e2a524",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 160,
        "wires": [
            [
                "d992ef1d4c3aedc8"
            ]
        ]
    },
    {
        "id": "d992ef1d4c3aedc8",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "Display Algo ID Name",
        "func": "msg.id = flow.get(\"id\")\nmsg.algo_name = flow.get(\"algo_name\")\nnode.warn(\"Algo ID: \" +msg.id+ \" Algo Name: \" +msg.algo_name)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "20bb1f1e95d4f7da",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update table",
        "func": "msg.query = \"update tickers_paper set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_paper.symbol\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 820,
        "wires": [
            [
                "7ce638461267fe63"
            ]
        ]
    },
    {
        "id": "7ce638461267fe63",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "2039e214af547b05",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "insert into table",
        "func": "let symbol = msg.payload[\"symbol\"]\nmsg.name = msg.payload[\"name\"]\n//node.warn(symbol)\n\n\nif ((symbol == 'USDC/USD') || (symbol == 'USDT/USDC') || (symbol == 'USDT/USD') || (symbol == 'AAVE/USD')) { \n    //node.warn(\"do nothing\")\n}\n\nelse if  ( symbol == '/USDTUSD') { symbol = 'USDT/USD'}\nelse if  ( symbol == 'USDTUSD') { symbol = 'USDT/USD'}\nelse if  ( symbol == 'LTCBTC') { symbol = 'LTC/BTC'}\nelse if  ( symbol == 'SOLBTC') { symbol = 'SOL/BTC'}\nelse if  ( symbol == 'UNIBTC') { symbol = 'UNI/BTC'}\nelse if (symbol == 'ETHBTC') { symbol = 'ETH/BTC' }\nelse if (symbol == 'BCHBTC') { symbol = 'BCH/BTC' }\nelse if (symbol == 'LINKBTC') { symbol = 'LINK/BTC' }\nelse if (symbol == 'MATICBTC') { symbol = 'MATIC/BTC' }\n\nelse {\nsymbol = symbol.replace(\"USD\", \"/USD\")\nmsg.symbol = symbol.replace(\"//\", \"/\")\n}\n\nmsg.query = \"insert into crypto_tickers (ticker, name) values ('\" +msg.symbol+ \"','\" +msg.name+ \"') ON CONFLICT DO NOTHING;\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "eb285bea16cc2e6c",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "Update, correct alpaca_assets table for cryptos",
        "info": "",
        "x": 220,
        "y": 360,
        "wires": []
    },
    {
        "id": "2d6513f19c4a45ea",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "b9dd67c08728df06"
            ]
        ]
    },
    {
        "id": "b9dd67c08728df06",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "set alpaca_symbol",
        "func": "msg.query = \"update alpaca_assets set alpaca_symbol = symbol;\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 420,
        "wires": [
            [
                "63b27d6a51cbd0b7"
            ]
        ]
    },
    {
        "id": "63b27d6a51cbd0b7",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 460,
        "y": 420,
        "wires": [
            [
                "0d1d726c7f636768"
            ]
        ]
    },
    {
        "id": "0d1d726c7f636768",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "set alpaca_symbol",
        "func": "msg.query = \"UPDATE alpaca_assets SET alpaca_symbol = REPLACE(alpaca_symbol, '/USD', 'USD');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            [
                "d2d45571b84dbcc6"
            ]
        ]
    },
    {
        "id": "d2d45571b84dbcc6",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "89c7977d32809b63",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 540,
        "wires": [
            [
                "2a11ec82a63446e0"
            ]
        ]
    },
    {
        "id": "2a11ec82a63446e0",
        "type": "split",
        "z": "85eceb0d1b034832",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 540,
        "wires": [
            [
                "6048c3d0f533b35c"
            ]
        ]
    },
    {
        "id": "13143e06fbfb76b3",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "select",
        "func": "msg.algo_name = flow.get(\"algo_name\")\nmsg.query = \"select * from alpaca_assets where exchange = 'CRYPTO'\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 540,
        "wires": [
            [
                "89c7977d32809b63"
            ]
        ]
    },
    {
        "id": "c28c80106b1d2fcf",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "13143e06fbfb76b3"
            ]
        ]
    },
    {
        "id": "28e1f6b33bdc5c11",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "Select crypto list",
        "info": "",
        "x": 120,
        "y": 480,
        "wires": []
    },
    {
        "id": "6048c3d0f533b35c",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "delete from tickers_paper",
        "func": "msg.symbol = msg.payload[\"symbol\"]\n\nmsg.query = \"delete from tickers_paper where symbol = '\" +msg.symbol+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 540,
        "wires": [
            [
                "a80f1fedcb890edd"
            ]
        ]
    },
    {
        "id": "fef750f67e613331",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "insert into tickers_paper",
        "func": "msg.symbol = msg.symbol.replace(\"/\",\"\"). // lose the \"/\" so that the symbol matches Alpaca \"positions\" symbols \nmsg.query = \"insert into tickers_paper (symbol, crypto, portfolioname) values ('\" +msg.symbol+ \"','\" +msg.alpaca+ \"','\" +msg.algo_name+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 600,
        "wires": [
            [
                "ccea26858aecbb12"
            ]
        ]
    },
    {
        "id": "a80f1fedcb890edd",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 540,
        "wires": [
            [
                "fef750f67e613331"
            ]
        ]
    },
    {
        "id": "ccea26858aecbb12",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "7612d27d484652be",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "select",
        "func": "msg.algo_name = flow.get(\"algo_name\")\nmsg.id = flow.get(\"id\")\nmsg.query = \"select * from tickers_paper where portfolioname = '\" +msg.algo_name+ \"';\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 720,
        "wires": [
            [
                "dcf7d9e9af73d6db"
            ]
        ]
    },
    {
        "id": "882b3ba9513a13ef",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "7612d27d484652be",
                "7bfb2ea76443134e"
            ]
        ]
    },
    {
        "id": "7bfb2ea76443134e",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 820,
        "wires": [
            [
                "20bb1f1e95d4f7da",
                "5223d3b57d1166e9"
            ]
        ]
    },
    {
        "id": "76b57d96ad3e5a5d",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update id, algo_name",
        "func": "msg.id = flow.get(\"id\")\nmsg.algo_name = flow.get(\"algo_name\")\nmsg.query = \"update order_confirms set algo_id = \" +msg.id+ \", algo_name = '\" +msg.algo_name+ \"' where subtag = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1540,
        "wires": [
            [
                "66dec545a8f2d88e"
            ]
        ]
    },
    {
        "id": "66dec545a8f2d88e",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 1540,
        "wires": [
            [
                "2c27c1a303cc8282"
            ]
        ]
    },
    {
        "id": "7caf1ac58b89a662",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update id, algo_name",
        "func": "msg.id = flow.get(\"id\")\nmsg.algo_name = flow.get(\"algo_name\")\nmsg.query = \"update order_confirms set algo_id = \" +msg.id+ \", algo_name = '\" +msg.algo_name+ \"' where subtag = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1180,
        "wires": [
            [
                "65e90cc099066b7f"
            ]
        ]
    },
    {
        "id": "65e90cc099066b7f",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1100,
        "y": 1180,
        "wires": [
            [
                "58ef51b3df357b56"
            ]
        ]
    },
    {
        "id": "58ef51b3df357b56",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update names in positions",
        "func": "msg.query = \"update positions set portfolioname = tickers_paper.portfolioname, id = tickers_paper.id, name = tickers_paper.name FROM tickers_paper where tickers_paper.symbol = positions.symbol\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1240,
        "wires": [
            [
                "4f4be79c9b1d5de7"
            ]
        ]
    },
    {
        "id": "4f4be79c9b1d5de7",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "8d12d360248934b0",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update tickers_paper",
        "func": "msg.algo_name = flow.get(\"algo_name\")\nmsg.id = flow.get(\"id\")\n\nmsg.query = \"update tickers_paper set id = \" +msg.id+ \" where portfolioname = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 880,
        "wires": [
            [
                "bd2e82f2a1eae1d1"
            ]
        ]
    },
    {
        "id": "bd2e82f2a1eae1d1",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "5223d3b57d1166e9",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 880,
        "wires": [
            [
                "8d12d360248934b0"
            ]
        ]
    },
    {
        "id": "d28313bd4c9b612d",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "This flow calculates algo performance for  interday algos. This simply uses the values in the positions tables to update the algos table. ",
        "info": "",
        "x": 530,
        "y": 1740,
        "wires": []
    },
    {
        "id": "a3f31d83b6503c42",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "Every Min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1800,
        "wires": [
            [
                "c768154566e9ecea"
            ]
        ]
    },
    {
        "id": "bbafda8f6a0c7e99",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "get values from positions",
        "func": "msg.query = \"select sum(unrealized_intraday_pl) as a, sum(unrealized_pl) as b, sum(market_value) as c from positions where portfolioname = '\" +msg.name+ \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1800,
        "wires": [
            [
                "aebacdb31d0e1122"
            ]
        ]
    },
    {
        "id": "aebacdb31d0e1122",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1060,
        "y": 1800,
        "wires": [
            [
                "faf185ca73177203"
            ]
        ]
    },
    {
        "id": "faf185ca73177203",
        "type": "split",
        "z": "85eceb0d1b034832",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 330,
        "y": 1860,
        "wires": [
            [
                "a48e8f7238a8fdd5"
            ]
        ]
    },
    {
        "id": "ae59ac3ae17d56f0",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 1800,
        "wires": [
            [
                "bbafda8f6a0c7e99"
            ]
        ]
    },
    {
        "id": "93641d7e2759cd4a",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "select from positions",
        "func": "msg.name = flow.get(\"algo_name\")\nmsg.psize = flow.get(\"psize\")\n//node.warn(msg.name)\n\nconst dateObj = new Date();\nlet dt = dateObj.toISOString()\nlet dt1 = dt.substring(0, 10);\n//node.warn(\"Today: \" + dt1)\nmsg.today = dt1\n\ndateObj.setDate(dateObj.getDate() - 1);\nlet dt2 = dateObj.toISOString()\nlet dt3 = dt2.substring(0, 10);\n//node.warn(\"Yesterday: \" + dt3)\nmsg.yesterday = dt3\n\nmsg.query = \"select * from positions where portfolioname = '\" +msg.name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1800,
        "wires": [
            [
                "ae59ac3ae17d56f0"
            ]
        ]
    },
    {
        "id": "a48e8f7238a8fdd5",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update algos",
        "func": "let gain_today  = msg.payload[\"a\"]\nlet gain_alltime = msg.payload[\"b\"]\nlet position = msg.payload[\"c\"]\n\nif (gain_today === null) {}\nelse { flow.set(\"gain_today\", gain_today) }\nmsg.gain_today = flow.get(\"gain_today\")\n\nif (gain_alltime === null) { }\nelse { flow.set(\"gain_alltime\", gain_alltime) }\nmsg.gain_alltime = flow.get(\"gain_alltime\")\n\nif (position === null) { }\nelse { flow.set(\"position\", position) }\nmsg.position = flow.get(\"position\")\n\nlet pctgain_today = 0\nlet pctgain_alltime = 0\n\nif ( msg.position > 0){\n    pctgain_today = (msg.gain_today / msg.position) * 100\n    pctgain_alltime = (msg.gain_alltime / msg.position) * 100\n}\n\n//node.warn(\"Name: \" +msg.name+ \" Gain Today: \" +msg.gain_today+ \" Pctgain Today: \" +pctgain_today+ \" Gain Alltime:\" +msg.gain_alltime+ \" Pct Gain Alltime: \" +pctgain_alltime+\" Position: \" +msg.position)\nmsg.query = \"update algos set gain_today = \" + msg.gain_today + \", gain_alltime = \" + msg.gain_alltime + \", pctgain_today = \" + pctgain_today + \", pctgain_alltime  = \" + pctgain_alltime + \" where algo_name = '\" + msg.name + \"';\"\n//node.warn(msg.query)\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1860,
        "wires": [
            [
                "a84a87b01a746668"
            ]
        ]
    },
    {
        "id": "c768154566e9ecea",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1800,
        "wires": [
            [
                "93641d7e2759cd4a"
            ]
        ]
    },
    {
        "id": "a84a87b01a746668",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "f27ea9c4d7198b04",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "calculate benchmark changes ",
        "info": "",
        "x": 200,
        "y": 1960,
        "wires": []
    },
    {
        "id": "e7176ef94adae6d0",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "get spy values",
        "func": "msg.spy_current = global.get(\"spy_current\")\nmsg.spy_close = global.get(\"spy_close\")\nmsg.spy_start = global.get(\"spy_start\")\n//node.warn(\"Start: \" +msg.spy_start+ \" Curremt: \" +msg.spy_current+ \" Close: \" +msg.spy_close)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2000,
        "wires": [
            [
                "b5f57a10ee4aa256"
            ]
        ]
    },
    {
        "id": "b5f57a10ee4aa256",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "get algo name",
        "func": "msg.id = flow.get(\"id\")\nmsg.query = \"select * from algos  where id = \" +msg.id+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2000,
        "wires": [
            [
                "b7dfa28aebc7319e"
            ]
        ]
    },
    {
        "id": "b7dfa28aebc7319e",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 2000,
        "wires": [
            [
                "d66ce9c0b342a65a"
            ]
        ]
    },
    {
        "id": "d66ce9c0b342a65a",
        "type": "split",
        "z": "85eceb0d1b034832",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 970,
        "y": 2000,
        "wires": [
            [
                "effa320d0b3d3e1f"
            ]
        ]
    },
    {
        "id": "0ab0c70fe9cd4e9f",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "Every Min",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 2000,
        "wires": [
            [
                "057d558339008167"
            ]
        ]
    },
    {
        "id": "effa320d0b3d3e1f",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "calculate benchmark changes",
        "func": "//node.warn(msg.payload)\nmsg.bench = msg.payload[\"benchmark_start\"]\n\nlet bench_change = msg.spy_current - msg.bench\nlet pctbench_change = bench_change / msg.bench * 100\nbench_change = bench_change.toFixed(3)\npctbench_change = pctbench_change.toFixed(3)\nmsg.pctbench_change = pctbench_change\n\n\nmsg.bench_today = (msg.spy_current - msg.spy_start)\nmsg.pctbench_today = (msg.bench_today / msg.spy_start) * 100\n//node.warn(msg.id + \",\" + msg.bench + \",\" + bench_change + \",\" + pctbench_change+ \",\" +msg.pctbench_today)\nmsg.query = \"update algos set pctbench_alltime = \" + msg.pctbench_change + \", pctbench_today = \" + msg.pctbench_today + \" where id = \" + msg.id + \";\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2000,
        "wires": [
            [
                "2e7791449fc3a159"
            ]
        ]
    },
    {
        "id": "2e7791449fc3a159",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 500,
        "y": 2060,
        "wires": [
            [
                "272ad7aa49101de9"
            ]
        ]
    },
    {
        "id": "272ad7aa49101de9",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update info_ratio",
        "func": "msg.query = \"update algos set info_ratio = (pctgain_alltime - pctbench_alltime) where id = '\" + msg.id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 2060,
        "wires": [
            [
                "355913245b4cbaed"
            ]
        ]
    },
    {
        "id": "355913245b4cbaed",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "057d558339008167",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 2000,
        "wires": [
            [
                "e7176ef94adae6d0"
            ]
        ]
    },
    {
        "id": "a737964d312795f4",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "update table",
        "func": "msg.query = \"update tickers_paper set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_paper.symbol\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2320,
        "wires": [
            [
                "934bf99228462077"
            ]
        ]
    },
    {
        "id": "934bf99228462077",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "4f820f2fb0612349",
        "type": "delay",
        "z": "85eceb0d1b034832",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 2320,
        "wires": [
            [
                "a737964d312795f4"
            ]
        ]
    },
    {
        "id": "b681fba5cac3c954",
        "type": "inject",
        "z": "85eceb0d1b034832",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2280,
        "wires": [
            [
                "8c4664f3b9833edb",
                "4f820f2fb0612349"
            ]
        ]
    },
    {
        "id": "8c4664f3b9833edb",
        "type": "alpaca-position-query",
        "z": "85eceb0d1b034832",
        "conf": "c06cec183f9317f9",
        "symbol": "",
        "x": 390,
        "y": 2260,
        "wires": [
            [
                "fb4d53e3d4c9b6ec"
            ]
        ]
    },
    {
        "id": "fb4d53e3d4c9b6ec",
        "type": "split",
        "z": "85eceb0d1b034832",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 2260,
        "wires": [
            [
                "e72fb82cd3fb49aa"
            ]
        ]
    },
    {
        "id": "e72fb82cd3fb49aa",
        "type": "function",
        "z": "85eceb0d1b034832",
        "name": "insert into tickers_paper",
        "func": "msg.algo_name = flow.get(\"algo_name\")\nmsg.id = flow.get(\"id\")\nmsg.side = msg.payload[\"side\"]\nmsg.symbol = msg.payload[\"symbol\"]\nmsg.type = msg.payload[\"asset_class\"]\nif ( msg.type == 'crypto') {\nmsg.query = \"insert into tickers_paper (symbol, portfolioname, id) values ('\" +msg.symbol+ \"','\" +msg.algo_name+ \"',\" +msg.id+ \");\"\nnode.warn(msg.query)\nreturn msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2260,
        "wires": [
            [
                "616a3e9b9356b18e"
            ]
        ]
    },
    {
        "id": "616a3e9b9356b18e",
        "type": "postgresql",
        "z": "85eceb0d1b034832",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 950,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "4558069cd656f4e5",
        "type": "comment",
        "z": "85eceb0d1b034832",
        "name": "replace tickers in tickers_paper table",
        "info": "",
        "x": 220,
        "y": 2200,
        "wires": []
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "USE-OAUTH-OR-REPLACE",
        "paper": true
    }
]