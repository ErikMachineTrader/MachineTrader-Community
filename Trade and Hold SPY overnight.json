[
    {
        "id": "b81ceb2d925a8aff",
        "type": "tab",
        "label": "Simple Interday Trade",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4bcd0066a410b71c",
        "type": "inject",
        "z": "b81ceb2d925a8aff",
        "name": "Set at 9 am",
        "props": [],
        "repeat": "",
        "crontab": "00 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "dcd4b92854b8de1d"
            ]
        ]
    },
    {
        "id": "dcd4b92854b8de1d",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "set and store ticker SPY variables",
        "func": "let ticker = 'SPY'\nlet qty = '100'\nmsg.topic = ticker // this pass the ticker value to the flow variable\nnode.warn(\" Ticker: \" +ticker+ \" Qty: \" +qty)\nmsg.payload = qty\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "59c689aaad07299d"
            ]
        ]
    },
    {
        "id": "59c689aaad07299d",
        "type": "change",
        "z": "b81ceb2d925a8aff",
        "name": "set flow variable: ticker, qty",
        "rules": [
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "qty",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "8109f5d321eb09b6",
        "type": "comment",
        "z": "b81ceb2d925a8aff",
        "name": "Flow #2: Buy and hold shares of SPY at 3:55",
        "info": "",
        "x": 210,
        "y": 220,
        "wires": []
    },
    {
        "id": "4974a5c663476442",
        "type": "comment",
        "z": "b81ceb2d925a8aff",
        "name": "Flow #1\" Set ticker and quantity to hold",
        "info": "",
        "x": 190,
        "y": 100,
        "wires": []
    },
    {
        "id": "69d4941339e14403",
        "type": "comment",
        "z": "b81ceb2d925a8aff",
        "name": "Trades and Holds SPY overnignt - Paper",
        "info": "",
        "x": 200,
        "y": 40,
        "wires": []
    },
    {
        "id": "2fe8e8aef77a56a1",
        "type": "inject",
        "z": "b81ceb2d925a8aff",
        "name": "Buy at 3:55 PM and hold",
        "props": [],
        "repeat": "",
        "crontab": "55 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "1b590f57ee8d2403"
            ]
        ]
    },
    {
        "id": "1b590f57ee8d2403",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "Alpaca market order",
        "func": "let ticker = flow.get(\"ticker\")\nlet qty = flow.get(\"qty\")\n\n\nlet temp = ''\n\n// this is a market order \n\ntemp = { \n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": \"buy\",\n    \"type\": \"market\",\n    \"time_in_force\":\"day\"\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 280,
        "wires": [
            [
                "497d132c1d28fe63",
                "94f402d5202c078c"
            ]
        ]
    },
    {
        "id": "a58f389640541e0f",
        "type": "inject",
        "z": "b81ceb2d925a8aff",
        "name": "Sell at 9:31 AM ",
        "props": [],
        "repeat": "",
        "crontab": "31 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "1b40cbd294b3c93f"
            ]
        ]
    },
    {
        "id": "1b40cbd294b3c93f",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "Alpaca market sell order",
        "func": "let ticker = flow.get(\"ticker\")\nlet qty = flow.get(\"qty\")\nlet pos = flow.get(\"position\")\n\nlet temp = ''\n\n// this is a market order \n\nif (pos > 0){\ntemp = { \n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": \"sell\",\n    \"type\": \"market\",\n    \"time_in_force\":\"day\"\n}\n}\nmsg.payload = temp\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 460,
        "wires": [
            [
                "64cee67576d6797e"
            ]
        ]
    },
    {
        "id": "573cac1967ccfb11",
        "type": "comment",
        "z": "b81ceb2d925a8aff",
        "name": "Flow $7 Utilitiy Tables",
        "info": "",
        "x": 160,
        "y": 1540,
        "wires": []
    },
    {
        "id": "ee7ff2703656e717",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "store raw orders",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nlet sql = \"insert into raw_orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,extended_hours,legs,trail_percent,trail_price,hwm,subtag,source) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + extended_hours + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source + \"');\"\n\n//node.warn(sql)\nmsg.topic = sql\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "de4caa0e82d36411"
            ]
        ]
    },
    {
        "id": "de4caa0e82d36411",
        "type": "sqlite",
        "z": "b81ceb2d925a8aff",
        "mydb": "3da37290d92c1dc8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "orders",
        "x": 1010,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1bbd34f56f39d5c1",
        "type": "inject",
        "z": "b81ceb2d925a8aff",
        "name": "SELECT * FROM  orders table",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select * from orders;",
        "x": 200,
        "y": 1600,
        "wires": [
            [
                "49a82b63e66f0eb0"
            ]
        ]
    },
    {
        "id": "49a82b63e66f0eb0",
        "type": "sqlite",
        "z": "b81ceb2d925a8aff",
        "mydb": "3da37290d92c1dc8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "orders",
        "x": 410,
        "y": 1600,
        "wires": [
            [
                "d93b42515ce6002b"
            ]
        ]
    },
    {
        "id": "57a4b2ef772157e0",
        "type": "sqlite",
        "z": "b81ceb2d925a8aff",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 940,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "d93b42515ce6002b",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "insert into sub_portfolio",
        "func": "let text = ''\n\nfor (var i=0;i<msg.payload.length;i++) \n\n{\n\n    let id = 1\n    let symbol  = msg.payload[i][\"symbol\"]\n//    node.warn(\"ID: \" +id+ \" Ticker: \" +symbol)\n    let sql = \"insert into sub_portfolio (id,ticker) values (\" + id + \",'\" + symbol + \"');\"\n    text += sql\n}\n\n//node.warn(text)\nmsg.payload = text\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1600,
        "wires": [
            [
                "6bc7aac49bca33b0"
            ]
        ]
    },
    {
        "id": "6bc7aac49bca33b0",
        "type": "split",
        "z": "b81ceb2d925a8aff",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1600,
        "wires": [
            [
                "ccf3fb373cbda78d"
            ]
        ]
    },
    {
        "id": "ccf3fb373cbda78d",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "change payload to topic",
        "func": "msg.topic = msg.payload\nnode.warn(msg.topic)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1600,
        "wires": [
            [
                "c604672e8abde58a"
            ]
        ]
    },
    {
        "id": "c604672e8abde58a",
        "type": "delay",
        "z": "b81ceb2d925a8aff",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 790,
        "y": 1660,
        "wires": [
            [
                "57a4b2ef772157e0"
            ]
        ]
    },
    {
        "id": "497d132c1d28fe63",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "insert in sub_portfolio id = 2",
        "func": "let ticker = msg.payload[\"symbol\"]\nlet id = 2\n\nlet sql = \"insert into sub_portfolio (id, ticker) values (\" +id+ \",'\" +ticker+ \"');\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 340,
        "wires": [
            [
                "dd8612dc2e0a7d5b"
            ]
        ]
    },
    {
        "id": "dd8612dc2e0a7d5b",
        "type": "sqlite",
        "z": "b81ceb2d925a8aff",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 940,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "5af58ee60dcd5aa7",
        "type": "comment",
        "z": "b81ceb2d925a8aff",
        "name": "Flow #3: Sell shares of SPY at 9:31",
        "info": "",
        "x": 180,
        "y": 400,
        "wires": []
    },
    {
        "id": "eca1f8a0613a2a4d",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "store raw orders",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nlet sql = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,extended_hours,legs,trail_percent,trail_price,hwm,subtag,source) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + extended_hours + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source + \"');\"\n\n//node.warn(sql)\nmsg.topic = sql\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 460,
        "wires": [
            [
                "9200eb8b7a11bcea"
            ]
        ]
    },
    {
        "id": "9200eb8b7a11bcea",
        "type": "sqlite",
        "z": "b81ceb2d925a8aff",
        "mydb": "3da37290d92c1dc8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "orders",
        "x": 1030,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ef62b2797fe73c58",
        "type": "inject",
        "z": "b81ceb2d925a8aff",
        "name": "SELECT * portfolio where id = 2",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select * from sub_portfolio where id = 2",
        "x": 210,
        "y": 1740,
        "wires": [
            [
                "ed17114bb579594f"
            ]
        ]
    },
    {
        "id": "6d222f7d707becec",
        "type": "sqlite",
        "z": "b81ceb2d925a8aff",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 940,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "2166f36eeb972de5",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "insert into sub_portfolio",
        "func": "let text = ''\n\nfor (var i=0;i<msg.payload.length;i++) \n\n{\n\n    let id = 1\n    let symbol  = msg.payload[i][\"symbol\"]\n//    node.warn(\"ID: \" +id+ \" Ticker: \" +symbol)\n    let sql = \"insert into sub_portfolio (id,ticker) values (\" + id + \",'\" + symbol + \"');\"\n    text += sql\n}\n\n//node.warn(text)\nmsg.payload = text\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1800,
        "wires": [
            [
                "f5a8f0e5bc9adbb4"
            ]
        ]
    },
    {
        "id": "f5a8f0e5bc9adbb4",
        "type": "split",
        "z": "b81ceb2d925a8aff",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1800,
        "wires": [
            [
                "bb0aac4c82f651bc"
            ]
        ]
    },
    {
        "id": "bb0aac4c82f651bc",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "change payload to topic",
        "func": "msg.topic = msg.payload\nnode.warn(msg.topic)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1800,
        "wires": [
            [
                "e074c47363fe4fc1"
            ]
        ]
    },
    {
        "id": "e074c47363fe4fc1",
        "type": "delay",
        "z": "b81ceb2d925a8aff",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 790,
        "y": 1860,
        "wires": [
            [
                "6d222f7d707becec"
            ]
        ]
    },
    {
        "id": "ed17114bb579594f",
        "type": "sqlite",
        "z": "b81ceb2d925a8aff",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 420,
        "y": 1740,
        "wires": [
            [
                "1af641bfd935c6cc"
            ]
        ]
    },
    {
        "id": "1af641bfd935c6cc",
        "type": "debug",
        "z": "b81ceb2d925a8aff",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1740,
        "wires": []
    },
    {
        "id": "36985411bf9514e5",
        "type": "inject",
        "z": "b81ceb2d925a8aff",
        "name": "SELECT * ticker where id = 2",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select ticker from sub_portfolio where id = 2",
        "x": 200,
        "y": 1960,
        "wires": [
            [
                "b68a7955b4036d1d"
            ]
        ]
    },
    {
        "id": "b68a7955b4036d1d",
        "type": "sqlite",
        "z": "b81ceb2d925a8aff",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 400,
        "y": 1960,
        "wires": [
            [
                "b3775af33c4fdb05"
            ]
        ]
    },
    {
        "id": "b3775af33c4fdb05",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "function 1",
        "func": "let id = 2\nlet symbol = ''\n\nfor (var i = 0; i < msg.payload.length; i++) {\n\n    symbol = msg.payload[i][\"ticker\"]\n    node.warn(\"ID: \" +id+ \" Ticker: \" +symbol)\n}\n\nmsg.topic = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1960,
        "wires": [
            [
                "49f724f2f4095b4a"
            ]
        ]
    },
    {
        "id": "430266c44172fbc2",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "update sub_portfolio where id = 2",
        "func": "let sql = ''\nlet ticker = msg.topic\n//let ticker = flow.get(\"ticker\")\nlet symbol = ''\nfor (var i=0;i<msg.payload.length;i++) \n\n{\n\n    let asset_id = msg.payload[i][\"asset_id\"]\n    let symbol = msg.payload[i][\"symbol\"]\n    let exchange = msg.payload[i][\"exchange\"]\n    let asset_class = msg.payload[i][\"asset_class\"]\n    let asset_marginable = msg.payload[i][\"asset_marginable\"]\n    let qty = msg.payload[i][\"qty\"]\n    let avg_entry_price = msg.payload[i][\"avg_entry_price\"]\n    let side = msg.payload[i][\"side\"]\n    let market_value = msg.payload[i][\"market_value\"]\n    let cost_basis = msg.payload[i][\"cost_basis\"]\n    let unrealized_pl = msg.payload[i][\"unrealized_pl\"]\n    let unrealized_plpc = msg.payload[i][\"unrealized_plpc\"]\n    let unrealized_intraday_pl = msg.payload[i][\"unrealized_intraday_pl\"]\n    let unrealized_intraday_plpc = msg.payload[i][\"unrealized_intraday_plpc\"]\n    let current_price = msg.payload[i][\"current_price\"]\n    let lastday_price = msg.payload[i][\"lastday_price\"]\n    let change_today = msg.payload[i][\"change_today\"]\n    let qty_available = msg.payload[i][\"qty_available\"]\n\n    if (symbol === ticker) {\n \n//    node.warn(\"Symbol: \" + symbol + \" Side: \" + side + \" Qty: \" + qty + \" Market Value: \" + market_value + \" Gain to date: \" + unrealized_pl + \" Pct Gain: \" +unrealized_plpc)\n    sql = \"update sub_portfolio set gain_today = \" + unrealized_intraday_pl + \", pctgain_today = \"\n    sql += unrealized_intraday_plpc + \", gain = \" +unrealized_pl+ \", pctgain = \" +unrealized_plpc+ \" where ticker = '\" +symbol+ \"' and id = 2;\" \n    msg.topic = sql\n    node.warn(msg.topic)\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "375553d30a4e1531",
        "type": "comment",
        "z": "b81ceb2d925a8aff",
        "name": "Update sub_portfolio values",
        "info": "",
        "x": 180,
        "y": 1900,
        "wires": []
    },
    {
        "id": "fcdb351f87188dfd",
        "type": "inject",
        "z": "b81ceb2d925a8aff",
        "name": "SELECT * ticker where id = 1",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select ticker from sub_portfolio where id = 1",
        "x": 200,
        "y": 2040,
        "wires": [
            [
                "a340c46aab83175d"
            ]
        ]
    },
    {
        "id": "a340c46aab83175d",
        "type": "sqlite",
        "z": "b81ceb2d925a8aff",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 400,
        "y": 2040,
        "wires": [
            [
                "c3438edee5f243b1"
            ]
        ]
    },
    {
        "id": "c3438edee5f243b1",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "function 2",
        "func": "let id = 1\nlet symbol = ''\nlet cnt = msg.payload.length\nnode.warn(\"Count: \" +cnt)\n\nfor (var i = 0; i < msg.payload.length; i++) {\n\n    symbol = msg.payload[i][\"ticker\"]\n    node.warn(\"ID: \" +id+ \" Ticker: \" +symbol)\n}\n\nmsg.topic = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "77d3d075d746af78",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "update sub_portfolio where id = 2",
        "func": "let sql = ''\nlet ticker = msg.topic\n//let ticker = flow.get(\"ticker\")\nlet symbol = ''\nfor (var i=0;i<msg.payload.length;i++) \n\n{\n\n    let asset_id = msg.payload[i][\"asset_id\"]\n    let symbol = msg.payload[i][\"symbol\"]\n    let exchange = msg.payload[i][\"exchange\"]\n    let asset_class = msg.payload[i][\"asset_class\"]\n    let asset_marginable = msg.payload[i][\"asset_marginable\"]\n    let qty = msg.payload[i][\"qty\"]\n    let avg_entry_price = msg.payload[i][\"avg_entry_price\"]\n    let side = msg.payload[i][\"side\"]\n    let market_value = msg.payload[i][\"market_value\"]\n    let cost_basis = msg.payload[i][\"cost_basis\"]\n    let unrealized_pl = msg.payload[i][\"unrealized_pl\"]\n    let unrealized_plpc = msg.payload[i][\"unrealized_plpc\"]\n    let unrealized_intraday_pl = msg.payload[i][\"unrealized_intraday_pl\"]\n    let unrealized_intraday_plpc = msg.payload[i][\"unrealized_intraday_plpc\"]\n    let current_price = msg.payload[i][\"current_price\"]\n    let lastday_price = msg.payload[i][\"lastday_price\"]\n    let change_today = msg.payload[i][\"change_today\"]\n    let qty_available = msg.payload[i][\"qty_available\"]\n\n    if (symbol === ticker) {\n \n//    node.warn(\"Symbol: \" + symbol + \" Side: \" + side + \" Qty: \" + qty + \" Market Value: \" + market_value + \" Gain to date: \" + unrealized_pl + \" Pct Gain: \" +unrealized_plpc)\n    sql = \"update sub_portfolio set gain_today = \" + unrealized_intraday_pl + \", pctgain_today = \"\n    sql += unrealized_intraday_plpc + \", gain = \" +unrealized_pl+ \", pctgain = \" +unrealized_plpc+ \" where ticker = '\" +symbol+ \"' and id = 2;\" \n    msg.topic = sql\n    node.warn(msg.topic)\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "b9f5d755312691c0",
        "type": "comment",
        "z": "b81ceb2d925a8aff",
        "name": "Flow #4: Update Gains/Losses for Sub Portfolio - Needs to have an position open to update",
        "info": "",
        "x": 360,
        "y": 580,
        "wires": []
    },
    {
        "id": "7b3204ac52890372",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "update positions",
        "func": "let sql = ''\nlet portfolio_id = 2\nlet ticker = flow.get(\"ticker\")\nlet symbol = ''\nlet qty = ''\nlet temp = ''\n\nfor (var i=0;i<msg.payload.length;i++) \n\n{\n\n    let asset_id = msg.payload[i][\"asset_id\"]\n    let symbol = msg.payload[i][\"symbol\"]\n    let exchange = msg.payload[i][\"exchange\"]\n    let asset_class = msg.payload[i][\"asset_class\"]\n    let asset_marginable = msg.payload[i][\"asset_marginable\"]\n    let qty = msg.payload[i][\"qty\"]\n    let avg_entry_price = msg.payload[i][\"avg_entry_price\"]\n    let side = msg.payload[i][\"side\"]\n    let market_value = msg.payload[i][\"market_value\"]\n    let cost_basis = msg.payload[i][\"cost_basis\"]\n    let unrealized_pl = msg.payload[i][\"unrealized_pl\"]\n    let unrealized_plpc = msg.payload[i][\"unrealized_plpc\"]\n    let unrealized_intraday_pl = msg.payload[i][\"unrealized_intraday_pl\"]\n    let unrealized_intraday_plpc = msg.payload[i][\"unrealized_intraday_plpc\"]\n    let current_price = msg.payload[i][\"current_price\"]\n    let lastday_price = msg.payload[i][\"lastday_price\"]\n    let change_today = msg.payload[i][\"change_today\"]\n    let qty_available = msg.payload[i][\"qty_available\"]\n\n    if (symbol === ticker){\n    sql = \"update sub_portfolio set gain_today = \" +unrealized_intraday_pl+ \", pctgain_today = \" +unrealized_intraday_plpc +\", gain = \" +unrealized_pl+ \", pctgain = \" +unrealized_plpc+ \" where ticker = '\" +symbol+ \"' and id = \" +portfolio_id+ \";\\n\" \n    temp += sql\n    }\n}\n\nmsg.topic = qty\nmsg.payload = temp\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 620,
        "wires": [
            [
                "0ce6ecc064ef82b1",
                "b99cc13eaf01d313"
            ]
        ]
    },
    {
        "id": "e54bd5cea7f4b5ca",
        "type": "sqlite",
        "z": "b81ceb2d925a8aff",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1140,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "0ce6ecc064ef82b1",
        "type": "split",
        "z": "b81ceb2d925a8aff",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 620,
        "wires": [
            [
                "199e9d9560538b13"
            ]
        ]
    },
    {
        "id": "199e9d9560538b13",
        "type": "function",
        "z": "b81ceb2d925a8aff",
        "name": "change payload to topic",
        "func": "msg.topic = msg.payload\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 620,
        "wires": [
            [
                "e54bd5cea7f4b5ca"
            ]
        ]
    },
    {
        "id": "897d3eaff3b01bcb",
        "type": "inject",
        "z": "b81ceb2d925a8aff",
        "name": "6 AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "2be702621d22e22a"
            ]
        ]
    },
    {
        "id": "17b97197e3f20749",
        "type": "comment",
        "z": "b81ceb2d925a8aff",
        "name": "Create a sub portfolio for this strategy",
        "info": "",
        "x": 390,
        "y": 340,
        "wires": []
    },
    {
        "id": "94f402d5202c078c",
        "type": "alpaca-order",
        "z": "b81ceb2d925a8aff",
        "conf": "0c86a5f06a42b505",
        "x": 670,
        "y": 260,
        "wires": [
            [
                "ee7ff2703656e717"
            ]
        ]
    },
    {
        "id": "64cee67576d6797e",
        "type": "alpaca-order",
        "z": "b81ceb2d925a8aff",
        "conf": "0c86a5f06a42b505",
        "x": 650,
        "y": 460,
        "wires": [
            [
                "eca1f8a0613a2a4d"
            ]
        ]
    },
    {
        "id": "49f724f2f4095b4a",
        "type": "alpaca-position-query",
        "z": "b81ceb2d925a8aff",
        "conf": "0c86a5f06a42b505",
        "x": 750,
        "y": 1960,
        "wires": [
            [
                "430266c44172fbc2"
            ]
        ]
    },
    {
        "id": "1cb5354c22b04955",
        "type": "alpaca-position-query",
        "z": "b81ceb2d925a8aff",
        "conf": "0c86a5f06a42b505",
        "x": 750,
        "y": 2040,
        "wires": [
            [
                "77d3d075d746af78"
            ]
        ]
    },
    {
        "id": "2be702621d22e22a",
        "type": "alpaca-position-query",
        "z": "b81ceb2d925a8aff",
        "conf": "0c86a5f06a42b505",
        "x": 350,
        "y": 620,
        "wires": [
            [
                "7b3204ac52890372"
            ]
        ]
    },
    {
        "id": "b99cc13eaf01d313",
        "type": "change",
        "z": "b81ceb2d925a8aff",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "portfolio",
                "pt": "flow",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "0e4741a134e13af9",
        "type": "comment",
        "z": "b81ceb2d925a8aff",
        "name": "Note that the trade won't execute if there is no position",
        "info": "",
        "x": 460,
        "y": 500,
        "wires": []
    },
    {
        "id": "3da37290d92c1dc8",
        "type": "sqlitedb",
        "db": "/data/store/orders",
        "mode": "RWC"
    },
    {
        "id": "d6e22e31a8a67436",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PK5NTIWS5NJ8S2MFN6QT",
        "paper": true
    }
]