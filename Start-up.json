[
    {
        "id": "8302b724ab2146ef",
        "type": "tab",
        "label": "Start-up",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7b2fe5bb74365cf1",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "Create table \"balances\"",
        "func": "let acct = \"balances\"\nmsg.query = \"create table IF NOT EXISTS \" +acct+ \" (account VARCHAR(10), unixtime BIGINT, balance FLOAT)\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 20,
        "wires": [
            [
                "22fe91de0f86b6d9"
            ]
        ]
    },
    {
        "id": "f7dd2a1b29660373",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "Create  \"balances_daily\"",
        "func": "let acct = \"balances_daily\"\nmsg.query= \"create table IF NOT EXISTS \" +acct+ \" (account VARCHAR(10), unixtime BIGINT, balance FLOAT)\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 60,
        "wires": [
            [
                "9696513df7c60c2b"
            ]
        ]
    },
    {
        "id": "22fe91de0f86b6d9",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 20,
        "wires": [
            [
                "fe6208089abc832f"
            ]
        ]
    },
    {
        "id": "53445c43cd70b8bf",
        "type": "inject",
        "z": "8302b724ab2146ef",
        "name": "Create tables on start up",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "7b2fe5bb74365cf1",
                "f7dd2a1b29660373",
                "521cfa072c19823c",
                "36c8690ff038298d",
                "444140d5e7fee1d3",
                "c89ee13fcd33698d",
                "d71c0b8506ae9699",
                "e08e8e2d244c5613",
                "e2c0c0af6003b1d0",
                "023c1f65344c8392",
                "e3e54e325f60045a"
            ]
        ]
    },
    {
        "id": "9696513df7c60c2b",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 60,
        "wires": [
            [
                "e5d6c8ab6538f24c"
            ]
        ]
    },
    {
        "id": "cb2a2b7e9b9b9c06",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 100,
        "wires": [
            [
                "0cf9cc6660edcd70"
            ]
        ]
    },
    {
        "id": "9caad58bc8434103",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "521cfa072c19823c",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "Drop markets table",
        "func": "msg.query = \"drop table markets\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 100,
        "wires": [
            [
                "cb2a2b7e9b9b9c06"
            ]
        ]
    },
    {
        "id": "8a019e9acfdbd5a5",
        "type": "comment",
        "z": "8302b724ab2146ef",
        "name": "RUN ONCE AT START: ",
        "info": "",
        "x": 160,
        "y": 60,
        "wires": []
    },
    {
        "id": "36c8690ff038298d",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "Drop algos table",
        "func": "msg.query = \"drop table algos\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "a0424037e0f46114"
            ]
        ]
    },
    {
        "id": "5653e1bcdfc324e3",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 320,
        "wires": [
            [
                "3c80d0213d88e1eb"
            ]
        ]
    },
    {
        "id": "444140d5e7fee1d3",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "Drop positions table",
        "func": "msg.query = \"drop table positions\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 320,
        "wires": [
            [
                "5653e1bcdfc324e3"
            ]
        ]
    },
    {
        "id": "a0424037e0f46114",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 280,
        "wires": [
            [
                "ed883c8138d4058f"
            ]
        ]
    },
    {
        "id": "082275b4ff59f9b5",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "market tickers",
        "func": "msg.payload = \"SPY,QQQ,TSLA,VXX,BTCUSD,ETHUSD\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "3d6611f68b013bc2"
            ]
        ]
    },
    {
        "id": "3d6611f68b013bc2",
        "type": "split",
        "z": "8302b724ab2146ef",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 140,
        "wires": [
            [
                "8edaef84faed24ef"
            ]
        ]
    },
    {
        "id": "8edaef84faed24ef",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "insert markets query",
        "func": "let symbol = msg.payload\nmsg.query = \"insert into markets (symbol) values ('\" +symbol+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 140,
        "wires": [
            [
                "756fa2d6c8309aa8"
            ]
        ]
    },
    {
        "id": "756fa2d6c8309aa8",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "80a7028bf1d184bb",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "watchlist tickers",
        "func": "msg.payload = \"AAPL,JPM,BAC,GLD\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "23e4f1d45beb481c"
            ]
        ]
    },
    {
        "id": "23e4f1d45beb481c",
        "type": "split",
        "z": "8302b724ab2146ef",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "871c50d6139f8c64"
            ]
        ]
    },
    {
        "id": "09771a85c26b623f",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f69290dff0c7dcaf",
        "type": "comment",
        "z": "8302b724ab2146ef",
        "name": "RUN ONCE AT START: Create alpaca_assets table",
        "info": "",
        "x": 250,
        "y": 660,
        "wires": []
    },
    {
        "id": "be4a42e9c8ac0bc8",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "get symbols from alpaca_assets",
        "func": "msg.query = \"select symbol from alpaca_assets\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 820,
        "wires": [
            [
                "d7dc99b2c5fb0105"
            ]
        ]
    },
    {
        "id": "83f66d7307c6a0f2",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "update polygon_symbol",
        "func": "let symbol = msg.payload[\"symbol\"]\n//node.warn(\"Symbol: \" +symbol)\n\n//let polygon_symbol = \"X:\" +symbol\nlet polygon_symbol = symbol\nmsg.query = \"update alpaca_assets set polygon_symbol = '\" +polygon_symbol+ \"' where symbol = '\" +symbol+ \"' and status = 'active';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 820,
        "wires": [
            [
                "bc51b13b303d1272"
            ]
        ]
    },
    {
        "id": "bc51b13b303d1272",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1280,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "20b401ea5f2c2492",
        "type": "split",
        "z": "8302b724ab2146ef",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 820,
        "wires": [
            [
                "83f66d7307c6a0f2"
            ]
        ]
    },
    {
        "id": "d7dc99b2c5fb0105",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 820,
        "wires": [
            [
                "20b401ea5f2c2492"
            ]
        ]
    },
    {
        "id": "9857cbb2cae4be30",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "get crypto symbols from alpaca_assets",
        "func": "msg.query = \"select symbol from alpaca_assets where exchange = 'FTXU'\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 860,
        "wires": [
            [
                "daad4e125e7f3e63"
            ]
        ]
    },
    {
        "id": "88fef2b88ed29b75",
        "type": "split",
        "z": "8302b724ab2146ef",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 860,
        "wires": [
            [
                "44f06c2b1e199bcb"
            ]
        ]
    },
    {
        "id": "daad4e125e7f3e63",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 860,
        "wires": [
            [
                "88fef2b88ed29b75"
            ]
        ]
    },
    {
        "id": "871c50d6139f8c64",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "insert watchlist query",
        "func": "let symbol = msg.payload\nmsg.query = \"insert into watchlist (symbol) values ('\" +symbol+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 220,
        "wires": [
            [
                "09771a85c26b623f"
            ]
        ]
    },
    {
        "id": "c89ee13fcd33698d",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "Drop watchlist table",
        "func": "msg.query = \"drop table watchlist\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "9caad58bc8434103"
            ]
        ]
    },
    {
        "id": "f363d76ac282bd8c",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "update markets from alpaca_assets",
        "func": "msg.query = \"UPDATE markets SET name = alpaca_assets.name, polygon_symbol = alpaca_assets.polygon_symbol, alpaca_symbol = alpaca_assets.alpaca_symbol  FROM alpaca_assets where markets.symbol = alpaca_assets.symbol\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 900,
        "wires": [
            [
                "79132a94501384f4"
            ]
        ]
    },
    {
        "id": "79132a94501384f4",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "503dad4fe74230da",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "79f24f3a7bd02deb",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "update watchlist from alpaca_assets",
        "func": "msg.query = \"UPDATE watchlist SET name = alpaca_assets.name, polygon_symbol = alpaca_assets.polygon_symbol, alpaca_symbol = alpaca_assets.alpaca_symbol  FROM alpaca_assets where watchlist.symbol = alpaca_assets.symbol\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 940,
        "wires": [
            [
                "503dad4fe74230da"
            ]
        ]
    },
    {
        "id": "157aae3e06a53757",
        "type": "comment",
        "z": "8302b724ab2146ef",
        "name": "Orders Table",
        "info": "",
        "x": 130,
        "y": 1020,
        "wires": []
    },
    {
        "id": "2cba2e5d93749656",
        "type": "split",
        "z": "8302b724ab2146ef",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1200,
        "wires": [
            [
                "7949ab0cfb25d3e1"
            ]
        ]
    },
    {
        "id": "92cded826437ab36",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "fe882845ab6abe4e",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "get closed orders - live",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1200,
        "wires": [
            [
                "911dd79c81f7a20a"
            ]
        ]
    },
    {
        "id": "911dd79c81f7a20a",
        "type": "alpaca-query-order",
        "z": "8302b724ab2146ef",
        "conf": "0c86a5f06a42b505",
        "x": 620,
        "y": 1200,
        "wires": [
            [
                "2cba2e5d93749656"
            ]
        ]
    },
    {
        "id": "7949ab0cfb25d3e1",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'live');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1200,
        "wires": [
            [
                "92cded826437ab36"
            ]
        ]
    },
    {
        "id": "31b4a7cf4c8f23a5",
        "type": "split",
        "z": "8302b724ab2146ef",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1240,
        "wires": [
            [
                "c059fc0fcebd6ef4"
            ]
        ]
    },
    {
        "id": "d9eb59e0494675c6",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "0d4d54f08f6ea3cb",
        "type": "alpaca-query-order",
        "z": "8302b724ab2146ef",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1240,
        "wires": [
            [
                "31b4a7cf4c8f23a5"
            ]
        ]
    },
    {
        "id": "8a035b7bd9b6152a",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "truncate orders table",
        "func": "//msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\nmsg.query = \"truncate table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1060,
        "wires": [
            [
                "67581fecf01a3f58"
            ]
        ]
    },
    {
        "id": "67581fecf01a3f58",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "2ce8edd190d0efb4",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "get closed orders - paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1240,
        "wires": [
            [
                "0d4d54f08f6ea3cb"
            ]
        ]
    },
    {
        "id": "c059fc0fcebd6ef4",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1240,
        "wires": [
            [
                "d9eb59e0494675c6"
            ]
        ]
    },
    {
        "id": "8ebefcf4a71f10ba",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "1a984e0e6fdd0eb1",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "update symbol from alpaca_assets",
        "func": "msg.query = \"UPDATE orders SET symbol = alpaca_assets.symbol FROM alpaca_assets where orders.symbol = alpaca_assets.alpaca_symbol\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1280,
        "wires": [
            [
                "8ebefcf4a71f10ba"
            ]
        ]
    },
    {
        "id": "bca044e01d509ef4",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1280,
        "wires": [
            [
                "1a984e0e6fdd0eb1"
            ]
        ]
    },
    {
        "id": "0a88f1df3da49817",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "delete from balances",
        "func": "msg.query = \"delete from balances\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 20,
        "wires": [
            [
                "bd850246aeb1e099"
            ]
        ]
    },
    {
        "id": "bd850246aeb1e099",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "fe6208089abc832f",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 20,
        "wires": [
            [
                "0a88f1df3da49817"
            ]
        ]
    },
    {
        "id": "4d9c80cd2a677ab8",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "delete from balances_daily",
        "func": "msg.query = \"delete from balances_daily\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 60,
        "wires": [
            [
                "791bf9978a9d35dd"
            ]
        ]
    },
    {
        "id": "791bf9978a9d35dd",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "e5d6c8ab6538f24c",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 60,
        "wires": [
            [
                "4d9c80cd2a677ab8"
            ]
        ]
    },
    {
        "id": "d71c0b8506ae9699",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "Drop orders_confirms table",
        "func": "msg.query = \"drop table orders_confirms\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "9da9830a2fb98a72"
            ]
        ]
    },
    {
        "id": "9da9830a2fb98a72",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 360,
        "wires": [
            [
                "d032e78a1cdf3af5"
            ]
        ]
    },
    {
        "id": "6a96ac9daf56f516",
        "type": "inject",
        "z": "8302b724ab2146ef",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "af4cfe4c3734ca37",
                "7af7c7813865f2b4",
                "97c02aa0c2efe749",
                "1028eb831126c231",
                "9976b46fe966c71e",
                "712c67fb90e0657a",
                "f29820c4ea557efe"
            ]
        ]
    },
    {
        "id": "e261164410c40f98",
        "type": "alpaca-asset-query",
        "z": "8302b724ab2146ef",
        "conf": "e535f42f1df1b25f",
        "x": 490,
        "y": 740,
        "wires": [
            [
                "104bba29bae05cdd"
            ]
        ]
    },
    {
        "id": "af4cfe4c3734ca37",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "truncate alpaca_assets",
        "func": "msg.query = \"truncate table alpaca_assets\"\n//msg.query = \"CREATE TABLE IF NOT EXISTS alpaca_assets (id VARCHAR(100), symbol varchar(10) PRIMARY KEY, name VARCHAR(200), alpaca_symbol VARCHAR(10), polygon_symbol VARCHAR(10), easy_to_borrow BOOLEAN, exchange VARCHAR(10), shortable BOOLEAN, fractionable BOOLEAN, marginable BOOLEAN, status VARCHAR(10), tradable BOOLEAN)\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 700,
        "wires": [
            [
                "d5a4c6e870edc821"
            ]
        ]
    },
    {
        "id": "d5a4c6e870edc821",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "7af7c7813865f2b4",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 740,
        "wires": [
            [
                "e261164410c40f98"
            ]
        ]
    },
    {
        "id": "104bba29bae05cdd",
        "type": "split",
        "z": "8302b724ab2146ef",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 740,
        "wires": [
            [
                "667f76ac67c691e3"
            ]
        ]
    },
    {
        "id": "6e477d3575077399",
        "type": "split",
        "z": "8302b724ab2146ef",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1120,
        "wires": [
            [
                "398a8cc9b47d03c1"
            ]
        ]
    },
    {
        "id": "34a1efa8555cf665",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "abd9f6655b23a838",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "get open orders - live",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"open\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1120,
        "wires": [
            [
                "cc2618b2d76e82d4"
            ]
        ]
    },
    {
        "id": "cc2618b2d76e82d4",
        "type": "alpaca-query-order",
        "z": "8302b724ab2146ef",
        "conf": "0c86a5f06a42b505",
        "x": 620,
        "y": 1120,
        "wires": [
            [
                "6e477d3575077399"
            ]
        ]
    },
    {
        "id": "398a8cc9b47d03c1",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'open', 'live');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1120,
        "wires": [
            [
                "34a1efa8555cf665"
            ]
        ]
    },
    {
        "id": "b8f8f3d0eaea7ada",
        "type": "split",
        "z": "8302b724ab2146ef",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1160,
        "wires": [
            [
                "67c83c44e5f77c77"
            ]
        ]
    },
    {
        "id": "3910449ce051cf00",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "ca7ef1d677938320",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "get open orders - paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"open\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1160,
        "wires": [
            [
                "4ed6b97df7dd4ce1"
            ]
        ]
    },
    {
        "id": "4ed6b97df7dd4ce1",
        "type": "alpaca-query-order",
        "z": "8302b724ab2146ef",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1160,
        "wires": [
            [
                "b8f8f3d0eaea7ada"
            ]
        ]
    },
    {
        "id": "67c83c44e5f77c77",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'open', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1160,
        "wires": [
            [
                "3910449ce051cf00"
            ]
        ]
    },
    {
        "id": "8636790f95ed03e6",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1120,
        "wires": [
            [
                "abd9f6655b23a838"
            ]
        ]
    },
    {
        "id": "e25f8b61cd4b3dc6",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1160,
        "wires": [
            [
                "ca7ef1d677938320"
            ]
        ]
    },
    {
        "id": "c5a8a82b172a06d8",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1200,
        "wires": [
            [
                "fe882845ab6abe4e"
            ]
        ]
    },
    {
        "id": "a7d9a61677b9b980",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1240,
        "wires": [
            [
                "2ce8edd190d0efb4"
            ]
        ]
    },
    {
        "id": "dda81ec609c7f996",
        "type": "inject",
        "z": "8302b724ab2146ef",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1060,
        "wires": [
            [
                "8a035b7bd9b6152a",
                "8636790f95ed03e6",
                "e25f8b61cd4b3dc6",
                "c5a8a82b172a06d8",
                "a7d9a61677b9b980",
                "bca044e01d509ef4"
            ]
        ]
    },
    {
        "id": "e08e8e2d244c5613",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "drop orders table",
        "func": "msg.query = \"drop table orders\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 400,
        "wires": [
            [
                "638daea5e8bceafc"
            ]
        ]
    },
    {
        "id": "638daea5e8bceafc",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 400,
        "wires": [
            [
                "3e2275ee851c8446"
            ]
        ]
    },
    {
        "id": "e2c0c0af6003b1d0",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "drop temp_orders table",
        "func": "msg.query = \"drop table temp_orders\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 440,
        "wires": [
            [
                "4d9c80437e73c109"
            ]
        ]
    },
    {
        "id": "4d9c80437e73c109",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 440,
        "wires": [
            [
                "457ac2344815f7ba"
            ]
        ]
    },
    {
        "id": "667f76ac67c691e3",
        "type": "switch",
        "z": "8302b724ab2146ef",
        "name": "active only",
        "property": "payload[\"status\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 740,
        "wires": [
            [
                "75a33a5c5fb82023"
            ],
            []
        ]
    },
    {
        "id": "75a33a5c5fb82023",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "insert into alpaca_assets",
        "func": "let symbol = msg.payload[\"symbol\"]\nlet name = msg.payload[\"name\"]\nlet exchange = msg.payload[\"exchange\"]\nlet status = msg.payload[\"status\"]\nlet shortable = msg.payload[\"shortable\"]\nlet tradable = msg.payload[\"tradable\"]\nlet fractionable = msg.payload[\"fractionable\"]\nlet marginable = msg.payload[\"marginable\"]\nlet easy = msg.payload[\"easy_to_borrow\"]\nname = name.replace(\"'\",\"\")\nsymbol = symbol.replace(\"/\",\"\")\n\n//msg.query = \"insert into alpaca_assets (symbol, name, exchange, tradable, shortable, fractionable, marginable, easy_to_borrow, status)  values ('\" + symbol + \"','\" + name + \"','\" + exchange + \"','\" + tradable + \"','\" + shortable + \"','\" +fractionable+ \"','\" +marginable+ \"','\" +easy+ \"','\" +status+ \"');\"\nmsg.query = \"insert into alpaca_assets (symbol, exchange, tradable, shortable, fractionable, marginable, easy_to_borrow, status)  values ('\" + symbol + \"','\" + exchange + \"','\" + tradable + \"','\" + shortable + \"','\" + fractionable + \"','\" + marginable + \"','\" + easy + \"','\" + status + \"');\"\n\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 740,
        "wires": [
            [
                "ad1a5d4ce56bc105"
            ]
        ]
    },
    {
        "id": "ad1a5d4ce56bc105",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "e3e54e325f60045a",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "drop alpaca_assets",
        "func": "msg.query = \"drop table alpaca_assets\"\n//msg.query = \"CREATE TABLE IF NOT EXISTS alpaca_assets (id VARCHAR(100), symbol varchar(10) PRIMARY KEY, name VARCHAR(200), alpaca_symbol VARCHAR(10), polygon_symbol VARCHAR(10), easy_to_borrow BOOLEAN, exchange VARCHAR(10), shortable BOOLEAN, fractionable BOOLEAN, marginable BOOLEAN, status VARCHAR(10), tradable BOOLEAN)\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            [
                "d3d99994cb23c128"
            ]
        ]
    },
    {
        "id": "d3d99994cb23c128",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 480,
        "wires": [
            [
                "2f3b6e2d5825f683"
            ]
        ]
    },
    {
        "id": "1028eb831126c231",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 820,
        "wires": [
            [
                "be4a42e9c8ac0bc8"
            ]
        ]
    },
    {
        "id": "712c67fb90e0657a",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "35",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 900,
        "wires": [
            [
                "f363d76ac282bd8c"
            ]
        ]
    },
    {
        "id": "f29820c4ea557efe",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 940,
        "wires": [
            [
                "79f24f3a7bd02deb"
            ]
        ]
    },
    {
        "id": "8dfaf108323fbaf3",
        "type": "alpaca-asset-query",
        "z": "8302b724ab2146ef",
        "conf": "e535f42f1df1b25f",
        "x": 490,
        "y": 780,
        "wires": [
            [
                "f7b451860fcfeb14"
            ]
        ]
    },
    {
        "id": "97c02aa0c2efe749",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 780,
        "wires": [
            [
                "8dfaf108323fbaf3"
            ]
        ]
    },
    {
        "id": "f7b451860fcfeb14",
        "type": "split",
        "z": "8302b724ab2146ef",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 780,
        "wires": [
            [
                "7849bf0db51ab322"
            ]
        ]
    },
    {
        "id": "7849bf0db51ab322",
        "type": "switch",
        "z": "8302b724ab2146ef",
        "name": "active only",
        "property": "payload[\"status\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 780,
        "wires": [
            [
                "fb2ce0544990a8b6"
            ],
            []
        ]
    },
    {
        "id": "fb2ce0544990a8b6",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "insert into alpaca_assets",
        "func": "let symbol = msg.payload[\"symbol\"]\nlet name = msg.payload[\"name\"]\n\nname = name.substring(0, 100);\nname = name.replace(\"'\",\"\")\nsymbol = symbol.replace(\"/\",\"\")\n\nmsg.query = \"update alpaca_assets set name = '\" + name + \"' where symbol = '\" +symbol+ \"';\"\n//msg.query = \"insert into alpaca_assets (symbol, exchange, tradable, shortable, fractionable, marginable, easy_to_borrow, status)  values ('\" + symbol + \"','\" + exchange + \"','\" + tradable + \"','\" + shortable + \"','\" + fractionable + \"','\" + marginable + \"','\" + easy + \"','\" + status + \"');\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 780,
        "wires": [
            [
                "3df24708b6dac25b"
            ]
        ]
    },
    {
        "id": "3df24708b6dac25b",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "44f06c2b1e199bcb",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "update alpaca_symbol",
        "func": "let symbol = msg.payload[\"symbol\"]\nsymbol = symbol.substring(0, 19);\n//node.warn(\"Symbol: \" +symbol)\n\nlet alpaca_symbol = symbol.replace(\"USD\",\"/USD\")\nlet polygon_symbol = \"X:\" +symbol\n\n\nalpaca_symbol = alpaca_symbol.substring(0, 19);\npolygon_symbol = polygon_symbol.substring(0, 19);\n\n\nmsg.query = \"update alpaca_assets set alpaca_symbol = '\" +alpaca_symbol+ \"', polygon_symbol = '\" +polygon_symbol+ \"' where symbol = '\" +symbol+ \"' and status = 'active';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 860,
        "wires": [
            [
                "851dd3a7b6ec5ed4"
            ]
        ]
    },
    {
        "id": "851dd3a7b6ec5ed4",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "9976b46fe966c71e",
        "type": "delay",
        "z": "8302b724ab2146ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 860,
        "wires": [
            [
                "9857cbb2cae4be30"
            ]
        ]
    },
    {
        "id": "023c1f65344c8392",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "drop tickers",
        "func": "msg.query = \"drop table tickers\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 520,
        "wires": [
            [
                "47052c8ffdf2edac"
            ]
        ]
    },
    {
        "id": "47052c8ffdf2edac",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 520,
        "wires": [
            [
                "9b6d985e1f4d8456"
            ]
        ]
    },
    {
        "id": "9b6d985e1f4d8456",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "create tickers",
        "func": "//msg.query = \"truncate table alpaca_assets\"\nmsg.query = \"CREATE TABLE IF NOT EXISTS tickers (id BIGINT, symbol varchar(20) PRIMARY KEY, name VARCHAR(200), portfolioname VARCHAR(100), orderid VARCHAR(100) )\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 520,
        "wires": [
            [
                "610432f71adc5599"
            ]
        ]
    },
    {
        "id": "610432f71adc5599",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "0cf9cc6660edcd70",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "Create markets table",
        "func": "msg.query = \"create table IF NOT EXISTS markets (symbol VARCHAR(20) PRIMARY KEY,name VARCHAR(100),polygon_symbol VARCHAR(20), alpaca_symbol VARCHAR(20), closing FLOAT,price24h FLOAT,price7d FLOAT, change24h FLOAT,change7d FLOAT,pct24 FLOAT,pct7d FLOAT)\"\n//msg.query = \"drop table markets\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 100,
        "wires": [
            [
                "60fbc6f2dd15b8c2"
            ]
        ]
    },
    {
        "id": "60fbc6f2dd15b8c2",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 100,
        "wires": [
            [
                "082275b4ff59f9b5"
            ]
        ]
    },
    {
        "id": "e6fc9a220ded3a13",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "Create watchlist table",
        "func": "msg.query = \"create table IF NOT EXISTS watchlist (symbol VARCHAR(20) PRIMARY KEY,name VARCHAR(100),polygon_symbol VARCHAR(20), alpaca_symbol VARCHAR(20), closing FLOAT,price24h FLOAT,price7d FLOAT, change24h FLOAT,change7d FLOAT,pct24 FLOAT,pct7d FLOAT)\"\n//msg.query = \"delete from watchlist\"\n//msg.query = \"drop table watchlist\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 180,
        "wires": [
            [
                "edc35d7c987e72f5"
            ]
        ]
    },
    {
        "id": "edc35d7c987e72f5",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 180,
        "wires": [
            [
                "80a7028bf1d184bb"
            ]
        ]
    },
    {
        "id": "ed883c8138d4058f",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "Create algos table",
        "func": "msg.query = \"create table IF NOT EXISTS algos (login varchar(20), id BIGINT, algo_name VARCHAR(100), algo_type VARCHAR(10), status VARCHAR(10), benchmark VARCHAR(10), benchmark_start FLOAT,portfolio_size FLOAT, gain_today FLOAT, pctgain_today FLOAT, gain_alltime FLOAT, pctgain_alltime FLOAT,pctbench_today FLOAT, pctbench_alltime FLOAT, info_ratio FLOAT, tickers VARCHAR(5000),asset_class VARCHAR(10), number INT );\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 280,
        "wires": [
            [
                "1e9c2cfb2dc6ca2e"
            ]
        ]
    },
    {
        "id": "1e9c2cfb2dc6ca2e",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "e5617bd590fd2dfb",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "3c80d0213d88e1eb",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "create positions table",
        "func": "msg.query = \"create table IF NOT EXISTS positions (id BIGINT, asset_id VARCHAR(100), portfolioname VARCHAR(100), symbol VARCHAR(10), name VARCHAR(500), account VARCHAR(10), exchange VARCHAR(100), asset_class VARCHAR(100), asset_marginable VARCHAR(100), qty FLOAT, avg_entry_price FLOAT, side VARCHAR(100), market_value FLOAT, cost_basis FLOAT, unrealized_pl FLOAT, unrealized_plpc FLOAT, unrealized_intraday_pl FLOAT, unrealized_intraday_plpc FLOAT, current_price FLOAT, lastday_price FLOAT, change_today FLOAT, qty_available FLOAT, status VARCHAR(10), orderid VARCHAR(100))\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 320,
        "wires": [
            [
                "e5617bd590fd2dfb"
            ]
        ]
    },
    {
        "id": "d032e78a1cdf3af5",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "create order_confirms table",
        "func": "//msg.query = \"DROP TABLE order_confirms\"\nmsg.query = \"create table IF NOT EXISTS order_confirms (id VARCHAR(200), client_order_id VARCHAR(200), created_at VARCHAR(200), updated_at VARCHAR(200), submitted_at VARCHAR(200), filled_at VARCHAR(200), expired_at VARCHAR(200), canceled_at VARCHAR(200), failed_at VARCHAR(200), replaced_at VARCHAR(200), replaced_by VARCHAR(200), replaces VARCHAR(200), asset_id VARCHAR(200), symbol VARCHAR(40), asset_class VARCHAR(40), notional FLOAT, qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(40), order_type VARCHAR(40), type VARCHAR(40), side VARCHAR(40),  time_in_force VARCHAR(40), limit_price FLOAT, stop_price FLOAT, status VARCHAR(40), extended_hours BOOLEAN, legs BOOLEAN, trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(40), subtag VARCHAR(200), source VARCHAR(40))\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 360,
        "wires": [
            [
                "f7dd84fdf18e61e9"
            ]
        ]
    },
    {
        "id": "f7dd84fdf18e61e9",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1120,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3e2275ee851c8446",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "create orders table ",
        "func": "msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100), client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10),CONSTRAINT ids UNIQUE (id, order_status)) \"\n//msg.query = \"drop table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 400,
        "wires": [
            [
                "a9f0d65fc695aab6"
            ]
        ]
    },
    {
        "id": "a9f0d65fc695aab6",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 400,
        "wires": [
            [
                "2f48060754aab315"
            ]
        ]
    },
    {
        "id": "2f48060754aab315",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "create index",
        "func": "//msg.query = \"create index type on orders(status)\"\n//msg.query = \"ALTER TABLE orders DROP CONSTRAINT IF EXISTS ids, ADD CONSTRAINT ids UNIQUE NULLS NOT DISTINCT (id, order_status);\"\nmsg.query = \"ALTER TABLE orders ADD CONSTRAINT ids UNIQUE (id, order_status);\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 400,
        "wires": [
            [
                "d080f12336864a18"
            ]
        ]
    },
    {
        "id": "d080f12336864a18",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1300,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "457ac2344815f7ba",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "create temp_orders table ",
        "func": "msg.query = \"create table IF NOT EXISTS temp_orders (symbol VARCHAR(10) PRIMARY KEY, open Boolean)\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 440,
        "wires": [
            [
                "f1afd965125c6706"
            ]
        ]
    },
    {
        "id": "f1afd965125c6706",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2f3b6e2d5825f683",
        "type": "function",
        "z": "8302b724ab2146ef",
        "name": "create alpaca_assets",
        "func": "//msg.query = \"truncate table alpaca_assets\"\nmsg.query = \"CREATE TABLE IF NOT EXISTS alpaca_assets (id VARCHAR(100), symbol varchar(20) PRIMARY KEY, name VARCHAR(200), alpaca_symbol VARCHAR(20), polygon_symbol VARCHAR(20), easy_to_borrow BOOLEAN, exchange VARCHAR(10), shortable BOOLEAN, fractionable BOOLEAN, marginable BOOLEAN, status VARCHAR(10), tradable BOOLEAN)\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 480,
        "wires": [
            [
                "05353bed9447e641"
            ]
        ]
    },
    {
        "id": "05353bed9447e641",
        "type": "postgresql",
        "z": "8302b724ab2146ef",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    }
]