[
    {
        "id": "f053db246b2903f8",
        "type": "tab",
        "label": "Buy FAANG Portfolio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c2560251022f721e",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = msg.algo_name\nlet number = msg.number\nlet psize = msg.psize\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'buy',\n    \"type\": 'limit',\n    \"client_order_id\": client_order_id,\n    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 460,
        "wires": [
            [
                "7c6e01505d1b774a"
            ]
        ]
    },
    {
        "id": "7c6e01505d1b774a",
        "type": "alpaca-order",
        "z": "f053db246b2903f8",
        "conf": "c06cec183f9317f9",
        "x": 590,
        "y": 460,
        "wires": [
            [
                "105ef20f3192b692"
            ]
        ]
    },
    {
        "id": "f88fd2a33e2fd49f",
        "type": "function-npm",
        "z": "f053db246b2903f8",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 400,
        "wires": [
            [
                "7d152b1dbb821a01"
            ]
        ]
    },
    {
        "id": "e5966d72e310fc5a",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 400,
        "wires": [
            [
                "c2560251022f721e"
            ]
        ]
    },
    {
        "id": "7d152b1dbb821a01",
        "type": "polygon-last-trade-v3",
        "z": "f053db246b2903f8",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 740,
        "y": 400,
        "wires": [
            [
                "e5966d72e310fc5a"
            ]
        ]
    },
    {
        "id": "bc070b6920bc8e23",
        "type": "postgresql",
        "z": "f053db246b2903f8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1060,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "105ef20f3192b692",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nsubtag = ''\n\nif ( source == null) { source = 0}\nif (limit_price == null) { limit_price = 0 }\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 460,
        "wires": [
            [
                "bc070b6920bc8e23"
            ]
        ]
    },
    {
        "id": "51c9bccf9447ee33",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "set id,tickers, portfolioname",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n//d = 1680191929229\nmsg.id = d\nlet tickers = 'META,AAPL,AMZN,NFLX,GOOG,MSFT'\nmsg.tickers = tickers\nmsg.algo_name = 'Buy FAANG Portfolio'\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "3d8398115d3a2f6d"
            ]
        ]
    },
    {
        "id": "848ec45da8eb3ef2",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = msg.id\nlet login = global.get(\"login\")\nlet ticker = msg.tickers\nlet algo_name = msg.algo_name\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 6 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 10000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet strategy_type = \"long\"\nlet benchmark = 'SPY'\n\nnode.warn(ticker)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 280,
        "wires": [
            [
                "32ce1a6239ae95c0"
            ]
        ]
    },
    {
        "id": "5903e366a911b20e",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "delete from tickers_paper",
        "func": "let id = msg.id\nlet symbol = msg.payload\nlet portfolioname = msg.algo_name\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"delete from tickers_paper where symbol like '\" +symbol+ \"';\"\n//msg.query = \"insert into tickers_paper (id, symbol, portfolioname) values (\" + id + \",'\" + symbol + \"', '\" + portfolioname + \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 340,
        "wires": [
            [
                "81bfb54f16915493"
            ]
        ]
    },
    {
        "id": "81bfb54f16915493",
        "type": "postgresql",
        "z": "f053db246b2903f8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 820,
        "y": 340,
        "wires": [
            [
                "7cef52e4b281bc17"
            ]
        ]
    },
    {
        "id": "4c94b6fed3c32080",
        "type": "comment",
        "z": "f053db246b2903f8",
        "name": "CopyrightÂ©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 270,
        "y": 800,
        "wires": []
    },
    {
        "id": "32ce1a6239ae95c0",
        "type": "delay",
        "z": "f053db246b2903f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 280,
        "wires": [
            [
                "2e8275d29a1d86f9"
            ]
        ]
    },
    {
        "id": "9d38e46ce4428011",
        "type": "delay",
        "z": "f053db246b2903f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 400,
        "wires": [
            [
                "f88fd2a33e2fd49f"
            ]
        ]
    },
    {
        "id": "04c6fa6fdbc4a51a",
        "type": "postgresql",
        "z": "f053db246b2903f8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 280,
        "wires": [
            [
                "e73a52508d01778b"
            ]
        ]
    },
    {
        "id": "3d8398115d3a2f6d",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "delete existing algo",
        "func": "msg.query = \"delete from algos where algo_name = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "56aa19bfac8c0684"
            ]
        ]
    },
    {
        "id": "56aa19bfac8c0684",
        "type": "postgresql",
        "z": "f053db246b2903f8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 760,
        "y": 220,
        "wires": [
            [
                "848ec45da8eb3ef2"
            ]
        ]
    },
    {
        "id": "7cef52e4b281bc17",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "insert into tickers_paper",
        "func": "let id = msg.id\nlet symbol = msg.symbol\nlet portfolioname = msg.algo_name\nmsg.query = \"insert into tickers_paper (id, symbol, portfolioname) values (\" + id + \",'\" + symbol + \"', '\" + portfolioname + \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 340,
        "wires": [
            [
                "6a260abfa36a7fe7"
            ]
        ]
    },
    {
        "id": "6a260abfa36a7fe7",
        "type": "postgresql",
        "z": "f053db246b2903f8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 340,
        "wires": [
            [
                "9d38e46ce4428011"
            ]
        ]
    },
    {
        "id": "e73a52508d01778b",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "get tickers ",
        "func": "let ticker = msg.tickers\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "dd3cc4f87ca81945"
            ]
        ]
    },
    {
        "id": "dd3cc4f87ca81945",
        "type": "split",
        "z": "f053db246b2903f8",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 450,
        "y": 340,
        "wires": [
            [
                "5903e366a911b20e"
            ]
        ]
    },
    {
        "id": "2e8275d29a1d86f9",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "add values to algos table",
        "func": "let id = msg.id\nlet ticker = msg.tickers\nlet algo_name = msg.algo_name\nlet login = msg.login\nlet asset_class = msg.asset_class\nlet number = msg.number\nlet target = msg.target\nlet account = msg.account\nlet psize = msg.psize\nlet algo_type = msg.algo_type\nlet status = msg.status\nlet benchmark = msg.benchmark\n\nlet benchmark_start = global.get(\"spy_current\")\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 280,
        "wires": [
            [
                "04c6fa6fdbc4a51a"
            ]
        ]
    },
    {
        "id": "eb34c89402b3b087",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "select ticker for algo",
        "func": "msg.query = \"select symbol from tickers_paper where portfolioname = 'Buy FAANG Portfolio'\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 580,
        "wires": [
            [
                "865b9591625fbc57"
            ]
        ]
    },
    {
        "id": "50d1dac25d5f4a19",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "get fresh list of tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.symbol;\n    tickers += ticker+ \", \"\n}\n\n// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nmsg.id = d\nmsg.payload = tickers\n//node.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 580,
        "wires": [
            [
                "8a1384c0c2b14cae"
            ]
        ]
    },
    {
        "id": "865b9591625fbc57",
        "type": "postgresql",
        "z": "f053db246b2903f8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 580,
        "wires": [
            [
                "50d1dac25d5f4a19"
            ]
        ]
    },
    {
        "id": "e5202efc0520a9d1",
        "type": "alpaca-position-query",
        "z": "f053db246b2903f8",
        "conf": "c06cec183f9317f9",
        "x": 280,
        "y": 640,
        "wires": [
            [
                "fa3f36b11ac31b37"
            ]
        ]
    },
    {
        "id": "c5816ccbc5159336",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\nlet symbol = msg.payload[\"symbol\"] \n//node.warn(\"Symbol: \" +symbol+ \" Price: \" + price + \" Qty: \" + qty + \" Side: \" + side + \" Profit: \" + profit)\n\nlet ticker = msg.ticker\n\n\nif ( ticker == symbol){\n//node.warn(\"Symbol: \" +symbol+ \" Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\nmsg.symbol = symbol\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 640,
        "wires": [
            [
                "6916f7564b727eed"
            ]
        ]
    },
    {
        "id": "fa3f36b11ac31b37",
        "type": "split",
        "z": "f053db246b2903f8",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 480,
        "y": 640,
        "wires": [
            [
                "c5816ccbc5159336"
            ]
        ]
    },
    {
        "id": "8a1384c0c2b14cae",
        "type": "split",
        "z": "f053db246b2903f8",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 840,
        "y": 580,
        "wires": [
            [
                "dee184f2abb35164"
            ]
        ]
    },
    {
        "id": "dee184f2abb35164",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "split tickers",
        "func": "let ticker = msg.payload\nticker = ticker.replace(\" \",\"\")\n//node.warn(ticker) \nmsg.ticker = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 580,
        "wires": [
            [
                "e5202efc0520a9d1"
            ]
        ]
    },
    {
        "id": "6916f7564b727eed",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = msg.algo_name\nlet price = msg.price\nlet qty = msg.qty\n\n//qty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 700,
        "wires": [
            [
                "09e060bd82fe7281"
            ]
        ]
    },
    {
        "id": "09e060bd82fe7281",
        "type": "alpaca-order",
        "z": "f053db246b2903f8",
        "conf": "c06cec183f9317f9",
        "x": 500,
        "y": 700,
        "wires": [
            [
                "d71e9cc1dc021313"
            ]
        ]
    },
    {
        "id": "454927b4ac6f2d64",
        "type": "postgresql",
        "z": "f053db246b2903f8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 970,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "d71e9cc1dc021313",
        "type": "function",
        "z": "f053db246b2903f8",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nsubtag = ''\n\nif ( source == null) { source = 0}\nif (limit_price == null) { limit_price = 0 }\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 700,
        "wires": [
            [
                "454927b4ac6f2d64"
            ]
        ]
    },
    {
        "id": "db5afae573b56b56",
        "type": "comment",
        "z": "f053db246b2903f8",
        "name": "Close Portfolio",
        "info": "",
        "x": 140,
        "y": 520,
        "wires": []
    },
    {
        "id": "8661df68ee55e74a",
        "type": "comment",
        "z": "f053db246b2903f8",
        "name": "Create create the FAANG portolio, click GO.",
        "info": "",
        "x": 230,
        "y": 180,
        "wires": []
    },
    {
        "id": "eb73bd9f3a836127",
        "type": "inject",
        "z": "f053db246b2903f8",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "51c9bccf9447ee33"
            ]
        ]
    },
    {
        "id": "f023a0637fa100c1",
        "type": "inject",
        "z": "f053db246b2903f8",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "eb34c89402b3b087"
            ]
        ]
    },
    {
        "id": "b72f08054ed321ed",
        "type": "comment",
        "z": "f053db246b2903f8",
        "name": "Please refer to the Flow Documentation detailed explanation of this flow.",
        "info": "",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "f1a722a23261f16c",
        "type": "pts_oauth_browser",
        "z": "f053db246b2903f8",
        "x": 320,
        "y": 80,
        "wires": []
    },
    {
        "id": "af601478100a274e",
        "type": "inject",
        "z": "f053db246b2903f8",
        "name": "Click here",
        "props": [
            {
                "p": "url_redirect1",
                "v": "https://drive.google.com/file/d/1vAUkXuiP4CGUszLROUvCPBdG5Lx0T0I0/view",
                "vt": "str"
            },
            {
                "p": "url_redirect",
                "v": "https://docs.google.com/document/d/1K3mPA2g2eiYU0s8Jyp4_-gQIlTvW8FCUwTNqY2iJHMw/view",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "f1a722a23261f16c"
            ]
        ]
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "USE-OAUTH-OR-REPLACE",
        "paper": true
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]