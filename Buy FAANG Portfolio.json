[
    {
        "id": "20a737e096b152ed",
        "type": "tab",
        "label": "Buy FAANG Portfolio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0aa32e50cbce092d",
        "type": "inject",
        "z": "20a737e096b152ed",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "e19b5809f0525cf1",
                "d63036a494e727e6"
            ]
        ]
    },
    {
        "id": "822f06923fb2b226",
        "type": "comment",
        "z": "20a737e096b152ed",
        "name": "Flow 2: Create new entry in algos table (ONCE)",
        "info": "",
        "x": 240,
        "y": 320,
        "wires": []
    },
    {
        "id": "171c22ce4b301459",
        "type": "comment",
        "z": "20a737e096b152ed",
        "name": "Flow 3: Create trading flow (ONCE)",
        "info": "",
        "x": 200,
        "y": 460,
        "wires": []
    },
    {
        "id": "d84fd77c8385973d",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'buy',\n    \"type\": 'limit',\n    \"client_order_id\": client_order_id,\n    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "7755a1318e961f82"
            ]
        ]
    },
    {
        "id": "7755a1318e961f82",
        "type": "alpaca-order",
        "z": "20a737e096b152ed",
        "conf": "e535f42f1df1b25f",
        "x": 530,
        "y": 640,
        "wires": [
            [
                "fde08b6e91ccaaa3"
            ]
        ]
    },
    {
        "id": "ae394383aff5f5a0",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 520,
        "wires": [
            [
                "6d1c24432abe39d8"
            ]
        ]
    },
    {
        "id": "6d1c24432abe39d8",
        "type": "split",
        "z": "20a737e096b152ed",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 520,
        "wires": [
            [
                "99d568eaa30d7c7a"
            ]
        ]
    },
    {
        "id": "4496ba0c0998e13f",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 520,
        "wires": [
            [
                "52bf27d5394c4a0d"
            ]
        ]
    },
    {
        "id": "1f7ce5f85dbb3981",
        "type": "function-npm",
        "z": "20a737e096b152ed",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 580,
        "wires": [
            [
                "b8239f504db3ddee"
            ]
        ]
    },
    {
        "id": "99d568eaa30d7c7a",
        "type": "delay",
        "z": "20a737e096b152ed",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 520,
        "wires": [
            [
                "4496ba0c0998e13f"
            ]
        ]
    },
    {
        "id": "25d752c092a19dc8",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 580,
        "wires": [
            [
                "1f7ce5f85dbb3981"
            ]
        ]
    },
    {
        "id": "52bf27d5394c4a0d",
        "type": "postgresql",
        "z": "20a737e096b152ed",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 520,
        "wires": [
            [
                "eec55c30f1601862"
            ]
        ]
    },
    {
        "id": "eec55c30f1601862",
        "type": "split",
        "z": "20a737e096b152ed",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 580,
        "wires": [
            [
                "25d752c092a19dc8"
            ]
        ]
    },
    {
        "id": "69fbb54fc1c7b364",
        "type": "inject",
        "z": "20a737e096b152ed",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "ae394383aff5f5a0"
            ]
        ]
    },
    {
        "id": "74daa007544def0c",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 580,
        "wires": [
            [
                "d84fd77c8385973d"
            ]
        ]
    },
    {
        "id": "b8239f504db3ddee",
        "type": "polygon-last-trade-v3",
        "z": "20a737e096b152ed",
        "conf": "1ddc564273825907",
        "symbol": "",
        "x": 940,
        "y": 580,
        "wires": [
            [
                "74daa007544def0c"
            ]
        ]
    },
    {
        "id": "1105fe9314c53038",
        "type": "postgresql",
        "z": "20a737e096b152ed",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "fde08b6e91ccaaa3",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 640,
        "wires": [
            [
                "1105fe9314c53038"
            ]
        ]
    },
    {
        "id": "ad685d6571f5b509",
        "type": "comment",
        "z": "20a737e096b152ed",
        "name": "Flow 1: Define Strategy and Set Trading Values (ONCE)",
        "info": "",
        "x": 260,
        "y": 20,
        "wires": []
    },
    {
        "id": "e19b5809f0525cf1",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 160,
        "wires": [
            [
                "34497a8187436392"
            ]
        ]
    },
    {
        "id": "34497a8187436392",
        "type": "split",
        "z": "20a737e096b152ed",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "f316c8e3be08c713"
            ]
        ]
    },
    {
        "id": "f316c8e3be08c713",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "insert into tickers_paper",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers_paper (id, symbol, portfolioname) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"');\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 160,
        "wires": [
            [
                "2b669e50820b2c7d"
            ]
        ]
    },
    {
        "id": "2b669e50820b2c7d",
        "type": "postgresql",
        "z": "20a737e096b152ed",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7be7034373fd9465",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers_paper set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_paper.symbol\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 200,
        "wires": [
            [
                "17899ad7ba128290"
            ]
        ]
    },
    {
        "id": "d63036a494e727e6",
        "type": "delay",
        "z": "20a737e096b152ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "7be7034373fd9465"
            ]
        ]
    },
    {
        "id": "17899ad7ba128290",
        "type": "postgresql",
        "z": "20a737e096b152ed",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "1daf9ddf91b3eb9f",
        "type": "inject",
        "z": "20a737e096b152ed",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "c3ec0118f644acfb"
            ]
        ]
    },
    {
        "id": "c3ec0118f644acfb",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "set id,tickers, portfolioname",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nmsg.id = d\nlet tickers = 'META,AAPL,AMZN,NFLX,GOOG'\nmsg.tickers = tickers\nmsg.algo_name = 'Buy FAANG Portfolio'\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "3f1e53e01bf9649b"
            ]
        ]
    },
    {
        "id": "3f1e53e01bf9649b",
        "type": "change",
        "z": "20a737e096b152ed",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9cf0ee763275009d",
        "type": "inject",
        "z": "20a737e096b152ed",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "89fe3d2f2f6e6335"
            ]
        ]
    },
    {
        "id": "300c2f75c5b46d39",
        "type": "postgresql",
        "z": "20a737e096b152ed",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "968fa5d4e5f30751",
        "type": "inject",
        "z": "20a737e096b152ed",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "3b9da925d214b860"
            ]
        ]
    },
    {
        "id": "3b9da925d214b860",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet login = 'freedemo'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 5 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet strategy_type = \"long\"\nlet benchmark = 'SPY'\n\nnode.warn(ticker)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.strategy_type = strategy_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "f827c5208d502afe"
            ]
        ]
    },
    {
        "id": "f827c5208d502afe",
        "type": "change",
        "z": "20a737e096b152ed",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "strategy_type",
                "pt": "flow",
                "to": "strategy_type",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "89fe3d2f2f6e6335",
        "type": "function",
        "z": "20a737e096b152ed",
        "name": "add values from flow variables to algo table",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = flow.get(\"login\")\nlet asset_class = flow.get(\"asset_class\")\nlet number = flow.get(\"number\")\nlet target = flow.get(\"target\")\nlet account = flow.get(\"account\")\nlet psize = flow.get(\"psize\")\nlet algo_type = flow.get(\"algo_type\")\nlet strategy_type = flow.get(\"strategy_type\")\nlet status = flow.get(\"status\")\nlet benchmark = flow.get(\"benchmark\")\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,strategy_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + strategy_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"');\"\nmsg.query = sql\nnode.warn(msg.query)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "300c2f75c5b46d39"
            ]
        ]
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKJ7QEDYOP0ZZ5FQTMY4",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "1ddc564273825907",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]