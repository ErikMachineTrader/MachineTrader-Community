[
    {
        "id": "15d09ab80a8c38b9",
        "type": "tab",
        "label": "Buy FAANG Portfolio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0bb712cc3c4d6cd8",
        "type": "comment",
        "z": "15d09ab80a8c38b9",
        "name": "Flow 3: Create trading flow (ONCE)",
        "info": "",
        "x": 200,
        "y": 460,
        "wires": []
    },
    {
        "id": "3649ad79f8e34abc",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'buy',\n    \"type\": 'limit',\n    \"client_order_id\": client_order_id,\n    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "748299fcba40128f"
            ]
        ]
    },
    {
        "id": "748299fcba40128f",
        "type": "alpaca-order",
        "z": "15d09ab80a8c38b9",
        "conf": "810ce3520dc18040",
        "x": 530,
        "y": 640,
        "wires": [
            [
                "ab20fc388b58a287"
            ]
        ]
    },
    {
        "id": "7a6f8ae5e09f29ff",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 520,
        "wires": [
            [
                "d64fcccb8c453bcc"
            ]
        ]
    },
    {
        "id": "d64fcccb8c453bcc",
        "type": "split",
        "z": "15d09ab80a8c38b9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 520,
        "wires": [
            [
                "97472871627bacb6"
            ]
        ]
    },
    {
        "id": "f47c74b162e370c1",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 520,
        "wires": [
            [
                "8f36e17287772398"
            ]
        ]
    },
    {
        "id": "8892c1961b044b25",
        "type": "function-npm",
        "z": "15d09ab80a8c38b9",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 580,
        "wires": [
            [
                "d65af6cf02e5565a"
            ]
        ]
    },
    {
        "id": "97472871627bacb6",
        "type": "delay",
        "z": "15d09ab80a8c38b9",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 520,
        "wires": [
            [
                "f47c74b162e370c1"
            ]
        ]
    },
    {
        "id": "23450d25caeb9c5a",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 580,
        "wires": [
            [
                "8892c1961b044b25"
            ]
        ]
    },
    {
        "id": "8f36e17287772398",
        "type": "postgresql",
        "z": "15d09ab80a8c38b9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 520,
        "wires": [
            [
                "92dfea129901c556"
            ]
        ]
    },
    {
        "id": "92dfea129901c556",
        "type": "split",
        "z": "15d09ab80a8c38b9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 580,
        "wires": [
            [
                "23450d25caeb9c5a"
            ]
        ]
    },
    {
        "id": "2e3105fe6287ccae",
        "type": "inject",
        "z": "15d09ab80a8c38b9",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "7a6f8ae5e09f29ff"
            ]
        ]
    },
    {
        "id": "1607ed3f5f138ecf",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 580,
        "wires": [
            [
                "3649ad79f8e34abc"
            ]
        ]
    },
    {
        "id": "d65af6cf02e5565a",
        "type": "polygon-last-trade-v3",
        "z": "15d09ab80a8c38b9",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 940,
        "y": 580,
        "wires": [
            [
                "1607ed3f5f138ecf"
            ]
        ]
    },
    {
        "id": "eb9570cf36e3c7fb",
        "type": "postgresql",
        "z": "15d09ab80a8c38b9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "ab20fc388b58a287",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 640,
        "wires": [
            [
                "eb9570cf36e3c7fb"
            ]
        ]
    },
    {
        "id": "8f630d2ffbcb1a76",
        "type": "inject",
        "z": "15d09ab80a8c38b9",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "a0d5a3d92eec1840"
            ]
        ]
    },
    {
        "id": "a0d5a3d92eec1840",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "set id,tickers, portfolioname",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nmsg.id = d\nlet tickers = 'META,AAPL,AMZN,NFLX,GOOG,MSFT'\nmsg.tickers = tickers\nmsg.algo_name = 'Buy FAANG+MSFT Portfolio [LIVE]'\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "d837a034237cb30c"
            ]
        ]
    },
    {
        "id": "d837a034237cb30c",
        "type": "change",
        "z": "15d09ab80a8c38b9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "207054fd1ec395be",
        "type": "comment",
        "z": "15d09ab80a8c38b9",
        "name": "Flow 1: Define Strategy and Set Trading Values",
        "info": "",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "9d5673d043cb7019",
        "type": "comment",
        "z": "15d09ab80a8c38b9",
        "name": "Flow 2: Create new entry in algos table (FIRSTTIME ONLY)",
        "info": "",
        "x": 250,
        "y": 340,
        "wires": []
    },
    {
        "id": "6eb62f803bc40f6f",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet login = 'demo'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 6 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'live'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet strategy_type = \"long\"\nlet benchmark = 'SPY'\n\nnode.warn(ticker)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "15b05d31758fa9ea"
            ]
        ]
    },
    {
        "id": "32a4738f5b98e9fb",
        "type": "inject",
        "z": "15d09ab80a8c38b9",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "6eb62f803bc40f6f"
            ]
        ]
    },
    {
        "id": "15b05d31758fa9ea",
        "type": "change",
        "z": "15d09ab80a8c38b9",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "15a884f9f2991b33",
        "type": "inject",
        "z": "15d09ab80a8c38b9",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 220,
        "wires": [
            [
                "029b999767c48db1",
                "4f12cffcc79bfab2"
            ]
        ]
    },
    {
        "id": "029b999767c48db1",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "a78de0a56302bd99"
            ]
        ]
    },
    {
        "id": "a78de0a56302bd99",
        "type": "split",
        "z": "15d09ab80a8c38b9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 220,
        "wires": [
            [
                "8a24efe22c58d239"
            ]
        ]
    },
    {
        "id": "8a24efe22c58d239",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "insert into tickers_live",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers_live (id, symbol, portfolioname) values (\" + id + \",'\" + symbol + \"', '\" + portfolioname + \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "8459e82ee7192703"
            ]
        ]
    },
    {
        "id": "8459e82ee7192703",
        "type": "postgresql",
        "z": "15d09ab80a8c38b9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "673061b28be194e8",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "get tickers_live with name from alpaca_assets",
        "func": "msg.query = \"update tickers_live set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_live.symbol\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 260,
        "wires": [
            [
                "e9e06d0497440b89"
            ]
        ]
    },
    {
        "id": "4f12cffcc79bfab2",
        "type": "delay",
        "z": "15d09ab80a8c38b9",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 260,
        "wires": [
            [
                "673061b28be194e8"
            ]
        ]
    },
    {
        "id": "e9e06d0497440b89",
        "type": "postgresql",
        "z": "15d09ab80a8c38b9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0251e621f50f307d",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "add values to algos table",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = flow.get(\"login\")\nlet asset_class = flow.get(\"asset_class\")\nlet number = flow.get(\"number\")\nlet target = flow.get(\"target\")\nlet account = flow.get(\"account\")\nlet psize = flow.get(\"psize\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet benchmark = flow.get(\"benchmark\")\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 400,
        "wires": [
            [
                "9dc9a240cebffe44"
            ]
        ]
    },
    {
        "id": "eb6e823372ddfaaa",
        "type": "inject",
        "z": "15d09ab80a8c38b9",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "0251e621f50f307d"
            ]
        ]
    },
    {
        "id": "9dc9a240cebffe44",
        "type": "postgresql",
        "z": "15d09ab80a8c38b9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "6ff4d385b574535e",
        "type": "comment",
        "z": "15d09ab80a8c38b9",
        "name": "LIVE ",
        "info": "",
        "x": 630,
        "y": 40,
        "wires": []
    },
    {
        "id": "a0d629f7037c0a30",
        "type": "comment",
        "z": "15d09ab80a8c38b9",
        "name": "Copyright©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 1010,
        "y": 40,
        "wires": []
    },
    {
        "id": "810ce3520dc18040",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PKF9QKA8GYZ6EQKYIZWB",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]