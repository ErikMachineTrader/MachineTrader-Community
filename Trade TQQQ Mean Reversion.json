[
    {
        "id": "ce626d5b45447f96",
        "type": "tab",
        "label": "Trade TQQQ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c81cdb479561f2cd",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "Flow 1: Define Strategy and Set Trading Values (ONCE). Set profit target in define values (line 10).",
        "info": "",
        "x": 370,
        "y": 240,
        "wires": []
    },
    {
        "id": "47b2e84d5555d83e",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "Flow 2: Create new entry in algos table (ONCE)",
        "info": "",
        "x": 220,
        "y": 480,
        "wires": []
    },
    {
        "id": "bb1b770c2a3dbd1d",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "Stats: \"Sample: 10000 Spread: 0.379 Pct Spread: 2.312% Change: -0.289 Pct Change: -1.765\"",
        "info": "",
        "x": 390,
        "y": 20,
        "wires": []
    },
    {
        "id": "609d4e69842e63c7",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "Flow 3: Create trading flow (REPEATABLE). Trades if diff < -10 and position = 0",
        "info": "",
        "x": 320,
        "y": 580,
        "wires": []
    },
    {
        "id": "54498230406e3fd1",
        "type": "inject",
        "z": "ce626d5b45447f96",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "793df2fcb873d7cc"
            ]
        ]
    },
    {
        "id": "793df2fcb873d7cc",
        "type": "function-npm",
        "z": "ce626d5b45447f96",
        "name": "Get past 1000 trades",
        "func": "let symbol = 'TQQQ'\n\n// use polygon format for cryptos\n//let symbol = \"X:BTCUSD\"\n\n\n\nlet cnt = 1000 // set count here\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 120,
        "wires": [
            [
                "cc9e6063bdf48bfd"
            ]
        ]
    },
    {
        "id": "cc9e6063bdf48bfd",
        "type": "polygon-last-trade-v3",
        "z": "ce626d5b45447f96",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 580,
        "y": 120,
        "wires": [
            [
                "dfee37ab502f43b8"
            ]
        ]
    },
    {
        "id": "dfee37ab502f43b8",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 120,
        "wires": [
            [
                "ddbc2f0b294e07e2"
            ]
        ]
    },
    {
        "id": "82489c8c8d51d5b4",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\n//node.warn(\"Ticker: \" +symbol+ \" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 120,
        "wires": [
            [
                "315160c28b9bbdf7"
            ]
        ]
    },
    {
        "id": "315160c28b9bbdf7",
        "type": "function-npm",
        "z": "ce626d5b45447f96",
        "name": "Get last trade",
        "func": "let symbol = msg.symbol\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 180,
        "wires": [
            [
                "7d2243d5983acf0e"
            ]
        ]
    },
    {
        "id": "7d2243d5983acf0e",
        "type": "polygon-last-trade-v3",
        "z": "ce626d5b45447f96",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 180,
        "wires": [
            [
                "0a8aa3eb839b12fe"
            ]
        ]
    },
    {
        "id": "0a8aa3eb839b12fe",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "display diff",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price; // this is the price of the last trade\n\n}\n\n\nlet avg = msg.moving_avg\nlet ticker = msg.symbol\n\nlet diff = price - avg\ndiff = diff.toFixed(2)\n\n//node.warn(\"Ticker: \" + ticker + \" Current Price: \" + price + \" Avg Price: \" + avg + \" Diff: \" + diff)\nmsg.diff = diff\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 180,
        "wires": [
            [
                "7cd115966fe30e0e"
            ]
        ]
    },
    {
        "id": "7cd115966fe30e0e",
        "type": "change",
        "z": "ce626d5b45447f96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "diff",
                "pt": "flow",
                "to": "diff",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ddbc2f0b294e07e2",
        "type": "calculator",
        "z": "ce626d5b45447f96",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 1020,
        "y": 120,
        "wires": [
            [
                "82489c8c8d51d5b4"
            ]
        ]
    },
    {
        "id": "d85d248323cd7477",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "This flow calculates the difference between the current price and the moving average price. Modify line 1(4) to change the ticker. Line 8 to change the size of the data set.",
        "info": "",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "59a0edca36696b73",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//node.warn(\"Ticker: \" +ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 700,
        "wires": [
            [
                "3faa6ab453a8be62"
            ]
        ]
    },
    {
        "id": "3faa6ab453a8be62",
        "type": "split",
        "z": "ce626d5b45447f96",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 700,
        "wires": [
            [
                "9d1256466eb63470"
            ]
        ]
    },
    {
        "id": "949ee02c1d4dd7c9",
        "type": "inject",
        "z": "ce626d5b45447f96",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "*/1 10-15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "657040e8d160e0ad"
            ]
        ]
    },
    {
        "id": "9d1256466eb63470",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "split tickers",
        "func": "let ticker = msg.payload\n//node.warn(ticker) \nmsg.ticker = ticker\n//msg.pos = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 700,
        "wires": [
            [
                "08c08d8ba93b14a1"
            ]
        ]
    },
    {
        "id": "091f81b5fc8802f0",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.ticker\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet number = flow.get(\"number\")\nlet size = flow.get(\"psize\")\nlet diff = flow.get(\"diff\")\n\n\nlet qty = ((size / number) / price)\n\nqty = +qty\nqty = qty.toFixed(0)\n\nlet id1 = (\"Ticker: \" +ticker+ \" Diff: \" +diff+ \" Price: \" + price + \" Qty: \" + qty + \"  Algo Name: \" + algo_name)\n//node.warn(id1)\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\nlet action = ''\n\n\nlet temp = ''\n\nlet order_type = 'market' // select limit for limit orders\n\n\n\n//qty = qty.toFixed(0) // round to whole numbers for limit trades\n\nif ( diff < - 0.02){\n\nif (order_type == 'market'){\n\n    temp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"buy\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            //\"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n    }\n\n    if (order_type == 'limit') {\n\n        temp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"buy\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n    }\n\n\n\n}\n\nmsg.payload = temp\n//node.warn(msg.payload)\nlet temp1 = temp.toString();\nnode.warn(temp1)\nlet id2 = temp1\nmsg.query = \"insert into log_tqqq (id, id2) values ('\" +id1+ \"','\" +id2+ \"');\" \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 880,
        "wires": [
            [
                "0fc2a66d72386489",
                "607d59eee79451ac"
            ]
        ]
    },
    {
        "id": "2dc8cd5c960b57dc",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 760,
        "wires": [
            [
                "04ab84102f511e7b"
            ]
        ]
    },
    {
        "id": "7758612d1e668cec",
        "type": "polygon-last-trade-v3",
        "z": "ce626d5b45447f96",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 580,
        "y": 760,
        "wires": [
            [
                "2dc8cd5c960b57dc"
            ]
        ]
    },
    {
        "id": "08c08d8ba93b14a1",
        "type": "function-npm",
        "z": "ce626d5b45447f96",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.ticker\n\n//symbol = \"X:\" +symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 760,
        "wires": [
            [
                "7758612d1e668cec"
            ]
        ]
    },
    {
        "id": "607d59eee79451ac",
        "type": "alpaca-order",
        "z": "ce626d5b45447f96",
        "conf": "e535f42f1df1b25f",
        "x": 490,
        "y": 880,
        "wires": [
            [
                "641678c66ef4e0d5"
            ]
        ]
    },
    {
        "id": "418d3a63661baa1f",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "641678c66ef4e0d5",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 880,
        "wires": [
            [
                "418d3a63661baa1f"
            ]
        ]
    },
    {
        "id": "39b79cf6acc2fc36",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "flow.get tickers",
        "info": "",
        "x": 460,
        "y": 660,
        "wires": []
    },
    {
        "id": "04ab84102f511e7b",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "check portfolio",
        "func": "let symbol = msg.ticker\nlet sql = \"select count(*) from portfolio where symbol = '\" +symbol+ \"';\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 820,
        "wires": [
            [
                "1aed9a4b43aa952a"
            ]
        ]
    },
    {
        "id": "1aed9a4b43aa952a",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 820,
        "wires": [
            [
                "14fcb4485eb5b061"
            ]
        ]
    },
    {
        "id": "14fcb4485eb5b061",
        "type": "switch",
        "z": "ce626d5b45447f96",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 610,
        "y": 820,
        "wires": [
            [
                "091f81b5fc8802f0"
            ],
            [
                "091f81b5fc8802f0"
            ],
            []
        ]
    },
    {
        "id": "657040e8d160e0ad",
        "type": "delay",
        "z": "ce626d5b45447f96",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 700,
        "wires": [
            [
                "59a0edca36696b73"
            ]
        ]
    },
    {
        "id": "0fc2a66d72386489",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 460,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "020edead1e84c8a4",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "Flow 4: Place sell orders",
        "info": "",
        "x": 130,
        "y": 1220,
        "wires": []
    },
    {
        "id": "5dd41e84c4fd2079",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//ticker = 'AAPL'\nnode.warn(\"Ticker: \" + ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1300,
        "wires": [
            [
                "60233ce57b8bcf4b"
            ]
        ]
    },
    {
        "id": "60233ce57b8bcf4b",
        "type": "split",
        "z": "ce626d5b45447f96",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 1300,
        "wires": [
            [
                "c4c492bd3a2fc18d"
            ]
        ]
    },
    {
        "id": "9b60a6363795dd78",
        "type": "switch",
        "z": "ce626d5b45447f96",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1360,
        "wires": [
            [
                "ac9c051557f4f1eb"
            ],
            []
        ]
    },
    {
        "id": "bd8dc95dc259bc81",
        "type": "split",
        "z": "ce626d5b45447f96",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 1360,
        "wires": [
            [
                "9b60a6363795dd78"
            ]
        ]
    },
    {
        "id": "c4c492bd3a2fc18d",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "split tickers",
        "func": "let ticker = msg.payload\n//node.warn(ticker) \nmsg.ticker = ticker\n//msg.pos = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1300,
        "wires": [
            [
                "1bca3fe7b93901fb"
            ]
        ]
    },
    {
        "id": "935e18ba5e9c594c",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.ticker\nlet qty = msg.qty\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet side = msg.side\nlet profit = msg.profit\n\nlet id1 = (\"Ticker\" +ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Side: \" +side+ \" Profit: \" +profit)\nnode.warn(id1)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n\n\nlet order_type = 'market' // select limit for limit orders\n\nlet temp = ''\n\nif ( profit > 10){\n\n    if ( (qty > 0 && order_type == 'market')){\n\n    temp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"sell\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            //\"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n    }\n\n    if ((qty > 0 && order_type == 'limit')) {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n    }\n\n}\n\n\nmsg.payload = temp\n//node.warn(msg.payload)\nlet id2 = temp\nmsg.query = \"insert into log_tqqq (id, id2) values ('\" + id1 + \"','\" + id2 + \"');\" \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1420,
        "wires": [
            [
                "1f1957c7ea5e8845",
                "97f0b31ef14af01b"
            ]
        ]
    },
    {
        "id": "ac9c051557f4f1eb",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\nnode.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1360,
        "wires": [
            [
                "935e18ba5e9c594c"
            ]
        ]
    },
    {
        "id": "1bca3fe7b93901fb",
        "type": "alpaca-position-query",
        "z": "ce626d5b45447f96",
        "conf": "e535f42f1df1b25f",
        "x": 330,
        "y": 1360,
        "wires": [
            [
                "bd8dc95dc259bc81"
            ]
        ]
    },
    {
        "id": "97f0b31ef14af01b",
        "type": "alpaca-order",
        "z": "ce626d5b45447f96",
        "conf": "e535f42f1df1b25f",
        "x": 490,
        "y": 1420,
        "wires": [
            [
                "b4681a1ff832350a"
            ]
        ]
    },
    {
        "id": "ff99d16b486213b6",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "b4681a1ff832350a",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1420,
        "wires": [
            [
                "ff99d16b486213b6"
            ]
        ]
    },
    {
        "id": "46b28e3a9c0efcef",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "flow.get tickers",
        "info": "",
        "x": 400,
        "y": 1260,
        "wires": []
    },
    {
        "id": "18da757cbefcb7f8",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 1020,
        "wires": [
            [
                "f51c943dcd95cae1"
            ]
        ]
    },
    {
        "id": "f51c943dcd95cae1",
        "type": "debug",
        "z": "ce626d5b45447f96",
        "name": "debug 274",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1020,
        "wires": []
    },
    {
        "id": "72d408b23b1f3c22",
        "type": "http in",
        "z": "ce626d5b45447f96",
        "name": "/api/download_log_tqqq",
        "url": "/api/download_log_tqqq",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 1120,
        "wires": [
            [
                "a24245c0bf72b96f"
            ]
        ]
    },
    {
        "id": "e9e97de0619ba132",
        "type": "http response",
        "z": "ce626d5b45447f96",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1070,
        "y": 1120,
        "wires": []
    },
    {
        "id": "a50b5edc7971d992",
        "type": "csv",
        "z": "ce626d5b45447f96",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 790,
        "y": 1120,
        "wires": [
            [
                "72d555a53b7118a9"
            ]
        ]
    },
    {
        "id": "a24245c0bf72b96f",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "export query",
        "func": "msg.query= \"select * from log_tqqq\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1120,
        "wires": [
            [
                "391458649dfe0cfa"
            ]
        ]
    },
    {
        "id": "72d555a53b7118a9",
        "type": "file",
        "z": "ce626d5b45447f96",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 930,
        "y": 1120,
        "wires": [
            [
                "e9e97de0619ba132"
            ]
        ]
    },
    {
        "id": "391458649dfe0cfa",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 1120,
        "wires": [
            [
                "a50b5edc7971d992"
            ]
        ]
    },
    {
        "id": "73654ff8e56cc494",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "Create a log file that show all signals and trades",
        "info": "",
        "x": 360,
        "y": 980,
        "wires": []
    },
    {
        "id": "74a8f8c3b8e2391f",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "To download file, enter [domain]/api/download_action in browser.",
        "info": "",
        "x": 410,
        "y": 1080,
        "wires": []
    },
    {
        "id": "6bb3abc7d82b217e",
        "type": "inject",
        "z": "ce626d5b45447f96",
        "name": "CREATE tqqq table",
        "props": [
            {
                "p": "query",
                "v": "select * from log_tqqq",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "create table log_tqqq (id VARCHAR(5000), id2 VARCHAR(5000))",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 1020,
        "wires": [
            [
                "18da757cbefcb7f8"
            ]
        ]
    },
    {
        "id": "08e1df7d5d16459e",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "note the login in the switch node. Proceed only if the msg is empty (i.e. no position)",
        "info": "",
        "x": 1010,
        "y": 820,
        "wires": []
    },
    {
        "id": "1f1957c7ea5e8845",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "cb4e7d0f3968c0d8",
        "type": "inject",
        "z": "ce626d5b45447f96",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "*/1 10-14 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1260,
        "wires": [
            [
                "5e0b871bc1861af4"
            ]
        ]
    },
    {
        "id": "5e0b871bc1861af4",
        "type": "delay",
        "z": "ce626d5b45447f96",
        "name": "",
        "pauseType": "delay",
        "timeout": "55",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1300,
        "wires": [
            [
                "5dd41e84c4fd2079"
            ]
        ]
    },
    {
        "id": "6f59f2b7c80647d7",
        "type": "inject",
        "z": "ce626d5b45447f96",
        "name": "",
        "props": [
            {
                "p": "query",
                "v": "select * from positions where symbol = 'TQQQ'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 370,
        "y": 1180,
        "wires": [
            [
                "35c031ab720f1775"
            ]
        ]
    },
    {
        "id": "297203ed72fa3752",
        "type": "debug",
        "z": "ce626d5b45447f96",
        "name": "debug 279",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1180,
        "wires": []
    },
    {
        "id": "35c031ab720f1775",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 1180,
        "wires": [
            [
                "297203ed72fa3752"
            ]
        ]
    },
    {
        "id": "02bc41b00c4278d4",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "Flow 5: Place sell orderat Market Close",
        "info": "",
        "x": 190,
        "y": 1560,
        "wires": []
    },
    {
        "id": "517626d767b05044",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//ticker = 'AAPL'\nnode.warn(\"Ticker: \" + ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1660,
        "wires": [
            [
                "4b49e035e5dc505c"
            ]
        ]
    },
    {
        "id": "4b49e035e5dc505c",
        "type": "split",
        "z": "ce626d5b45447f96",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 1660,
        "wires": [
            [
                "1a6f4b1576264db5"
            ]
        ]
    },
    {
        "id": "a87f42ab016b8add",
        "type": "switch",
        "z": "ce626d5b45447f96",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 1720,
        "wires": [
            [
                "917b621ab1a366aa"
            ],
            []
        ]
    },
    {
        "id": "94081b433ebbfa49",
        "type": "split",
        "z": "ce626d5b45447f96",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 1720,
        "wires": [
            [
                "a87f42ab016b8add"
            ]
        ]
    },
    {
        "id": "1a6f4b1576264db5",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "split tickers",
        "func": "let ticker = msg.payload\n//node.warn(ticker) \nmsg.ticker = ticker\n//msg.pos = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1660,
        "wires": [
            [
                "0794b3c91308a0c1"
            ]
        ]
    },
    {
        "id": "338e515da1557af4",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.ticker\nlet qty = msg.qty\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet side = msg.side\nlet profit = msg.profit\n\nlet id1 = (\"Ticker\" +ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Side: \" +side+ \" Profit: \" +profit)\n//node.warn(id1)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n\n\nlet order_type = 'market' // select limit for limit orders\n\nlet temp = ''\n\n//if ( profit > 10){\n\n    if ( (qty > 0 && order_type == 'market')){\n\n    temp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"sell\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            //\"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n    }\n\n    if ((qty < 0 && order_type == 'market')) {\n\n    qty = (qty * -1)\n    \n    temp = {\n        \n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n        };\n    }\n\n    if ((qty > 0 && order_type == 'limit')) {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n    }\n\n//}\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\nlet id2 = temp\nmsg.query = \"insert into log_tqqq (id, id2) values ('\" + id1 + \"','\" + id2 + \"');\" \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1780,
        "wires": [
            [
                "748e4779b9a12395"
            ]
        ]
    },
    {
        "id": "917b621ab1a366aa",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\nnode.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1720,
        "wires": [
            [
                "338e515da1557af4"
            ]
        ]
    },
    {
        "id": "0794b3c91308a0c1",
        "type": "alpaca-position-query",
        "z": "ce626d5b45447f96",
        "conf": "e535f42f1df1b25f",
        "x": 370,
        "y": 1720,
        "wires": [
            [
                "94081b433ebbfa49"
            ]
        ]
    },
    {
        "id": "748e4779b9a12395",
        "type": "alpaca-order",
        "z": "ce626d5b45447f96",
        "conf": "e535f42f1df1b25f",
        "x": 490,
        "y": 1780,
        "wires": [
            [
                "681063cf317bf8ff"
            ]
        ]
    },
    {
        "id": "af9e22ad98d6fe6e",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "681063cf317bf8ff",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1780,
        "wires": [
            [
                "af9e22ad98d6fe6e"
            ]
        ]
    },
    {
        "id": "56096a32a68a67b5",
        "type": "comment",
        "z": "ce626d5b45447f96",
        "name": "flow.get tickers",
        "info": "",
        "x": 380,
        "y": 1600,
        "wires": []
    },
    {
        "id": "756ab1e5b9b9d8e0",
        "type": "inject",
        "z": "ce626d5b45447f96",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "55 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1600,
        "wires": [
            [
                "89419d2e609bbc10"
            ]
        ]
    },
    {
        "id": "89419d2e609bbc10",
        "type": "delay",
        "z": "ce626d5b45447f96",
        "name": "",
        "pauseType": "delay",
        "timeout": "55",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1660,
        "wires": [
            [
                "517626d767b05044"
            ]
        ]
    },
    {
        "id": "d5a5a6c8f0934864",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = 'pta15'\nlet asset_class = 'crypto' // stocks or crypto\nlet number = 20 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet algo_type = \"interday\"\nlet strategy_type = \"long\"\nlet status = 'running'\nlet benchmark = 'SPY'\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,algo_name,algo_type,strategy_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + algo_name + \"','\" + algo_type + \"','\" + strategy_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"');\"\nmsg.query = sql\nnode.warn(msg.query)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "d389eee01414c664",
                "ea2e0fa077e8fa9a"
            ]
        ]
    },
    {
        "id": "444fea7c15298661",
        "type": "inject",
        "z": "ce626d5b45447f96",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "d5a5a6c8f0934864"
            ]
        ]
    },
    {
        "id": "d389eee01414c664",
        "type": "change",
        "z": "ce626d5b45447f96",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "ea2e0fa077e8fa9a",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "b5ba66490546a3f7",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "fdc7c183b7305bf2"
            ]
        ]
    },
    {
        "id": "fdc7c183b7305bf2",
        "type": "split",
        "z": "ce626d5b45447f96",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 400,
        "wires": [
            [
                "fae2bb7291add46f"
            ]
        ]
    },
    {
        "id": "fae2bb7291add46f",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "insert into tickers",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers (id, symbol, portfolioname) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"');\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 400,
        "wires": [
            [
                "2b39152a83f35043"
            ]
        ]
    },
    {
        "id": "2b39152a83f35043",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5b966c475d7a455c",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers.symbol\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 440,
        "wires": [
            [
                "47ee5f257bf8d502"
            ]
        ]
    },
    {
        "id": "c1cd22870b46b786",
        "type": "delay",
        "z": "ce626d5b45447f96",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 440,
        "wires": [
            [
                "5b966c475d7a455c"
            ]
        ]
    },
    {
        "id": "47ee5f257bf8d502",
        "type": "postgresql",
        "z": "ce626d5b45447f96",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "f28a9b0ae33bf7b3",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "define values required for adding trade to portfolio",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = flow.get(\"id\")\nlet login = 'pta17'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 1 // number of tickers in portfolio\nlet target = 0.01 // target profit \nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'intraday'\nlet algo_status = 'long'\nlet benchmark = 'SPY'\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "c79e27c703b42233"
            ]
        ]
    },
    {
        "id": "c79e27c703b42233",
        "type": "change",
        "z": "ce626d5b45447f96",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "cd2186fa77d0d4ff",
        "type": "inject",
        "z": "ce626d5b45447f96",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "d098ee147aa2530a"
            ]
        ]
    },
    {
        "id": "d098ee147aa2530a",
        "type": "function",
        "z": "ce626d5b45447f96",
        "name": "set id,tickers, portfolioname",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nmsg.id = d\nlet tickers = 'TQQQ'\nmsg.tickers = tickers\nmsg.algo_name = 'Trade TQQQ Mean Reversion'\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "d956c83cdbd31d3c"
            ]
        ]
    },
    {
        "id": "d956c83cdbd31d3c",
        "type": "change",
        "z": "ce626d5b45447f96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "33192e39459dd961",
        "type": "inject",
        "z": "ce626d5b45447f96",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "f28a9b0ae33bf7b3"
            ]
        ]
    },
    {
        "id": "eb0492b4662841b0",
        "type": "inject",
        "z": "ce626d5b45447f96",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "b5ba66490546a3f7",
                "c1cd22870b46b786"
            ]
        ]
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]