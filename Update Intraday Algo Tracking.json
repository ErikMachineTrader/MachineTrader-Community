[
    {
        "id": "e3b3f7e9989e974a",
        "type": "tab",
        "label": "Update Intraday Algos",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0d782be53fbf365e",
        "type": "comment",
        "z": "e3b3f7e9989e974a",
        "name": "Get totals from orders ALLTIME",
        "info": "\n---\n\n",
        "x": 210,
        "y": 540,
        "wires": []
    },
    {
        "id": "fca967f51a258157",
        "type": "http in",
        "z": "e3b3f7e9989e974a",
        "name": "/api/download_orders_all",
        "url": "/api/download_orders_all",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1320,
        "wires": [
            [
                "68b1af0a4d8e6c39"
            ]
        ]
    },
    {
        "id": "f2f79b3f62f62608",
        "type": "http response",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 990,
        "y": 1320,
        "wires": []
    },
    {
        "id": "620f285ee665ee71",
        "type": "csv",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 1320,
        "wires": [
            [
                "1fe96fb59f097d1b"
            ]
        ]
    },
    {
        "id": "68b1af0a4d8e6c39",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "export query",
        "func": "//msg.query = \"select * from orders_all where symbol = 'SPY'\"\nmsg.query = \"select * from orders_all\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1320,
        "wires": [
            [
                "3df6f8f9692b5c57"
            ]
        ]
    },
    {
        "id": "1fe96fb59f097d1b",
        "type": "file",
        "z": "e3b3f7e9989e974a",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 1320,
        "wires": [
            [
                "f2f79b3f62f62608"
            ]
        ]
    },
    {
        "id": "3df6f8f9692b5c57",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 1320,
        "wires": [
            [
                "620f285ee665ee71"
            ]
        ]
    },
    {
        "id": "7e9fca77f79a56c9",
        "type": "inject",
        "z": "e3b3f7e9989e974a",
        "name": "Every min",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 620,
        "wires": [
            [
                "7b023ef4a8cf38db",
                "9435a5423bea0ccb",
                "5a80d0a011023bb1",
                "f2a3d2e4b643df53"
            ]
        ]
    },
    {
        "id": "05be693c0dfa62bb",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "get algo name",
        "func": "msg.query = \"select * from algos where  algo_type = 'intraday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 660,
        "wires": [
            [
                "89b6bc0566aaa605"
            ]
        ]
    },
    {
        "id": "89b6bc0566aaa605",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 660,
        "wires": [
            [
                "caf73b8c32ea374a"
            ]
        ]
    },
    {
        "id": "caf73b8c32ea374a",
        "type": "split",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 660,
        "wires": [
            [
                "c813cba6010369a6"
            ]
        ]
    },
    {
        "id": "9435a5423bea0ccb",
        "type": "delay",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 660,
        "wires": [
            [
                "05be693c0dfa62bb"
            ]
        ]
    },
    {
        "id": "c813cba6010369a6",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "get algo name",
        "func": "msg.name = msg.payload[\"algo_name\"]\nmsg.query = \"select * from tickers_paper where portfolioname = '\" +msg.name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 660,
        "wires": [
            [
                "47d3d5363e533497"
            ]
        ]
    },
    {
        "id": "47d3d5363e533497",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1120,
        "y": 660,
        "wires": [
            [
                "43c15f80c6bbe358"
            ]
        ]
    },
    {
        "id": "43c15f80c6bbe358",
        "type": "split",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 330,
        "y": 720,
        "wires": [
            [
                "df4f4c5795f5c9db"
            ]
        ]
    },
    {
        "id": "df4f4c5795f5c9db",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "get sum buys orders",
        "func": "let symbol = msg.payload[\"symbol\"]\n\n//let dt = new Date().toISOString().slice(0, 10);\nlet dt = '2023-01-11'\n//node.warn(dt);\nlet sql = \"select sum(filled_qty * filled_avg_price) from orders_all where symbol = '\" + symbol + \"' and side = 'buy' and created_at > '\" + dt + \"%';\"\n//node.warn(sql)\nmsg.query = sql\nmsg.symbol = symbol\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 720,
        "wires": [
            [
                "bebeba2a5775a63a"
            ]
        ]
    },
    {
        "id": "bebeba2a5775a63a",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 720,
        "wires": [
            [
                "6d698148b1a93bbc"
            ]
        ]
    },
    {
        "id": "677e40467f133747",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "insert buys",
        "func": "let symbol = msg.symbol\nlet name = msg.name\nlet buys = msg.payload[\"sum\"]\nlet current = 0\nlet sells = 0\nbuys = +buys\n\nif (buys > 0){\nlet sql = \"insert into intraday_buy_sell (account, algo_name, symbol, buys, sells, current) values \"\n    sql += \"('paper', '\" + name + \"', '\" + symbol + \"','\" + buys + \"','\" +sells+ \"','\" +current+ \"');\"\n//node.warn(sql)\nmsg.query = sql\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 720,
        "wires": [
            [
                "21eb6adbc8c918c7"
            ]
        ]
    },
    {
        "id": "6d698148b1a93bbc",
        "type": "split",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 720,
        "wires": [
            [
                "677e40467f133747"
            ]
        ]
    },
    {
        "id": "7b023ef4a8cf38db",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "truncate intraday_buy_sell",
        "func": "msg.query = \"truncate intraday_buy_sell\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 600,
        "wires": [
            [
                "c491cceb67aec184"
            ]
        ]
    },
    {
        "id": "c491cceb67aec184",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "21eb6adbc8c918c7",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1120,
        "y": 720,
        "wires": [
            [
                "ab9331067f668a06"
            ]
        ]
    },
    {
        "id": "ab9331067f668a06",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "get sum sells",
        "func": "let symbol = msg.symbol\nlet dt = '2023-01-11'\n//node.warn(dt);\nlet sql = \"select sum(filled_qty * filled_avg_price) from orders_all where symbol = '\" + symbol + \"' and side = 'sell' and created_at > '\" + dt + \"%';\"\n//node.warn(sql)\nmsg.query = sql\nmsg.symbol = symbol\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 780,
        "wires": [
            [
                "7bfdc9e12152550a"
            ]
        ]
    },
    {
        "id": "7bfdc9e12152550a",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 780,
        "wires": [
            [
                "dc515a47ecd0e887"
            ]
        ]
    },
    {
        "id": "1440a4fd53b9e62a",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "update sells",
        "func": "let symbol = msg.symbol\nlet name = msg.name\nlet strategy = msg.strategy_type\nlet sells = msg.payload[\"sum\"]\nsells = +sells\n\nif (sells > 0){\nlet sql = \"update intraday_buy_sell set sells = \" +sells+ \", type = '\" +strategy+ \"' where symbol = '\" +symbol+ \"';\"\n//node.warn(sql)\nmsg.query = sql\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 780,
        "wires": [
            [
                "54942fadefd31d2b"
            ]
        ]
    },
    {
        "id": "dc515a47ecd0e887",
        "type": "split",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 780,
        "wires": [
            [
                "1440a4fd53b9e62a"
            ]
        ]
    },
    {
        "id": "54942fadefd31d2b",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 780,
        "wires": [
            [
                "639569b2838f728a"
            ]
        ]
    },
    {
        "id": "639569b2838f728a",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "select from positions",
        "func": "let symbol = msg.symbol\nlet sql = \"select * from positions where symbol = '\" +symbol+ \"' and account = 'paper';\"\nmsg.query = sql\n//node.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 780,
        "wires": [
            [
                "94391530de598be4"
            ]
        ]
    },
    {
        "id": "94391530de598be4",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 840,
        "wires": [
            [
                "782892dbee1e52c8"
            ]
        ]
    },
    {
        "id": "65e9d4813ff06a13",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "update intraday_buy_sell",
        "func": "let current = 0\n\nlet symbol = msg.symbol\ncurrent = msg.payload[\"market_value\"]\n\nif (current == null) {\n    current = 0;\n}\n\n\nlet sql = \"update intraday_buy_sell set current = \" +current+ \" where symbol = '\" +symbol+ \"';\"\n//node.warn(sql)\nmsg.query = sql\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 840,
        "wires": [
            [
                "b9ad9b562a4cbeb0"
            ]
        ]
    },
    {
        "id": "782892dbee1e52c8",
        "type": "split",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 840,
        "wires": [
            [
                "65e9d4813ff06a13"
            ]
        ]
    },
    {
        "id": "16c304ba1e6b258f",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "update ",
        "func": "//let sql = \"update intraday_buy_sell set profit = buys - sells\"\n//let sql = \"select * from intraday_buy_sell where symbol = 'SPY'\"\n//let sql = \"select * from algos\"\n//let sql = \"select * from tickers_paper\"\n//let sql = \"update algos set strategy_type = 'short' where algo_name = 'Short Top Stocks'\"\n//let sql = \"select * from orders_all where symbol = 'SPY'\"\n//let sql = \"select * from orders_all\"\nlet sql = \"select * from intraday_buy_sell\"\nnode.warn(sql)\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1260,
        "wires": [
            [
                "782613bb354afcc8"
            ]
        ]
    },
    {
        "id": "3c963e6a6a658cce",
        "type": "inject",
        "z": "e3b3f7e9989e974a",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "16c304ba1e6b258f"
            ]
        ]
    },
    {
        "id": "782613bb354afcc8",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 460,
        "y": 1260,
        "wires": [
            [
                "57202b6c4930ceb6"
            ]
        ]
    },
    {
        "id": "57202b6c4930ceb6",
        "type": "debug",
        "z": "e3b3f7e9989e974a",
        "name": "debug 321",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1260,
        "wires": []
    },
    {
        "id": "552f39d37eb55de0",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "get algo name",
        "func": "msg.query = \"select * from algos where  algo_type = 'intraday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "a337af5507e52654"
            ]
        ]
    },
    {
        "id": "a337af5507e52654",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "4de156ed45e91b91"
            ]
        ]
    },
    {
        "id": "4de156ed45e91b91",
        "type": "split",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1040,
        "wires": [
            [
                "e873e1d2f2af1a5d"
            ]
        ]
    },
    {
        "id": "5a80d0a011023bb1",
        "type": "delay",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1040,
        "wires": [
            [
                "552f39d37eb55de0"
            ]
        ]
    },
    {
        "id": "e873e1d2f2af1a5d",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "get algo name",
        "func": "let name = msg.payload[\"algo_name\"]\nlet psize = msg.payload[\"algo_name\"]\nlet sql = \"select sum(profit) from intraday_buy_sell where algo_name = '\" + name + \"';\"\n//node.warn(sql)\nmsg.query = sql\nmsg.name = name\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1040,
        "wires": [
            [
                "bee24bbeaa8b8fa5"
            ]
        ]
    },
    {
        "id": "bee24bbeaa8b8fa5",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 1040,
        "wires": [
            [
                "e7bb89e09ceb878c"
            ]
        ]
    },
    {
        "id": "e7bb89e09ceb878c",
        "type": "split",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 310,
        "y": 1100,
        "wires": [
            [
                "2e7cda9ff02ae1eb"
            ]
        ]
    },
    {
        "id": "2e7cda9ff02ae1eb",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "update algos",
        "func": "let name = msg.name\nlet profit = msg.payload[\"sum\"]\n\nif (profit == null) {\n    profit = 0;\n}\n\nmsg.profit = profit\n\nlet sql = \"update algos set gain_today = \" + profit + \", gain_alltime = \" + profit + \"  where algo_name = '\" +name+ \"';\"\n//node.warn(sql)\nmsg.query = sql\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1100,
        "wires": [
            [
                "692fd2788ad7ec89"
            ]
        ]
    },
    {
        "id": "692fd2788ad7ec89",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 1100,
        "wires": [
            [
                "32ddd9f2fee3d061"
            ]
        ]
    },
    {
        "id": "32ddd9f2fee3d061",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "update algos table",
        "func": "let gain_alltime = msg.profit\nlet gain_today = msg.profit\nlet total_value = 20000\n//let total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday + \", pctgain_alltime = \" +pctgainalltime+ \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1100,
        "wires": [
            [
                "6fbfdeb5cf76f6e1"
            ]
        ]
    },
    {
        "id": "6fbfdeb5cf76f6e1",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "1e438fbc244b2906",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "update info_ratio",
        "func": "msg.query = \"update algos set info_ratio = (pctgain_alltime - pctbench_alltime);\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1160,
        "wires": [
            [
                "22abafe7ddbac47e"
            ]
        ]
    },
    {
        "id": "22abafe7ddbac47e",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "f2a3d2e4b643df53",
        "type": "delay",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 1160,
        "wires": [
            [
                "1e438fbc244b2906"
            ]
        ]
    },
    {
        "id": "b9ad9b562a4cbeb0",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 840,
        "wires": [
            [
                "602de46683407784"
            ]
        ]
    },
    {
        "id": "cdcff74025c6b864",
        "type": "comment",
        "z": "e3b3f7e9989e974a",
        "name": "Click to see notes.",
        "info": "This flow calculates the performance of Intraday stategies which are more complicated since there can be many trades over time.\nThis method uses \"orders_all\" table which should conain a record of all \"closed\" orders processed by Alpaca. \nBecause Alpaca only allows the downloading of the 500 most recent orders, it is necessary to download the orders daily.\nNote: if you are using more than 500 closed orders a day, you will need increase the frequency of downloads.\n\nThe method we use is to sum all of the \"buy\" and \"sell\" orders in the orders_old table for each ticker \nassociated with the strategy. Note that the orders_all table includes all orders ever completed. So summing the\nbuys and sells will include include all transactations for that ticker. Since you may want to exclude\nvery old transactions from the algo reporting, there is a date filter included in the sql query in function node\n\"get sum buys orders\". The query only includes orders made after the \"created_at\" date.\n\nWe will also need to record if there is a current position for that\nticker. The buy and sell orders are totalled, along with the current position (if any). \n\nTo store the values we need a new table: \"intraday_buy_sell\" which is created in one of the flows.\nValues are stored each time the flow runs, so it starts with a \"truncate\" request to get a fresh table.\nTotals buys, sells, and current positions are stored in this table.\nGains/loss are calculated and stored in the profit field.\n\nThe performance of the algo is determined by summing all of the profits for each ticker in the strategy.\n\nThe percent changes are calculated from the total of the market value for each ticker.\nThe gains or losses are compared with the performance of the benchmark over time.\n\nBecause is is sometimes useful to look at the entire orders table, we have included the api endpoint: \n[your instance].machinetrader.io/api/download_orders_old which downloads the entire orders table as a csv file.\n",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "7f81c6caaff29953",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "create orders_all table ",
        "func": "msg.query = \"create table IF NOT EXISTS orders_all (id VARCHAR(100)  PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\n//msg.query = \"DROP table orders_all\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 240,
        "wires": [
            [
                "921404d9760b0417"
            ]
        ]
    },
    {
        "id": "921404d9760b0417",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "9bbeae0ce596826a",
        "type": "comment",
        "z": "e3b3f7e9989e974a",
        "name": "Get All Orders Each Night (if more than 500 orders per day you will have to run more often)",
        "info": "",
        "x": 390,
        "y": 180,
        "wires": []
    },
    {
        "id": "ab5c6b29f6eeb391",
        "type": "split",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 320,
        "wires": [
            [
                "78c6ebcfe02402e9"
            ]
        ]
    },
    {
        "id": "12f6f67b95ef670d",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "b7decacaa0767c12",
        "type": "alpaca-query-order",
        "z": "e3b3f7e9989e974a",
        "conf": "e535f42f1df1b25f",
        "x": 680,
        "y": 320,
        "wires": [
            [
                "ab5c6b29f6eeb391"
            ]
        ]
    },
    {
        "id": "7501c5d124a343f7",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "get all 500 closed paper orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 320,
        "wires": [
            [
                "b7decacaa0767c12"
            ]
        ]
    },
    {
        "id": "78c6ebcfe02402e9",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "insert into orders_all",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nif ( status == 'filled'){\nmsg.query = \"insert into orders_all (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(msg.query)\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "12f6f67b95ef670d"
            ]
        ]
    },
    {
        "id": "514c590a8f08131a",
        "type": "inject",
        "z": "e3b3f7e9989e974a",
        "name": "1 AM Daily",
        "props": [],
        "repeat": "",
        "crontab": "00 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "7501c5d124a343f7"
            ]
        ]
    },
    {
        "id": "80f3227f93b728e4",
        "type": "split",
        "z": "e3b3f7e9989e974a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 420,
        "wires": [
            [
                "2b7be19d7d6f377d"
            ]
        ]
    },
    {
        "id": "4943f836dd5077eb",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "0329c17957c20633",
        "type": "alpaca-query-order",
        "z": "e3b3f7e9989e974a",
        "conf": "0c86a5f06a42b505",
        "x": 680,
        "y": 420,
        "wires": [
            [
                "80f3227f93b728e4"
            ]
        ]
    },
    {
        "id": "44be8b907f54bca9",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "get all 500 closed live orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 420,
        "wires": [
            [
                "0329c17957c20633"
            ]
        ]
    },
    {
        "id": "2b7be19d7d6f377d",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "insert into orders_all",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders_all (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 420,
        "wires": [
            [
                "4943f836dd5077eb"
            ]
        ]
    },
    {
        "id": "71ed998ea4ddd612",
        "type": "comment",
        "z": "e3b3f7e9989e974a",
        "name": "do not use if live and paper account are the same",
        "info": "",
        "x": 460,
        "y": 380,
        "wires": []
    },
    {
        "id": "a2de64e41401a35f",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "create intraday_buy_sell table",
        "func": "let sql = \"create table IF NOT EXISTS intraday_buy_sell (account VARCHAR(10), algo_name VARCHAR(100), symbol VARCHAR(10), type VARCHAR(10), buys FLOAT, sells FLOAT, current FLOAT, profit FLOAT)\"\nnode.warn(sql)\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "acea9acc4527ab50"
            ]
        ]
    },
    {
        "id": "4a8eab2ccb6c2fa6",
        "type": "inject",
        "z": "e3b3f7e9989e974a",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 540,
        "wires": [
            [
                "a2de64e41401a35f"
            ]
        ]
    },
    {
        "id": "acea9acc4527ab50",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "4c23551749ac6fb5",
        "type": "inject",
        "z": "e3b3f7e9989e974a",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "7f81c6caaff29953"
            ]
        ]
    },
    {
        "id": "17f34ad385ee29f6",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "correct for table error on SPY",
        "func": "let sql = \"update intraday_buy_sell set profit = (profit + 40000) where symbol = 'SPY'\"\nmsg.query = sql\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 920,
        "wires": [
            [
                "887f53d8aebfbc8a"
            ]
        ]
    },
    {
        "id": "887f53d8aebfbc8a",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "b4b1ec7095239bc4",
        "type": "comment",
        "z": "e3b3f7e9989e974a",
        "name": "filled orders only",
        "info": "",
        "x": 980,
        "y": 280,
        "wires": []
    },
    {
        "id": "602de46683407784",
        "type": "function",
        "z": "e3b3f7e9989e974a",
        "name": "calculate profit ",
        "func": "let sql = \"update intraday_buy_sell set profit = ( sells - (buys - current));\"\nnode.warn(sql)\nmsg.query = sql\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 920,
        "wires": [
            [
                "c18c191b6c9f7267"
            ]
        ]
    },
    {
        "id": "c18c191b6c9f7267",
        "type": "postgresql",
        "z": "e3b3f7e9989e974a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 920,
        "wires": [
            [
                "17f34ad385ee29f6"
            ]
        ]
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKA7ZL2KR9705ERT2BCO",
        "paper": true
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PKA7ZL2KR9705ERT2BCO",
        "paper": true
    }
]