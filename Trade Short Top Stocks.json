[
    {
        "id": "2b9b3ba81fae8004",
        "type": "tab",
        "label": "Short Top Stocks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "434dd4864e6dbacb",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet login = 'pta15'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 10 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'intraday'\nlet strategy_type = \"short\"\nlet benchmark = 'SPY'\n\nnode.warn(ticker)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 160,
        "wires": [
            [
                "e25a6111f3d60e40"
            ]
        ]
    },
    {
        "id": "e25a6111f3d60e40",
        "type": "change",
        "z": "2b9b3ba81fae8004",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "587e4a564bfed5f3",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "Flow 2: Create new entry in algos table (FIRST TIME ONLY)",
        "info": "",
        "x": 270,
        "y": 360,
        "wires": []
    },
    {
        "id": "4053ebe5a204de09",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "Flow 3: Buy tickers prior to Market Close",
        "info": "",
        "x": 200,
        "y": 500,
        "wires": []
    },
    {
        "id": "3607abb29ae727d8",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'limit',\n    \"client_order_id\": client_order_id,\n    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 680,
        "wires": [
            [
                "12d65db5abe95cfe"
            ]
        ]
    },
    {
        "id": "2c436acf5c41991e",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 560,
        "wires": [
            [
                "621ec0b1909cc3be"
            ]
        ]
    },
    {
        "id": "621ec0b1909cc3be",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 560,
        "wires": [
            [
                "f32aec30780a45e6"
            ]
        ]
    },
    {
        "id": "9be15f9fccb856da",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 560,
        "wires": [
            [
                "61f2c6cb86ca696e"
            ]
        ]
    },
    {
        "id": "c0064dfb269a45c0",
        "type": "function-npm",
        "z": "2b9b3ba81fae8004",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 620,
        "wires": [
            [
                "bfed477919a5a13f"
            ]
        ]
    },
    {
        "id": "f32aec30780a45e6",
        "type": "delay",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 560,
        "wires": [
            [
                "9be15f9fccb856da"
            ]
        ]
    },
    {
        "id": "bff73d03b96a350c",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 620,
        "wires": [
            [
                "c0064dfb269a45c0"
            ]
        ]
    },
    {
        "id": "61f2c6cb86ca696e",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 560,
        "wires": [
            [
                "98dd61d1baebdcca"
            ]
        ]
    },
    {
        "id": "98dd61d1baebdcca",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 620,
        "wires": [
            [
                "bff73d03b96a350c"
            ]
        ]
    },
    {
        "id": "fa34a0362094f807",
        "type": "inject",
        "z": "2b9b3ba81fae8004",
        "name": "3:55",
        "props": [
            {
                "p": "topic",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "55 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "2c436acf5c41991e"
            ]
        ]
    },
    {
        "id": "fbebc6d6798a7082",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 620,
        "wires": [
            [
                "3607abb29ae727d8"
            ]
        ]
    },
    {
        "id": "bfed477919a5a13f",
        "type": "polygon-last-trade-v3",
        "z": "2b9b3ba81fae8004",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 940,
        "y": 620,
        "wires": [
            [
                "fbebc6d6798a7082"
            ]
        ]
    },
    {
        "id": "12d65db5abe95cfe",
        "type": "alpaca-order",
        "z": "2b9b3ba81fae8004",
        "conf": "73034b634d168d76",
        "x": 510,
        "y": 680,
        "wires": [
            [
                "91de178507c67bd0"
            ]
        ]
    },
    {
        "id": "fdf1b07a6f6bd98a",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "91de178507c67bd0",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\nnode.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 680,
        "wires": [
            [
                "fdf1b07a6f6bd98a"
            ]
        ]
    },
    {
        "id": "fc7ae0d77b874735",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "Flow 1: Define Strategy and Set Trading Values",
        "info": "",
        "x": 200,
        "y": 40,
        "wires": []
    },
    {
        "id": "beb695b4f6e2c8b5",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "9e956320ae344e24"
            ]
        ]
    },
    {
        "id": "9e956320ae344e24",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "19012644f0c3cc1e"
            ]
        ]
    },
    {
        "id": "19012644f0c3cc1e",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "insert into tickers_paper",
        "func": "let id = flow.get(\"id\")\n//id = 1676569973066\n\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nlet type = flow.get(\"algo_type\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers_paper (id, symbol, portfolioname, algo_type) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"','\" +type+ \"');\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            [
                "7088c64ee0d1ce8b"
            ]
        ]
    },
    {
        "id": "7088c64ee0d1ce8b",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "01419b2fe0b179ad",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers_paper set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_paper.symbol\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 260,
        "wires": [
            [
                "f9dcfd10356301b8"
            ]
        ]
    },
    {
        "id": "8e76007687385706",
        "type": "delay",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 260,
        "wires": [
            [
                "01419b2fe0b179ad"
            ]
        ]
    },
    {
        "id": "f9dcfd10356301b8",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8ba606cb7bcf3bc9",
        "type": "mysql",
        "z": "2b9b3ba81fae8004",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 290,
        "y": 80,
        "wires": [
            [
                "5d84bf2744c61220"
            ]
        ]
    },
    {
        "id": "5d84bf2744c61220",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "get fresh list of tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.symbol;\n    tickers += ticker+ \", \"\n}\n\n// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nd = 1676569973066\nmsg.id = d\n\nmsg.tickers = tickers\nmsg.algo_name = 'Short Top Stocks'\nnode.warn(tickers)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 80,
        "wires": [
            [
                "9935586a947441b3"
            ]
        ]
    },
    {
        "id": "9935586a947441b3",
        "type": "change",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 80,
        "wires": [
            [
                "e4bb3a044b63db82"
            ]
        ]
    },
    {
        "id": "e4bb3a044b63db82",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "Display flow vars",
        "func": "let id = flow.get(\"id\")\nlet name = flow.get(\"algo_name\")\nnode.warn(\"ID: \" +id+ \" Name: \" +name)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "74748a7124bace2e",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "Flow 4: Place market sell  orders at open",
        "info": "",
        "x": 220,
        "y": 880,
        "wires": []
    },
    {
        "id": "7183273b0b8663c8",
        "type": "inject",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "props": [
            {
                "p": "query1",
                "v": "select * from positions where market_value < 0",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "select * from positions where portfolioname = 'Short Top Stocks' and account = 'paper' order by symbol",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 1520,
        "wires": [
            [
                "aa82759d55cf5018"
            ]
        ]
    },
    {
        "id": "aa82759d55cf5018",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 1520,
        "wires": [
            [
                "bb7fe10d84f876f0"
            ]
        ]
    },
    {
        "id": "bb7fe10d84f876f0",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 1520,
        "wires": [
            [
                "b1490842e9bf22b4"
            ]
        ]
    },
    {
        "id": "8c9c3c49d8e87d18",
        "type": "switch",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 1520,
        "wires": [
            [
                "c740b3043685f3aa"
            ],
            []
        ]
    },
    {
        "id": "c3c3f9f8e1925eda",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 1520,
        "wires": [
            [
                "8c9c3c49d8e87d18"
            ]
        ]
    },
    {
        "id": "b1490842e9bf22b4",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "split tickers",
        "func": "let ticker = msg.payload[\"symbol\"]\nticker = ticker.replace(\" \",\"\")\n//node.warn(ticker) \nmsg.ticker = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1520,
        "wires": [
            [
                "ccde7e0f55c634ee"
            ]
        ]
    },
    {
        "id": "47462ba33a5a09de",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "create Alpaca sell order ",
        "func": "let ticker = msg.ticker\nlet qty = msg.qty\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet side = msg.side\nlet profit = msg.profit\n\nlet id1 = (\"Ticker\" +ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Side: \" +side+ \" Profit: \" +profit)\n//node.warn(id1)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// this is a short strategy so reverse polarity of qty\nqty = (qty * -1)\n\nlet order_type = 'market' // select limit for limit orders\n\nlet temp = ''\n\n   \ntemp = {\n        \n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"buy\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n        };\n\n \n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1580,
        "wires": [
            [
                "306cb4403c98cd60"
            ]
        ]
    },
    {
        "id": "c740b3043685f3aa",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\n//node.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1580,
        "wires": [
            [
                "47462ba33a5a09de"
            ]
        ]
    },
    {
        "id": "ccde7e0f55c634ee",
        "type": "alpaca-position-query",
        "z": "2b9b3ba81fae8004",
        "conf": "73034b634d168d76",
        "x": 850,
        "y": 1520,
        "wires": [
            [
                "c3c3f9f8e1925eda"
            ]
        ]
    },
    {
        "id": "306cb4403c98cd60",
        "type": "alpaca-order",
        "z": "2b9b3ba81fae8004",
        "conf": "73034b634d168d76",
        "x": 750,
        "y": 1580,
        "wires": [
            [
                "0f3317418269c97d"
            ]
        ]
    },
    {
        "id": "e26f33f0ebb93d71",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "0f3317418269c97d",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1580,
        "wires": [
            [
                "e26f33f0ebb93d71"
            ]
        ]
    },
    {
        "id": "9bd2a389986aaf59",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "cover all stocks with negative market value",
        "info": "",
        "x": 260,
        "y": 1480,
        "wires": []
    },
    {
        "id": "daeb8d5f3f7b47fa",
        "type": "inject",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "props": [
            {
                "p": "query1",
                "v": "select * from positions where market_value < 0",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "select * from positions where portfolioname = 'Short Top Stocks'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 1700,
        "wires": [
            [
                "4cae38f77aa9e404"
            ]
        ]
    },
    {
        "id": "4cae38f77aa9e404",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 1700,
        "wires": [
            [
                "c21750802d26266e"
            ]
        ]
    },
    {
        "id": "c21750802d26266e",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 1700,
        "wires": [
            [
                "dbeb0f36d6c5385f"
            ]
        ]
    },
    {
        "id": "e738898942370332",
        "type": "switch",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 1700,
        "wires": [
            [
                "fe0fb5f9a90e1f27"
            ],
            []
        ]
    },
    {
        "id": "abe64ffa5ba75cd4",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 1700,
        "wires": [
            [
                "e738898942370332"
            ]
        ]
    },
    {
        "id": "dbeb0f36d6c5385f",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "split tickers",
        "func": "let ticker = msg.payload[\"symbol\"]\nticker = ticker.replace(\" \",\"\")\n//node.warn(ticker) \nmsg.ticker = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1700,
        "wires": [
            [
                "421e85ec0413f69b"
            ]
        ]
    },
    {
        "id": "a278d1cb6a2c6179",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "create Alpaca sell order ",
        "func": "let ticker = msg.ticker\nlet qty = msg.qty\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet side = msg.side\nlet profit = msg.profit\n\nlet id1 = (\"Ticker\" +ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Side: \" +side+ \" Profit: \" +profit)\n//node.warn(id1)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// this is a short strategy so reverse polarity of qty\n//qty = (qty * -1)\n\nside = \"sell\"\n\nlet order_type = 'market' // select limit for limit orders\n\nlet temp = ''\n\n   \ntemp = {\n        \n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n        };\n\n \n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1760,
        "wires": [
            [
                "74021b7c79a12708"
            ]
        ]
    },
    {
        "id": "fe0fb5f9a90e1f27",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\n//node.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1760,
        "wires": [
            [
                "a278d1cb6a2c6179"
            ]
        ]
    },
    {
        "id": "421e85ec0413f69b",
        "type": "alpaca-position-query",
        "z": "2b9b3ba81fae8004",
        "conf": "73034b634d168d76",
        "x": 850,
        "y": 1700,
        "wires": [
            [
                "abe64ffa5ba75cd4"
            ]
        ]
    },
    {
        "id": "74021b7c79a12708",
        "type": "alpaca-order",
        "z": "2b9b3ba81fae8004",
        "conf": "73034b634d168d76",
        "x": 750,
        "y": 1760,
        "wires": [
            [
                "dbdcd95f814cf479"
            ]
        ]
    },
    {
        "id": "fd9a71621f042c76",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "dbdcd95f814cf479",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1760,
        "wires": [
            [
                "fd9a71621f042c76"
            ]
        ]
    },
    {
        "id": "98e8269644ca00b3",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "cover all stocks with positive values",
        "info": "",
        "x": 240,
        "y": 1660,
        "wires": []
    },
    {
        "id": "d5f084764e891008",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "add values to algos table",
        "func": "let id = flow.get(\"id\")\nid = 1676569973066\n\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = flow.get(\"login\")\nlet asset_class = flow.get(\"asset_class\")\nlet number = flow.get(\"number\")\nlet target = flow.get(\"target\")\nlet account = flow.get(\"account\")\nlet psize = flow.get(\"psize\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet benchmark = flow.get(\"benchmark\")\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"');\"\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 420,
        "wires": [
            [
                "3bd0feb060da4727"
            ]
        ]
    },
    {
        "id": "4056a4424b57b11e",
        "type": "inject",
        "z": "2b9b3ba81fae8004",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "d5f084764e891008"
            ]
        ]
    },
    {
        "id": "3bd0feb060da4727",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 500,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "ab2004e6ddc8fbe2",
        "type": "inject",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "props": [
            {
                "p": "query",
                "v": "select * from positions where market_value < 0",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from positions where portfolioname = 'Short Top Stocks'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1860,
        "wires": [
            [
                "75ceb5ddb2af0f24"
            ]
        ]
    },
    {
        "id": "75ceb5ddb2af0f24",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 320,
        "y": 1860,
        "wires": [
            [
                "ba3d1780f4fb5b3e"
            ]
        ]
    },
    {
        "id": "ba3d1780f4fb5b3e",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 450,
        "y": 1860,
        "wires": [
            [
                "0246aa9b65454817"
            ]
        ]
    },
    {
        "id": "0246aa9b65454817",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "delete tickers",
        "func": "let ticker = msg.payload[\"symbol\"]\nlet name = flow.get(\"algo_name\")\nmsg.query = \"delete from tickers_paper where symbol = '\" +ticker+ \"';\"\nnode.warn(msg.query) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1860,
        "wires": [
            [
                "8f36369c940004fb"
            ]
        ]
    },
    {
        "id": "8f36369c940004fb",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 760,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "228c377936ac2922",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "Hard code line 10 (algo id) after it runs the first time so that it doesn't create a new id.",
        "info": "",
        "x": 740,
        "y": 40,
        "wires": []
    },
    {
        "id": "6248ea94cf2e1379",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 940,
        "wires": [
            [
                "10e6cf4c69bb178f"
            ]
        ]
    },
    {
        "id": "8aebe0871a9e9ab2",
        "type": "alpaca-position-query",
        "z": "2b9b3ba81fae8004",
        "conf": "73034b634d168d76",
        "x": 410,
        "y": 940,
        "wires": [
            [
                "6248ea94cf2e1379"
            ]
        ]
    },
    {
        "id": "10e6cf4c69bb178f",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "Get positions where qty < 0",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nqty = +qty\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\nlet ticker = msg.payload[\"symbol\"]\n\n\nif ( qty < 0){\n//node.warn(\"Symbol: \" +ticker+ \" Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\nmsg.ticker = ticker\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 940,
        "wires": [
            [
                "22d43f63fe9b739f"
            ]
        ]
    },
    {
        "id": "22d43f63fe9b739f",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "create market buy order ",
        "func": "let ticker = msg.ticker\nlet qty = msg.qty\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet side = msg.side\nlet profit = msg.profit\n\nlet id1 = (\"Ticker\" +ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Side: \" +side+ \" Profit: \" +profit)\n//node.warn(id1)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// this is a short strategy so reverse polarity of qty\nqty = (qty * -1)\n\nlet order_type = 'market' // select limit for limit orders\n\nlet temp = ''\n\n   \ntemp = {\n        \n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"buy\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n        };\n\n \n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 940,
        "wires": [
            [
                "ec4d1564bce238fe"
            ]
        ]
    },
    {
        "id": "7b7bf4b9a5db56ba",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "Flow 4: Place buy limit orders at 4 AM ",
        "info": "",
        "x": 230,
        "y": 1980,
        "wires": []
    },
    {
        "id": "8e746d6fd9ee348c",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//ticker = 'AAPL'\n//node.warn(\"Ticker: \" + ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2100,
        "wires": [
            [
                "ad9c0199a120721a"
            ]
        ]
    },
    {
        "id": "ad9c0199a120721a",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 2100,
        "wires": [
            [
                "6829ec7eefc35e30"
            ]
        ]
    },
    {
        "id": "dc2e4be6e452d1c3",
        "type": "switch",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 2160,
        "wires": [
            [
                "6c2a4aa13b0f664a"
            ],
            []
        ]
    },
    {
        "id": "4a3ce3090c395c3c",
        "type": "split",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 2160,
        "wires": [
            [
                "dc2e4be6e452d1c3"
            ]
        ]
    },
    {
        "id": "6829ec7eefc35e30",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "split tickers",
        "func": "let ticker = msg.payload\nticker = ticker.replace(\" \",\"\")\n//node.warn(ticker) \nmsg.ticker = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2100,
        "wires": [
            [
                "fbcad13d76b6c2cb"
            ]
        ]
    },
    {
        "id": "6e65788f7bcaf224",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.ticker\nlet qty = msg.qty\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet side = msg.side\nlet profit = msg.profit\n\nlet id1 = (\"Ticker\" +ticker+ \" Qty: \" +qty+ \" Price: \" +price+ \" Side: \" +side+ \" Profit: \" +profit)\nnode.warn(id1)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// this is a short strategy so reverse polarity of qty\nqty = (qty * -1)\n\nlet order_type = 'limit' // select limit for limit orders\n\nlet temp = ''\n\n//if ( profit > 10){\n\n    if ( (qty > 0 && order_type == 'limit')){\n\n    temp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"buy\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n    }\n\n    if ((qty < 0 && order_type == 'market')) {\n\n    qty = (qty * -1)\n    \n    temp = {\n        \n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"buy\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n        };\n    }\n\n    if ((qty > 0 && order_type == 'limit')) {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n    }\n\n//}\n\n\nmsg.payload = temp\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2220,
        "wires": [
            [
                "084d0d133bfc241f"
            ]
        ]
    },
    {
        "id": "6c2a4aa13b0f664a",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\n//node.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 2160,
        "wires": [
            [
                "6e65788f7bcaf224"
            ]
        ]
    },
    {
        "id": "fbcad13d76b6c2cb",
        "type": "alpaca-position-query",
        "z": "2b9b3ba81fae8004",
        "conf": "73034b634d168d76",
        "x": 410,
        "y": 2160,
        "wires": [
            [
                "4a3ce3090c395c3c"
            ]
        ]
    },
    {
        "id": "084d0d133bfc241f",
        "type": "alpaca-order",
        "z": "2b9b3ba81fae8004",
        "conf": "73034b634d168d76",
        "x": 530,
        "y": 2220,
        "wires": [
            [
                "38a90e774c5e1428"
            ]
        ]
    },
    {
        "id": "24c7a3417706aeb0",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "38a90e774c5e1428",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2220,
        "wires": [
            [
                "24c7a3417706aeb0"
            ]
        ]
    },
    {
        "id": "573507384ffd1693",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "flow.get tickers",
        "info": "",
        "x": 480,
        "y": 2060,
        "wires": []
    },
    {
        "id": "5e29767ca1925a90",
        "type": "inject",
        "z": "2b9b3ba81fae8004",
        "name": "4 AM",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 2040,
        "wires": [
            [
                "5882c7d6e317dc0b"
            ]
        ]
    },
    {
        "id": "5882c7d6e317dc0b",
        "type": "delay",
        "z": "2b9b3ba81fae8004",
        "name": "",
        "pauseType": "delay",
        "timeout": "55",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 2100,
        "wires": [
            [
                "8e746d6fd9ee348c"
            ]
        ]
    },
    {
        "id": "9c24e417867a6496",
        "type": "inject",
        "z": "2b9b3ba81fae8004",
        "name": "9:30 am",
        "props": [
            {
                "p": "topic",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "30 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 940,
        "wires": [
            [
                "8aebe0871a9e9ab2"
            ]
        ]
    },
    {
        "id": "ec4d1564bce238fe",
        "type": "alpaca-order",
        "z": "2b9b3ba81fae8004",
        "conf": "73034b634d168d76",
        "x": 390,
        "y": 1000,
        "wires": [
            [
                "4b27f05b26500e99"
            ]
        ]
    },
    {
        "id": "ca73b6c056d9d799",
        "type": "postgresql",
        "z": "2b9b3ba81fae8004",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 820,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "4b27f05b26500e99",
        "type": "function",
        "z": "2b9b3ba81fae8004",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1000,
        "wires": [
            [
                "ca73b6c056d9d799"
            ]
        ]
    },
    {
        "id": "ac1b73a39ca68f0b",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "Copyright©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 1470,
        "y": 40,
        "wires": []
    },
    {
        "id": "6f159dabf0fec1f2",
        "type": "inject",
        "z": "2b9b3ba81fae8004",
        "name": "3:42 PM",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "42 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "434dd4864e6dbacb"
            ]
        ]
    },
    {
        "id": "67be695a22d51324",
        "type": "inject",
        "z": "2b9b3ba81fae8004",
        "name": "3:45 pm",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select symbol,price_change_pct from topstocks order by  price_change_pct desc limit 30;",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "beb695b4f6e2c8b5"
            ]
        ]
    },
    {
        "id": "241f835224579915",
        "type": "inject",
        "z": "2b9b3ba81fae8004",
        "name": "3:40 pm",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "40 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select symbol,price_change_pct from topstocks order by  price_change_pct desc limit 30;",
        "x": 160,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "a8c269835f7e8373",
        "type": "comment",
        "z": "2b9b3ba81fae8004",
        "name": "PAPER",
        "info": "",
        "x": 1130,
        "y": 40,
        "wires": []
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "73034b634d168d76",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKLC7VFEM4UNMBQ4OTD8",
        "paper": true
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    }
]