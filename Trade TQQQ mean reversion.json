[
    {
        "id": "ee75a86a3ac66c4a",
        "type": "tab",
        "label": "Trade TQQQ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "51776e0c61a7f9a6",
        "type": "inject",
        "z": "ee75a86a3ac66c4a",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "5d1dc07f7a6ed601"
            ]
        ]
    },
    {
        "id": "5d1dc07f7a6ed601",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "set tickers",
        "func": "let tickers = 'TQQQ'\nmsg.tickers = tickers\nmsg.portfolioname = 'Trade TQQQ'\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 360,
        "wires": [
            [
                "4b2c189fd463d5c6"
            ]
        ]
    },
    {
        "id": "5cf552374487539c",
        "type": "comment",
        "z": "ee75a86a3ac66c4a",
        "name": "Flow 1: Define Strategy and Set Trading Values (ONCE). Set profit target in define values (line 10).",
        "info": "",
        "x": 370,
        "y": 240,
        "wires": []
    },
    {
        "id": "dfb393a8bc517175",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "define values required for adding trade to portfolio",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet login = 'pta17'\nlet ticker = 'TQQQ'\nlet algo_name = 'Trade TQQQ'\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 1 // number of tickers in portfolio\nlet target = 15 // target profit. This is equal to the std dev for the profit per trade \nlet diff = flow.get(\"diff\")\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'intraday'\nlet benchmark = 'SPY'\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.diff = diff\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            [
                "ad287a76a1495f55"
            ]
        ]
    },
    {
        "id": "526983b149cd5184",
        "type": "inject",
        "z": "ee75a86a3ac66c4a",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "dfb393a8bc517175"
            ]
        ]
    },
    {
        "id": "ad287a76a1495f55",
        "type": "change",
        "z": "ee75a86a3ac66c4a",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "10aea503e388c8a7",
        "type": "comment",
        "z": "ee75a86a3ac66c4a",
        "name": "Flow 2: Create new entry in algos table (ONCE)",
        "info": "",
        "x": 220,
        "y": 440,
        "wires": []
    },
    {
        "id": "68a7b9df3fce1217",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "add values to algos table",
        "func": "let login = flow.get(\"login\")\nlet id = flow.get(\"id\")\nlet algo_name = flow.get(\"algo_name\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet portfolio_size = flow.get(\"psize\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_start = global.get(\"spy_current\")\n\nmsg.query = \"insert into algos (login,id,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values ('\" + login + \"','\" +id+ \"','\" +algo_name+ \"','\" +algo_type+ \"','\" +status+ \"','\" +portfolio_size+ \"','\" +benchmark+ \"','\" +benchmark_start+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 480,
        "wires": [
            [
                "831d84d9dfa3c81b"
            ]
        ]
    },
    {
        "id": "831d84d9dfa3c81b",
        "type": "postgresql",
        "z": "ee75a86a3ac66c4a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "7684d4bd6a3e2741",
        "type": "inject",
        "z": "ee75a86a3ac66c4a",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 480,
        "wires": [
            [
                "68a7b9df3fce1217"
            ]
        ]
    },
    {
        "id": "6360fae535fe0e18",
        "type": "inject",
        "z": "ee75a86a3ac66c4a",
        "name": "Display Algos",
        "props": [
            {
                "p": "query",
                "v": "select * from algos",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "delete from algos where id = 1671644577762",
                "vt": "str"
            },
            {
                "p": "query2",
                "v": "update algos set login = 'pta19'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update algos set gain_today = -158.7135149876422767159823658, gain_alltime = -158.71351498764227674, pctgain_today = 0, pctgain_alltime = 0 where algo_name = 'Buy and Sell BTCUSD on Profit Target';",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from order_confirms",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update order_confirms set subtag = 'Buy/Short SPY on News' where symbol = 'SPY'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update order_confirms set subtag = 'Trade BTCUSD'  where symbol = 'BTC/USD'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 850,
        "y": 480,
        "wires": [
            [
                "eec1d7e5b931afa0"
            ]
        ]
    },
    {
        "id": "eec1d7e5b931afa0",
        "type": "postgresql",
        "z": "ee75a86a3ac66c4a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 480,
        "wires": [
            [
                "723b563bd4e58ba7"
            ]
        ]
    },
    {
        "id": "723b563bd4e58ba7",
        "type": "debug",
        "z": "ee75a86a3ac66c4a",
        "name": "debug 214",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 480,
        "wires": []
    },
    {
        "id": "05ca11e059729e10",
        "type": "comment",
        "z": "ee75a86a3ac66c4a",
        "name": "Stats: \"Sample: 10000 Spread: 0.379 Pct Spread: 2.312% Change: -0.289 Pct Change: -1.765\"",
        "info": "",
        "x": 390,
        "y": 20,
        "wires": []
    },
    {
        "id": "4b2c189fd463d5c6",
        "type": "change",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 360,
        "wires": [
            [
                "5f1858807bf8140b",
                "e5174be6b40af954"
            ]
        ]
    },
    {
        "id": "5f1858807bf8140b",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "get tickers ",
        "func": "let ticker = msg.tickers\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 360,
        "wires": [
            [
                "f02e53b56dd21bb5"
            ]
        ]
    },
    {
        "id": "f02e53b56dd21bb5",
        "type": "split",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 360,
        "wires": [
            [
                "8ece81154535a024"
            ]
        ]
    },
    {
        "id": "8ece81154535a024",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "insert into tickers",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers (id, symbol, portfolioname) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"');\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 360,
        "wires": [
            [
                "6f68848293515d16"
            ]
        ]
    },
    {
        "id": "6f68848293515d16",
        "type": "postgresql",
        "z": "ee75a86a3ac66c4a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "34e0b7e1971ad5fd",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers.symbol\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 400,
        "wires": [
            [
                "c8f8511027a8ee70"
            ]
        ]
    },
    {
        "id": "e5174be6b40af954",
        "type": "delay",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 400,
        "wires": [
            [
                "34e0b7e1971ad5fd"
            ]
        ]
    },
    {
        "id": "c8f8511027a8ee70",
        "type": "postgresql",
        "z": "ee75a86a3ac66c4a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "9ab0026a451e3224",
        "type": "comment",
        "z": "ee75a86a3ac66c4a",
        "name": "Flow 3: Create trading flow (REPEATABLE). Trades if diff < -10 and position = 0",
        "info": "",
        "x": 320,
        "y": 580,
        "wires": []
    },
    {
        "id": "928d68a0f4de2b08",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.alpaca_symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\nlet status = msg.status\nlet diff = flow.get(\"diff\")\nlet target = flow.get(\"target\")\n\n\n//node.warn(\"Alpaca Symbol: \" +ticker+ \" Price: \" +price)\n\nlet qty = ((psize / number) / price)\n\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\n\nlet subtag = algo_name\nlet temp = ''\n\n\n// logic for buy order\nif ( (diff < -.01) && (status == 0)){\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'buy',\n    \"type\": 'limit',\n    \"client_order_id\": client_order_id,\n    \"limit_price\": price,  \n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n}\n\n// logic for sell order\nlet profit = 0\nprofit = msg.profit\n\nif ( (status == 1) && (profit > target) ){\n\nqty = msg.qty\n\n\n        // create a order for Alpaca\n        let temp = ''\n        temp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": 'sell',\n            \"type\": 'market',\n            \"client_order_id\": client_order_id,\n            //  limit_price\": price,  // limit orders only\n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\n\n\n// display values required for trading\n//node.warn(\"Ticker: \" + ticker + \" Diff: \" +diff+ \" Status: \" + status + \" Qty: \" + qty + \" Orderid: \" + client_order_id + \" Algo Name: \" + subtag)\nlet action = (\"Ticker: \" + ticker + \" Diff: \" + diff + \" Profit: \" +profit+ \" Target: \" +target+ \" Status: \" + status + \" Qty: \" + qty + \" Orderid: \" + client_order_id + \" Algo Name: \" + subtag)\nmsg.query = \"insert into log_tqqq (id, id2) values ('\" + action + \"','\" +temp+ \"');\"\n//node.warn(msg.query)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1000,
        "wires": [
            [
                "62982e05d34f69f0",
                "ae78c0b80dea12a7"
            ]
        ]
    },
    {
        "id": "62982e05d34f69f0",
        "type": "alpaca-order",
        "z": "ee75a86a3ac66c4a",
        "conf": "e535f42f1df1b25f",
        "x": 570,
        "y": 1000,
        "wires": [
            [
                "b74f387b88a8c762"
            ]
        ]
    },
    {
        "id": "89c7587e82fcd3cf",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"ticker\")\n//node.warn(ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 740,
        "wires": [
            [
                "890dfa0ea3ec182b"
            ]
        ]
    },
    {
        "id": "890dfa0ea3ec182b",
        "type": "split",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 740,
        "wires": [
            [
                "2a03e2cbee32a973"
            ]
        ]
    },
    {
        "id": "56eb8fdf7c35f5c0",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "get alt symbols",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 740,
        "wires": [
            [
                "cf7e45cd40d5c115"
            ]
        ]
    },
    {
        "id": "2a03e2cbee32a973",
        "type": "delay",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 690,
        "y": 740,
        "wires": [
            [
                "56eb8fdf7c35f5c0"
            ]
        ]
    },
    {
        "id": "0026b00249cbbae5",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 800,
        "wires": [
            [
                "7d5d282ca6210528"
            ]
        ]
    },
    {
        "id": "cf7e45cd40d5c115",
        "type": "postgresql",
        "z": "ee75a86a3ac66c4a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 740,
        "wires": [
            [
                "854d6fe15a87df95"
            ]
        ]
    },
    {
        "id": "854d6fe15a87df95",
        "type": "split",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 330,
        "y": 800,
        "wires": [
            [
                "0026b00249cbbae5"
            ]
        ]
    },
    {
        "id": "d4d5a5df775292e6",
        "type": "inject",
        "z": "ee75a86a3ac66c4a",
        "name": "Every Min",
        "props": [],
        "repeat": "",
        "crontab": "*/1 4-19 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "dc65fe5ded4bbd59",
                "83862b0edbc476f5"
            ]
        ]
    },
    {
        "id": "dbe3ebe8f7779eb9",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(10)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 920,
        "wires": [
            [
                "928d68a0f4de2b08"
            ]
        ]
    },
    {
        "id": "f527c6a165daa457",
        "type": "polygon-last-trade-v3",
        "z": "ee75a86a3ac66c4a",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 940,
        "y": 920,
        "wires": [
            [
                "dbe3ebe8f7779eb9"
            ]
        ]
    },
    {
        "id": "b64ff786e7c376a0",
        "type": "postgresql",
        "z": "ee75a86a3ac66c4a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "b74f387b88a8c762",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "b64ff786e7c376a0"
            ]
        ]
    },
    {
        "id": "7d5d282ca6210528",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "check positions table ",
        "func": "let ticker = msg.symbol\nmsg.query = \"select * from positions where symbol = '\" +ticker+ \"';\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 800,
        "wires": [
            [
                "9ac8abffb56d76fa"
            ]
        ]
    },
    {
        "id": "9ac8abffb56d76fa",
        "type": "postgresql",
        "z": "ee75a86a3ac66c4a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 800,
        "wires": [
            [
                "40491aadf34155c7"
            ]
        ]
    },
    {
        "id": "dc65fe5ded4bbd59",
        "type": "delay",
        "z": "ee75a86a3ac66c4a",
        "name": "Wait 5 secs for position table to update",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 680,
        "wires": [
            [
                "89c7587e82fcd3cf"
            ]
        ]
    },
    {
        "id": "676a8e1bdf862526",
        "type": "function-npm",
        "z": "ee75a86a3ac66c4a",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 920,
        "wires": [
            [
                "f527c6a165daa457"
            ]
        ]
    },
    {
        "id": "40491aadf34155c7",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "check curent position",
        "func": "let arr = msg.payload\nlet len = arr.length\nlet status = len // shows if payload is empty\n//node.warn(\"Status: \" +status)\n\nif ( status == 0){\n    //node.warn(\"position is 0\")\n    msg.status = 0\n} \n\nelse {\n    //node.warn(\"go to next flow\")\n    msg.status = 1\n }\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 800,
        "wires": [
            [
                "68b24ce57a8e118a"
            ]
        ]
    },
    {
        "id": "68b24ce57a8e118a",
        "type": "switch",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 860,
        "wires": [
            [
                "546cb8adc82de709"
            ],
            [
                "676a8e1bdf862526"
            ]
        ]
    },
    {
        "id": "ae9a536c826177dc",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "Get values from positions",
        "func": "let qty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\n\n//node.warn(\"Qty: \" +qty+ \" Profit: \" +profit)\nmsg.qty = qty\nmsg.profit = profit\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 860,
        "wires": [
            [
                "676a8e1bdf862526"
            ]
        ]
    },
    {
        "id": "546cb8adc82de709",
        "type": "split",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 860,
        "wires": [
            [
                "ae9a536c826177dc"
            ]
        ]
    },
    {
        "id": "ae78c0b80dea12a7",
        "type": "postgresql",
        "z": "ee75a86a3ac66c4a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 1120,
        "wires": [
            [
                "69614e8e95fa0b70"
            ]
        ]
    },
    {
        "id": "69614e8e95fa0b70",
        "type": "debug",
        "z": "ee75a86a3ac66c4a",
        "name": "debug 274",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1120,
        "wires": []
    },
    {
        "id": "6e1ed34dea7ef77e",
        "type": "http in",
        "z": "ee75a86a3ac66c4a",
        "name": "/api/download_log_tqqq",
        "url": "/api/download_log_tqqq",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 1220,
        "wires": [
            [
                "ac88c7d0d6f95560"
            ]
        ]
    },
    {
        "id": "b1bbcf81a4da82b0",
        "type": "http response",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1030,
        "y": 1220,
        "wires": []
    },
    {
        "id": "db43229c9be891a5",
        "type": "csv",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 750,
        "y": 1220,
        "wires": [
            [
                "92ad231c456d610d"
            ]
        ]
    },
    {
        "id": "ac88c7d0d6f95560",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "export query",
        "func": "msg.query= \"select * from action\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1220,
        "wires": [
            [
                "dcdd506c3382c597"
            ]
        ]
    },
    {
        "id": "92ad231c456d610d",
        "type": "file",
        "z": "ee75a86a3ac66c4a",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 890,
        "y": 1220,
        "wires": [
            [
                "b1bbcf81a4da82b0"
            ]
        ]
    },
    {
        "id": "dcdd506c3382c597",
        "type": "postgresql",
        "z": "ee75a86a3ac66c4a",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1220,
        "wires": [
            [
                "db43229c9be891a5"
            ]
        ]
    },
    {
        "id": "4bfe4f6948512b98",
        "type": "comment",
        "z": "ee75a86a3ac66c4a",
        "name": "Create a log file that show all signals and trades",
        "info": "",
        "x": 320,
        "y": 1080,
        "wires": []
    },
    {
        "id": "34a201cc53dbab09",
        "type": "comment",
        "z": "ee75a86a3ac66c4a",
        "name": "To download file, enter [domain]/api/download_action in browser.",
        "info": "",
        "x": 370,
        "y": 1180,
        "wires": []
    },
    {
        "id": "a2b1a593a1325492",
        "type": "comment",
        "z": "ee75a86a3ac66c4a",
        "name": "This node contains the trading logic. ",
        "info": "",
        "x": 340,
        "y": 960,
        "wires": []
    },
    {
        "id": "83862b0edbc476f5",
        "type": "alpaca-orders-close",
        "z": "ee75a86a3ac66c4a",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 390,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "3936a8cf69e575fd",
        "type": "inject",
        "z": "ee75a86a3ac66c4a",
        "name": "CREATE tqqq table",
        "props": [
            {
                "p": "query",
                "v": "select * from log_tqqq",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "create table log_tqqq (id VARCHAR(5000), id2 VARCHAR(5000))",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 1120,
        "wires": [
            [
                "ae78c0b80dea12a7"
            ]
        ]
    },
    {
        "id": "97749e75e1bf0324",
        "type": "inject",
        "z": "ee75a86a3ac66c4a",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "aa355718559789af"
            ]
        ]
    },
    {
        "id": "aa355718559789af",
        "type": "function-npm",
        "z": "ee75a86a3ac66c4a",
        "name": "Get past 1000 trades",
        "func": "//let symbol = 'TQQQ'\n\n// use polygon format for cryptos\nlet symbol = \"X:BTCUSD\"\n\n\n\nlet cnt = 1000 // set count here\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 120,
        "wires": [
            [
                "7e04dc0b198a5fdd"
            ]
        ]
    },
    {
        "id": "7e04dc0b198a5fdd",
        "type": "polygon-last-trade-v3",
        "z": "ee75a86a3ac66c4a",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 580,
        "y": 120,
        "wires": [
            [
                "7ef7448c5e69c3de"
            ]
        ]
    },
    {
        "id": "7ef7448c5e69c3de",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 120,
        "wires": [
            [
                "3f183be51b7857cc"
            ]
        ]
    },
    {
        "id": "bf110943f489f68f",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\n//node.warn(\"Ticker: \" +symbol+ \" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 120,
        "wires": [
            [
                "db440644e05ad57a"
            ]
        ]
    },
    {
        "id": "db440644e05ad57a",
        "type": "function-npm",
        "z": "ee75a86a3ac66c4a",
        "name": "Get last trade",
        "func": "let symbol = msg.symbol\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 180,
        "wires": [
            [
                "4ce5dc5d6495ecfd"
            ]
        ]
    },
    {
        "id": "4ce5dc5d6495ecfd",
        "type": "polygon-last-trade-v3",
        "z": "ee75a86a3ac66c4a",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 180,
        "wires": [
            [
                "de2f1aedab48b695"
            ]
        ]
    },
    {
        "id": "de2f1aedab48b695",
        "type": "function",
        "z": "ee75a86a3ac66c4a",
        "name": "display diff",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price; // this is the price of the last trade\n\n}\n\n\nlet avg = msg.moving_avg\nlet ticker = msg.symbol\n\nlet diff = price - avg\ndiff = diff.toFixed(2)\n\n//node.warn(\"Ticker: \" + ticker + \" Current Price: \" + price + \" Avg Price: \" + avg + \" Diff: \" + diff)\nmsg.diff = diff\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 180,
        "wires": [
            [
                "41163396be4118e1"
            ]
        ]
    },
    {
        "id": "41163396be4118e1",
        "type": "change",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "diff",
                "pt": "flow",
                "to": "diff",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3f183be51b7857cc",
        "type": "calculator",
        "z": "ee75a86a3ac66c4a",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 1020,
        "y": 120,
        "wires": [
            [
                "bf110943f489f68f"
            ]
        ]
    },
    {
        "id": "ce686f65a1609b6e",
        "type": "comment",
        "z": "ee75a86a3ac66c4a",
        "name": "This flow calculates the difference between the current price and the moving average price. Modify line 1(4) to change the ticker. Line 8 to change the size of the data set.",
        "info": "",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]