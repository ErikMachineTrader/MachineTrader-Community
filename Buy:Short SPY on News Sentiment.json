[
    {
        "id": "b580784427b72247",
        "type": "tab",
        "label": "Buy/Short SPY on News Senetiment Daily",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "474ca476fc14161b",
        "type": "comment",
        "z": "b580784427b72247",
        "name": "The name of this strategy is \"Buy/Short SPY on News\"",
        "info": "",
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "221f686d0bc81b38",
        "type": "comment",
        "z": "b580784427b72247",
        "name": "This calculates current moving average of the news (last 100 items) and determins the sentiment score relative to the average sentiiment of all headlines (.1935)",
        "info": "",
        "x": 610,
        "y": 80,
        "wires": []
    },
    {
        "id": "1b1d04e0beb63031",
        "type": "function",
        "z": "b580784427b72247",
        "name": "create array for average",
        "func": "// this function reuses old variable names from time seeries arrays.  You can rename if you like.\n\nconst prices = [];\nlet item = 0\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload) {\n    price = item.sent;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "0f93608794c629c0"
            ]
        ]
    },
    {
        "id": "ad662632e02e0328",
        "type": "function",
        "z": "b580784427b72247",
        "name": "display avg",
        "func": "let avg = msg.moving_avg\navg = avg.toFixed(3)\nnode.warn(\" Moving Avg: \" +avg)\nmsg.moving_avg = avg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 140,
        "wires": [
            [
                "a4e9dc2816c6a481"
            ]
        ]
    },
    {
        "id": "1f074697290a2104",
        "type": "mysql",
        "z": "b580784427b72247",
        "mydb": "f8ca5a41.3e1448",
        "name": "news",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "1b1d04e0beb63031"
            ]
        ]
    },
    {
        "id": "8ff8dda4e22a898a",
        "type": "inject",
        "z": "b580784427b72247",
        "name": "select sent from  headlines ",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 03 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select sent from headlines where sent is not null order by time_pub desc limit 1000;",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "1f074697290a2104"
            ]
        ]
    },
    {
        "id": "a4e9dc2816c6a481",
        "type": "function",
        "z": "b580784427b72247",
        "name": "relative sentiment",
        "func": "let avg = msg.moving_avg\n//node.warn(\"Moving Avg: \" +avg)\nlet alltime = 0.19\nlet rel = avg - alltime\nrel = rel.toFixed(3)\nnode.warn(rel)\n\nif (rel > 0 && rel < .10){\n//    node.warn(\"positive\")\n}\n\nelse if (rel > .10){\n//  node.warn(\"strongly positive\")\n}\n\nelse if  (rel < 0) {\n//    node.warn(\"negative\")\n\n}\n\nmsg.sentiment = rel\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 140,
        "wires": [
            [
                "8e36ac18a1ceafb4"
            ]
        ]
    },
    {
        "id": "0f93608794c629c0",
        "type": "calculator",
        "z": "b580784427b72247",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 780,
        "y": 140,
        "wires": [
            [
                "ad662632e02e0328"
            ]
        ]
    },
    {
        "id": "8e36ac18a1ceafb4",
        "type": "change",
        "z": "b580784427b72247",
        "name": "sentiment",
        "rules": [
            {
                "t": "set",
                "p": "sentiment",
                "pt": "flow",
                "to": "sentiment",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5e0575395e1ffb3e",
        "type": "comment",
        "z": "b580784427b72247",
        "name": "Flow 4: Sell once profit target reached",
        "info": "",
        "x": 190,
        "y": 1720,
        "wires": []
    },
    {
        "id": "a1c982b12dcb9478",
        "type": "function",
        "z": "b580784427b72247",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.ticker\nlet qty = msg.qty\nlet price = msg.price\nlet profit = msg.profit\nlet profitpct = msg.profitpct\nlet target = flow.get(\"target\")\nlet algo_name = flow.get(\"algo_name\")\nlet subtag = algo_name\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = \"Cover-\" +ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nif ( profitpct > target) {\n\n// create a order for Alpaca\n\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1960,
        "wires": [
            [
                "b5e64ce8c6260ccb"
            ]
        ]
    },
    {
        "id": "b5e64ce8c6260ccb",
        "type": "alpaca-order",
        "z": "b580784427b72247",
        "conf": "e535f42f1df1b25f",
        "x": 530,
        "y": 1960,
        "wires": [
            [
                "c25e026cc579992d"
            ]
        ]
    },
    {
        "id": "31e6259059b427ab",
        "type": "postgresql",
        "z": "b580784427b72247",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "c25e026cc579992d",
        "type": "function",
        "z": "b580784427b72247",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1960,
        "wires": [
            [
                "31e6259059b427ab"
            ]
        ]
    },
    {
        "id": "a2016c20d00da424",
        "type": "function-npm",
        "z": "b580784427b72247",
        "name": "Get price of trade trade",
        "func": "let symbol = flow.get(\"polygon_symbol\")\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 1440,
        "wires": [
            [
                "44830a6c8373cfd0"
            ]
        ]
    },
    {
        "id": "0271287105d9252c",
        "type": "function",
        "z": "b580784427b72247",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1440,
        "wires": [
            [
                "eb8b119397769b5c"
            ]
        ]
    },
    {
        "id": "44830a6c8373cfd0",
        "type": "polygon-last-trade-v3",
        "z": "b580784427b72247",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 620,
        "y": 1440,
        "wires": [
            [
                "0271287105d9252c"
            ]
        ]
    },
    {
        "id": "cb68d708c7bf9ca0",
        "type": "comment",
        "z": "b580784427b72247",
        "name": "Flow 4: Place a Market Order at Market Open",
        "info": "",
        "x": 230,
        "y": 1240,
        "wires": []
    },
    {
        "id": "eb8b119397769b5c",
        "type": "function",
        "z": "b580784427b72247",
        "name": "create Alpaca order ",
        "func": "let ticker = flow.get(\"alpaca_symbol\")\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // when using limit orders, no fracrtionals\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\n\n\nlet subtag = algo_name\nlet side = ''\nlet sentiment = flow.get(\"sentiment\")\n\nif ( sentiment < 0 ){ side = 'sell'}\nif (sentiment > 0) { side = 'buy' }\n\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": side,\n    \"type\": 'market',\n //   \"limit_price\": price,\n    \"client_order_id\": client_order_id,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\nmsg.ticker = ticker\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1500,
        "wires": [
            [
                "b5617264ced21849",
                "d70581c30545f56d"
            ]
        ]
    },
    {
        "id": "b5617264ced21849",
        "type": "alpaca-order",
        "z": "b580784427b72247",
        "conf": "e535f42f1df1b25f",
        "x": 570,
        "y": 1500,
        "wires": [
            [
                "8572ee905d77d145"
            ]
        ]
    },
    {
        "id": "8572ee905d77d145",
        "type": "function",
        "z": "b580784427b72247",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1500,
        "wires": [
            [
                "f1649e360178e1b6"
            ]
        ]
    },
    {
        "id": "f1649e360178e1b6",
        "type": "postgresql",
        "z": "b580784427b72247",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "7de5371750520a63",
        "type": "split",
        "z": "b580784427b72247",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 990,
        "y": 1560,
        "wires": [
            [
                "1f66bc045c151375"
            ]
        ]
    },
    {
        "id": "ed29b844e51b5dfe",
        "type": "alpaca-query-order",
        "z": "b580784427b72247",
        "conf": "e535f42f1df1b25f",
        "x": 820,
        "y": 1560,
        "wires": [
            [
                "7de5371750520a63"
            ]
        ]
    },
    {
        "id": "87e51a1a76d9e7e9",
        "type": "function",
        "z": "b580784427b72247",
        "name": "get last closed order paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"10\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1560,
        "wires": [
            [
                "ed29b844e51b5dfe"
            ]
        ]
    },
    {
        "id": "1f66bc045c151375",
        "type": "function",
        "z": "b580784427b72247",
        "name": "update orders confirms",
        "func": "let ticker = flow.get(\"ticker\")\n\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet source = msg.payload[\"source\"]\nlet subtag = flow.get(\"algo_name\")\n\n\nmsg.query = \"update order_confirms set filled_at = '\" + filled_at + \"', filled_qty = '\" + filled_qty + \"', filled_avg_price = '\" + filled_avg_price + \"', limit_price = '\" + limit_price + \"', status = '\" + status + \"', subtag = '\" + subtag+ \"', source = '\" + source + \"', extended_hours = '\" + extended_hours+ \"' where id = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1620,
        "wires": [
            [
                "2c271d0ab8df2605"
            ]
        ]
    },
    {
        "id": "2c271d0ab8df2605",
        "type": "postgresql",
        "z": "b580784427b72247",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "d70581c30545f56d",
        "type": "delay",
        "z": "b580784427b72247",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1560,
        "wires": [
            [
                "87e51a1a76d9e7e9"
            ]
        ]
    },
    {
        "id": "f3562ed5b673d2b0",
        "type": "comment",
        "z": "b580784427b72247",
        "name": "Confirm that the order was not filled and the position of SPY = 0",
        "info": "",
        "x": 450,
        "y": 1320,
        "wires": []
    },
    {
        "id": "aa56d2215fdbf793",
        "type": "inject",
        "z": "b580784427b72247",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "32 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1360,
        "wires": [
            [
                "2bac3eada45ebacf"
            ]
        ]
    },
    {
        "id": "2bac3eada45ebacf",
        "type": "alpaca-position-query",
        "z": "b580784427b72247",
        "conf": "e535f42f1df1b25f",
        "x": 370,
        "y": 1360,
        "wires": [
            [
                "2dd3ec33b6aee1c3"
            ]
        ]
    },
    {
        "id": "2dd3ec33b6aee1c3",
        "type": "function",
        "z": "b580784427b72247",
        "name": "get values from alpaca positions ",
        "func": "let item = 0\nlet symbol = ''\nlet ticker = flow.get(\"ticker\")\nmsg.ticker = ticker\nlet symbols  = [];\n\nfor (item of msg.payload) {\n    symbol = item.symbol;\n    symbols.push(symbol);\n}\n\n//node.warn(symbols)\n\nlet result = symbols.includes(ticker);\nnode.warn(result)\n\nif ( result == true){ node.warn(\"this is true\")\n//    return msg;\n}\n\n\nif (result == false) { node.warn(\"this is false\") \nreturn msg;}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1360,
        "wires": [
            [
                "4d290e9491c39e30"
            ]
        ]
    },
    {
        "id": "4d290e9491c39e30",
        "type": "function",
        "z": "b580784427b72247",
        "name": "continue if not held",
        "func": "let symbol = msg.ticker\nnode.warn(\"Symbol: \" +symbol+ \" not held currently\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1360,
        "wires": [
            [
                "a2016c20d00da424"
            ]
        ]
    },
    {
        "id": "80e7320b75a44f8b",
        "type": "comment",
        "z": "b580784427b72247",
        "name": "Confirm that the position of SPY <>  0 before making covering order",
        "info": "",
        "x": 500,
        "y": 1780,
        "wires": []
    },
    {
        "id": "084bf2fe13b8d581",
        "type": "inject",
        "z": "b580784427b72247",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1820,
        "wires": [
            [
                "fba79e8b29b0a13e"
            ]
        ]
    },
    {
        "id": "fba79e8b29b0a13e",
        "type": "alpaca-position-query",
        "z": "b580784427b72247",
        "conf": "e535f42f1df1b25f",
        "x": 370,
        "y": 1820,
        "wires": [
            [
                "76e49c890ff6a862"
            ]
        ]
    },
    {
        "id": "76e49c890ff6a862",
        "type": "function",
        "z": "b580784427b72247",
        "name": "get values from alpaca positions ",
        "func": "let item = 0\nlet ticker = flow.get(\"ticker\")\nlet symbol = ''\n\nmsg.ticker = ticker\nlet symbols  = [];\n\n\nfor (item of msg.payload) {\n    symbol = item.symbol;\n    symbols.push(symbol);\n}\n\n//node.warn(symbols)\n\nlet result = symbols.includes(ticker);\nnode.warn(result)\n\nif ( result == true){ node.warn(\"this is true\")\n    return msg;\n}\n\n\nif (result == false) { node.warn(\"this is false\") \n//return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1820,
        "wires": [
            [
                "b9215830027de4ac"
            ]
        ]
    },
    {
        "id": "b9215830027de4ac",
        "type": "function",
        "z": "b580784427b72247",
        "name": "continue if not false",
        "func": "let symbol = msg.ticker\nnode.warn(\"Symbol: \" +symbol+ \" position <> 0\")\n return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1820,
        "wires": [
            [
                "706363d4c7fba580"
            ]
        ]
    },
    {
        "id": "706363d4c7fba580",
        "type": "alpaca-position-query",
        "z": "b580784427b72247",
        "conf": "e535f42f1df1b25f",
        "x": 370,
        "y": 1880,
        "wires": [
            [
                "3ec74fed29150b6c"
            ]
        ]
    },
    {
        "id": "3ec74fed29150b6c",
        "type": "split",
        "z": "b580784427b72247",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 1880,
        "wires": [
            [
                "1903209e03418cd8"
            ]
        ]
    },
    {
        "id": "1903209e03418cd8",
        "type": "function",
        "z": "b580784427b72247",
        "name": "insert into portfolios from order_confirms",
        "func": "let symbol = msg.ticker\nlet algo_name = msg.subtag\n\n\nlet asset_id = msg.payload[\"asset_id\"]\nlet ticker = msg.payload[\"symbol\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n\nqty = parseFloat(qty)\ncurrent_price = parseFloat(current_price)\nlet market = (qty * current_price)\n\nlet profittoday = parseFloat(unrealized_intraday_pl)\nprofittoday = profittoday.toFixed(2)\n\nlet profit = parseFloat(unrealized_pl) \nprofit = profit.toFixed(2)\n\n\nlet profittodaypct = (profittoday / market) * 100 \n\nlet profitpct = (profit / market) * 100 \n\n//node.warn(\"Symbol: \" +symbol+ \" Ticker: \" +ticker)\n\nlet result = ticker.includes(symbol);\n\n\nif ( result == true ){\n    msg.qty = qty\n    msg.price = current_price\n    msg.ticker = symbol\n    msg.profit = unrealized_pl\n    msg.profitpct = unrealized_plpc\n\n    node.warn(\"Symbol: \" +msg.ticker+ \" Price: \" +msg.price+ \" Qty: \" +msg.qty)\n    return msg;\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1880,
        "wires": [
            [
                "a1c982b12dcb9478"
            ]
        ]
    },
    {
        "id": "31b70f9b0f3a874d",
        "type": "inject",
        "z": "b580784427b72247",
        "name": "3:01 AM",
        "props": [],
        "repeat": "",
        "crontab": "01 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 380,
        "wires": [
            [
                "458ee55d534dd9b0",
                "433b29eb1818ebe9"
            ]
        ]
    },
    {
        "id": "bdd139fc0af4b73c",
        "type": "comment",
        "z": "b580784427b72247",
        "name": "Flow 1: Define Strategy and Set Trading Values (ONCE)",
        "info": "",
        "x": 240,
        "y": 240,
        "wires": []
    },
    {
        "id": "132679da75e28b98",
        "type": "comment",
        "z": "b580784427b72247",
        "name": "Flow 2: Create new entry in algos table (ONCE)",
        "info": "",
        "x": 240,
        "y": 520,
        "wires": []
    },
    {
        "id": "3971f01d393bde2c",
        "type": "comment",
        "z": "b580784427b72247",
        "name": "Flow 3: Create trading flow (ONCE)",
        "info": "",
        "x": 200,
        "y": 680,
        "wires": []
    },
    {
        "id": "5200eea1e6d3a5e2",
        "type": "function",
        "z": "b580784427b72247",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\nprice = Number(price) // change string to number\nprice = price.toFixed(2)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\nlet sentiment = flow.get(\"sentiment\")\nlet side = ''\nlet limit_price = 0\n\n\nif ( sentiment > 0){\n     side == 'buy'\n    limit_price = (price + 0)\n}\n\n\nif ( sentiment < 0){ \n    side = 'sell'\n    limit_price = (price + 0)\n    \n    }\n\n\n\n\nlimit_price = Number(limit_price) // change string to number\nlimit_price = limit_price.toFixed(2)\n\nnode.warn(\"Price: \" + price + \" Limit Price:\" + limit_price)\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": side,\n    \"type\": 'limit',\n    \"client_order_id\": client_order_id,\n    \"limit_price\": limit_price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 820,
        "wires": [
            [
                "6983ed0f18ca89fa"
            ]
        ]
    },
    {
        "id": "6983ed0f18ca89fa",
        "type": "alpaca-order",
        "z": "b580784427b72247",
        "conf": "e535f42f1df1b25f",
        "x": 610,
        "y": 820,
        "wires": [
            [
                "64f5c7044e85901c"
            ]
        ]
    },
    {
        "id": "c90f126a37a82094",
        "type": "function-npm",
        "z": "b580784427b72247",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 740,
        "wires": [
            [
                "4b41bafb383b3611"
            ]
        ]
    },
    {
        "id": "05de7a67cf0df6a5",
        "type": "inject",
        "z": "b580784427b72247",
        "name": "4 AM daily",
        "props": [],
        "repeat": "",
        "crontab": "00 04 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 740,
        "wires": [
            [
                "5b9b57943ec62a41"
            ]
        ]
    },
    {
        "id": "22590349d9702dc0",
        "type": "function",
        "z": "b580784427b72247",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 740,
        "wires": [
            [
                "5200eea1e6d3a5e2"
            ]
        ]
    },
    {
        "id": "4b41bafb383b3611",
        "type": "polygon-last-trade-v3",
        "z": "b580784427b72247",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 900,
        "y": 740,
        "wires": [
            [
                "22590349d9702dc0"
            ]
        ]
    },
    {
        "id": "496661815ba2ed69",
        "type": "postgresql",
        "z": "b580784427b72247",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "64f5c7044e85901c",
        "type": "function",
        "z": "b580784427b72247",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 820,
        "wires": [
            [
                "496661815ba2ed69"
            ]
        ]
    },
    {
        "id": "5b9b57943ec62a41",
        "type": "function",
        "z": "b580784427b72247",
        "name": "get symbols from alpaca_assets",
        "func": "let symbol = flow.get(\"tickers\")\nlet polygon_symbol = symbol\nlet alpaca_symbol = symbol\n\nmsg.alpaca_symbol = symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\nnode.warn(\"Symbol: \" +symbol+ \" Polygon Symbol: \" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 740,
        "wires": [
            [
                "c90f126a37a82094"
            ]
        ]
    },
    {
        "id": "458ee55d534dd9b0",
        "type": "function",
        "z": "b580784427b72247",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 380,
        "wires": [
            [
                "27c1ed633fd0970d"
            ]
        ]
    },
    {
        "id": "27c1ed633fd0970d",
        "type": "split",
        "z": "b580784427b72247",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 490,
        "y": 380,
        "wires": [
            [
                "feb2af02a8018fc8"
            ]
        ]
    },
    {
        "id": "feb2af02a8018fc8",
        "type": "function",
        "z": "b580784427b72247",
        "name": "insert into tickers",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers (id, symbol, portfolioname) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"');\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "83122494e3146ca2"
            ]
        ]
    },
    {
        "id": "83122494e3146ca2",
        "type": "postgresql",
        "z": "b580784427b72247",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 820,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "c87ec61ee40ef62a",
        "type": "function",
        "z": "b580784427b72247",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers.symbol\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 420,
        "wires": [
            [
                "e4a59d6fb290b0e1"
            ]
        ]
    },
    {
        "id": "433b29eb1818ebe9",
        "type": "delay",
        "z": "b580784427b72247",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 420,
        "wires": [
            [
                "c87ec61ee40ef62a"
            ]
        ]
    },
    {
        "id": "e4a59d6fb290b0e1",
        "type": "postgresql",
        "z": "b580784427b72247",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 820,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "3908474304bbaac3",
        "type": "comment",
        "z": "b580784427b72247",
        "name": "Flow 5: Sell SPY Prior to Market Close",
        "info": "",
        "x": 190,
        "y": 880,
        "wires": []
    },
    {
        "id": "9667b67161fcf68b",
        "type": "function",
        "z": "b580784427b72247",
        "name": "create Alpaca sell order ",
        "func": "let ticker = msg.alpaca_symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\nlet status = msg.status\nlet diff = flow.get(\"diff\")\n\n//node.warn(\"Alpaca Symbol: \" +ticker+ \" Price: \" +price)\n\nlet qty = ((psize / number) / price)\n\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet subtag = algo_name\n\n\n// logic for sell order\nlet profit = 0\nprofit = msg.profit\n\nnode.warn(\"Ticker: \" + ticker + \" Diff: \" +diff+ \" Status: \" + status + \" Qty: \" + qty + \" Orderid: \" + client_order_id + \" Algo Name: \" + subtag)\n\n\nqty = msg.qty\nlet temp = ''\n\nlet order_type = 'market' // select limit for limit orders\n\nif ( order_type == 'limit'){\n\n\ntemp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": 'sell',\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n}\n\nelse {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": 'sell',\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //  limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1120,
        "wires": [
            [
                "acc9d4e7b2aae74c"
            ]
        ]
    },
    {
        "id": "acc9d4e7b2aae74c",
        "type": "alpaca-order",
        "z": "b580784427b72247",
        "conf": "e535f42f1df1b25f",
        "x": 470,
        "y": 1180,
        "wires": [
            [
                "0375522097b6c6c7"
            ]
        ]
    },
    {
        "id": "7b47fa26a1d72434",
        "type": "function",
        "z": "b580784427b72247",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//node.warn(ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1000,
        "wires": [
            [
                "1fae93ad9cd7390e"
            ]
        ]
    },
    {
        "id": "1fae93ad9cd7390e",
        "type": "split",
        "z": "b580784427b72247",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "f150ce60acbb63cf"
            ]
        ]
    },
    {
        "id": "3981e8aa3a915069",
        "type": "function",
        "z": "b580784427b72247",
        "name": "get alt symbols",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1000,
        "wires": [
            [
                "c3ff12c4daeef08c"
            ]
        ]
    },
    {
        "id": "f150ce60acbb63cf",
        "type": "delay",
        "z": "b580784427b72247",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 1000,
        "wires": [
            [
                "3981e8aa3a915069"
            ]
        ]
    },
    {
        "id": "387337250c503a2f",
        "type": "function",
        "z": "b580784427b72247",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1060,
        "wires": [
            [
                "8a3b037363b8b896"
            ]
        ]
    },
    {
        "id": "c3ff12c4daeef08c",
        "type": "postgresql",
        "z": "b580784427b72247",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1000,
        "wires": [
            [
                "83d9d640f7391796"
            ]
        ]
    },
    {
        "id": "83d9d640f7391796",
        "type": "split",
        "z": "b580784427b72247",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "387337250c503a2f"
            ]
        ]
    },
    {
        "id": "7409d13be8721f44",
        "type": "inject",
        "z": "b580784427b72247",
        "name": "3:50 PM",
        "props": [],
        "repeat": "",
        "crontab": "50 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 940,
        "wires": [
            [
                "2cbb0b4d8a6f37d4"
            ]
        ]
    },
    {
        "id": "50e94c205a09af91",
        "type": "postgresql",
        "z": "b580784427b72247",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "0375522097b6c6c7",
        "type": "function",
        "z": "b580784427b72247",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1180,
        "wires": [
            [
                "50e94c205a09af91"
            ]
        ]
    },
    {
        "id": "8a3b037363b8b896",
        "type": "function",
        "z": "b580784427b72247",
        "name": "check positions table ",
        "func": "let ticker = msg.symbol\nmsg.query = \"select * from positions where symbol = '\" +ticker+ \"';\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1060,
        "wires": [
            [
                "0c3cdee7f9bfa6d4"
            ]
        ]
    },
    {
        "id": "0c3cdee7f9bfa6d4",
        "type": "postgresql",
        "z": "b580784427b72247",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 1060,
        "wires": [
            [
                "f1118a631c56438d"
            ]
        ]
    },
    {
        "id": "2cbb0b4d8a6f37d4",
        "type": "delay",
        "z": "b580784427b72247",
        "name": "Wait 5 secs for position table to update",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 940,
        "wires": [
            [
                "7b47fa26a1d72434"
            ]
        ]
    },
    {
        "id": "f1118a631c56438d",
        "type": "function",
        "z": "b580784427b72247",
        "name": "check curent position",
        "func": "let arr = msg.payload\nlet len = arr.length\nlet status = len // shows if payload is empty\n//node.warn(\"Status: \" +status)\n\nif ( status == 0){\n    //node.warn(\"position is 0\")\n    msg.status = 0\n} \n\nelse {\n    //node.warn(\"go to next flow\")\n    msg.status = 1\n }\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1060,
        "wires": [
            [
                "c53af2b1a877d4a5"
            ]
        ]
    },
    {
        "id": "c53af2b1a877d4a5",
        "type": "switch",
        "z": "b580784427b72247",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 1120,
        "wires": [
            [
                "7a8204f91225e276"
            ],
            []
        ]
    },
    {
        "id": "b83729066cde2fb2",
        "type": "function",
        "z": "b580784427b72247",
        "name": "Get values from positions",
        "func": "let qty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\n\nnode.warn(\"Price: \" +price+ \" Qty: \" +qty+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1120,
        "wires": [
            [
                "9667b67161fcf68b"
            ]
        ]
    },
    {
        "id": "7a8204f91225e276",
        "type": "split",
        "z": "b580784427b72247",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 1120,
        "wires": [
            [
                "b83729066cde2fb2"
            ]
        ]
    },
    {
        "id": "5aa20df73fa38408",
        "type": "function",
        "z": "b580784427b72247",
        "name": "define values required for adding trade to portfolio",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = flow.get(\"id\")\nlet login = 'pta17'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 1 // number of tickers in portfolio\nlet target = 0.01 // target profit \nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'intraday'\nlet algo_status = 'long'\nlet benchmark = 'SPY'\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 320,
        "wires": [
            [
                "a6b6303e46969b33"
            ]
        ]
    },
    {
        "id": "08349b3e45206362",
        "type": "inject",
        "z": "b580784427b72247",
        "name": "3:01",
        "props": [],
        "repeat": "",
        "crontab": "01 03 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "5aa20df73fa38408"
            ]
        ]
    },
    {
        "id": "a6b6303e46969b33",
        "type": "change",
        "z": "b580784427b72247",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "6cfa3fe5ecaffe71",
        "type": "inject",
        "z": "b580784427b72247",
        "name": "3 AM",
        "props": [],
        "repeat": "",
        "crontab": "00 03 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "245beca635e0ea4d"
            ]
        ]
    },
    {
        "id": "245beca635e0ea4d",
        "type": "function",
        "z": "b580784427b72247",
        "name": "set id,tickers, portfolioname",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nmsg.id = d\nlet tickers = 'SPY'\nmsg.tickers = tickers\nmsg.algo_name = 'Buy / Short SPY on News'\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 280,
        "wires": [
            [
                "ff8dc796955c6407"
            ]
        ]
    },
    {
        "id": "ff8dc796955c6407",
        "type": "change",
        "z": "b580784427b72247",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "3c1063df68884ee0",
        "type": "function",
        "z": "b580784427b72247",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = 'pta15'\nlet asset_class = 'crypto' // stocks or crypto\nlet number = 20 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet algo_type = \"interday\"\nlet strategy_type = \"long\"\nlet status = 'running'\nlet benchmark = 'SPY'\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,algo_name,algo_type,strategy_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + algo_name + \"','\" + algo_type + \"','\" + strategy_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"');\"\nmsg.query = sql\nnode.warn(msg.query)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 600,
        "wires": [
            [
                "a746a7336d312a93",
                "4d983f22e6aaf889"
            ]
        ]
    },
    {
        "id": "e970e0989e269052",
        "type": "inject",
        "z": "b580784427b72247",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "3c1063df68884ee0"
            ]
        ]
    },
    {
        "id": "a746a7336d312a93",
        "type": "change",
        "z": "b580784427b72247",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "4d983f22e6aaf889",
        "type": "postgresql",
        "z": "b580784427b72247",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "f8ca5a41.3e1448",
        "type": "MySQLdatabase",
        "name": "news",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "news",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]