[
    {
        "id": "0e92679c066cafd6",
        "type": "tab",
        "label": "Update on Intervals",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b6c6c68b1da7e9b5",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "Every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "9c1985220c0f9b57",
                "2f3cb4cdbd4af329"
            ]
        ]
    },
    {
        "id": "9c1985220c0f9b57",
        "type": "alpaca-account-query",
        "z": "0e92679c066cafd6",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "eb702c313b8a9f3b"
            ]
        ]
    },
    {
        "id": "eb702c313b8a9f3b",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "Insert into live balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'live'\nbalance = parseInt(balance)\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 140,
        "wires": [
            [
                "b2353806c7d897d1"
            ]
        ]
    },
    {
        "id": "d52ace076e339efa",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "Daily at Midnight",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "70d0c03e6973d524",
                "c9344950e761a48b"
            ]
        ]
    },
    {
        "id": "70d0c03e6973d524",
        "type": "alpaca-account-query",
        "z": "0e92679c066cafd6",
        "conf": "0c86a5f06a42b505",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "8e05fa1f83b46fad"
            ]
        ]
    },
    {
        "id": "3355f4e72623fe83",
        "type": "comment",
        "z": "0e92679c066cafd6",
        "name": "Store account balances to sqlite tables",
        "info": "",
        "x": 190,
        "y": 80,
        "wires": []
    },
    {
        "id": "2f3cb4cdbd4af329",
        "type": "alpaca-account-query",
        "z": "0e92679c066cafd6",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 180,
        "wires": [
            [
                "9118be29d864fcb3"
            ]
        ]
    },
    {
        "id": "c9344950e761a48b",
        "type": "alpaca-account-query",
        "z": "0e92679c066cafd6",
        "conf": "e535f42f1df1b25f",
        "x": 400,
        "y": 260,
        "wires": [
            [
                "9505e05276b54ece"
            ]
        ]
    },
    {
        "id": "9118be29d864fcb3",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "Insert into paper balances table",
        "func": "let acct = \"balances\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n//node.warn(Number.isInteger(balance))\nbalance = parseInt(balance)\n\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "f9d2e09ffabcb773"
            ]
        ]
    },
    {
        "id": "9505e05276b54ece",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "a3d126f954b973b7"
            ]
        ]
    },
    {
        "id": "b2353806c7d897d1",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f9d2e09ffabcb773",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "70127d0ab4e9b947",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a3d126f954b973b7",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8e05fa1f83b46fad",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "Insert into paper balances_daily table",
        "func": "let acct = \"balances_daily\"\nlet dt = new Date();\nlet ux = Math.floor(Date.now() / 1000)\nlet balance = msg.payload.equity;\nlet account = 'paper'\n\nmsg.query = \"insert into \" +acct+ \" (account, unixtime, balance) values ('\" +account+ \"','\" +ux+ \"', '\" +balance+ \"')\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "70127d0ab4e9b947"
            ]
        ]
    },
    {
        "id": "9b230b1a31d62c6f",
        "type": "polygon-last-trade-v3",
        "z": "0e92679c066cafd6",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 900,
        "y": 420,
        "wires": [
            [
                "18662901c4824a7f"
            ]
        ]
    },
    {
        "id": "0596bf217aadb864",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select * from markets",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "34717ddba43812a0"
            ]
        ]
    },
    {
        "id": "18662901c4824a7f",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n    //node.warn(\"Price: \" +price)\n}\n\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "d68cec17eec9ed37"
            ]
        ]
    },
    {
        "id": "9f6fd7d3dc5c5dcc",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "760b9e7854106cef"
            ]
        ]
    },
    {
        "id": "760b9e7854106cef",
        "type": "function-npm",
        "z": "0e92679c066cafd6",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 420,
        "wires": [
            [
                "9b230b1a31d62c6f"
            ]
        ]
    },
    {
        "id": "3f9a164bce5bca7f",
        "type": "polygon-last-trade-v3",
        "z": "0e92679c066cafd6",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 900,
        "y": 460,
        "wires": [
            [
                "dbab09d80e457cad"
            ]
        ]
    },
    {
        "id": "118c963b9df57215",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "4681a8e68d924b6e"
            ]
        ]
    },
    {
        "id": "dbab09d80e457cad",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update markets set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "935cd9b6bc502d76"
            ]
        ]
    },
    {
        "id": "6124c3dcdebf76b2",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "ebd5a98e05366cd9"
            ]
        ]
    },
    {
        "id": "c0afc1c9ee5e4e25",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from markets",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "ad4f4856a9a310e2"
            ]
        ]
    },
    {
        "id": "c58d91d4f5d5f56a",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 520,
        "wires": [
            [
                "7c314af96d36376f"
            ]
        ]
    },
    {
        "id": "7c314af96d36376f",
        "type": "function-npm",
        "z": "0e92679c066cafd6",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 520,
        "wires": [
            [
                "5652b2d5ed7103a0"
            ]
        ]
    },
    {
        "id": "cacf2a72b01c8f01",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "calculate changes",
        "func": "msg.query = \"update markets set change24h =  (price24h - closing), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            [
                "1347551aad79b6fd"
            ]
        ]
    },
    {
        "id": "7f6ff403740b5401",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "calculate pct changes",
        "func": "msg.query = \"update markets set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100)\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "d598333d4bb3e748"
            ]
        ]
    },
    {
        "id": "33cbf4ef27fe8c95",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update markets set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "0e8555d9ef640b44"
            ]
        ]
    },
    {
        "id": "5652b2d5ed7103a0",
        "type": "polygon-trades-min-agg-rest",
        "z": "0e92679c066cafd6",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 520,
        "wires": [
            [
                "33cbf4ef27fe8c95"
            ]
        ]
    },
    {
        "id": "6db3089c88daa164",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "cacf2a72b01c8f01"
            ]
        ]
    },
    {
        "id": "ab09ab9c4efbfcaf",
        "type": "comment",
        "z": "0e92679c066cafd6",
        "name": "Watchlist Prices",
        "info": "",
        "x": 120,
        "y": 640,
        "wires": []
    },
    {
        "id": "60f2039e589dd417",
        "type": "polygon-last-trade-v3",
        "z": "0e92679c066cafd6",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 900,
        "y": 680,
        "wires": [
            [
                "9efd14c36cd363b7"
            ]
        ]
    },
    {
        "id": "9efd14c36cd363b7",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set closing = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 680,
        "wires": [
            [
                "aff7d08f2153ab36"
            ]
        ]
    },
    {
        "id": "28d398c59cab5280",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 680,
        "wires": [
            [
                "98b7492a539c834d"
            ]
        ]
    },
    {
        "id": "cc4c24a2195bd5fc",
        "type": "polygon-last-trade-v3",
        "z": "0e92679c066cafd6",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 860,
        "y": 740,
        "wires": [
            [
                "b62bac21f9d072a2"
            ]
        ]
    },
    {
        "id": "b62bac21f9d072a2",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "update closing",
        "func": "let symbol = msg.ticker\nlet price = 0\n\nfor (let item of msg.payload.results) {\n    price = item.price;\n}\n\nlet ticker = msg.topic\n//node.warn(ticker)\nmsg.query = \"update watchlist set price24h = \" +price+ \" where symbol = '\" +symbol+ \"' \"\n\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 740,
        "wires": [
            [
                "3566cbad5c1ee950"
            ]
        ]
    },
    {
        "id": "53d8084b553215d3",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 740,
        "wires": [
            [
                "0208e1bde818a9e3"
            ]
        ]
    },
    {
        "id": "273ce3cfab178f5b",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 800,
        "wires": [
            [
                "1eb56ba83fc8a389"
            ]
        ]
    },
    {
        "id": "598f3e4c4cd7d24a",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "calculate changes",
        "func": "msg.query = \"update watchlist set change24h =  (price24h - closing), change7d = (closing - price7d)\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 860,
        "wires": [
            [
                "3d6cef6faa09f7aa"
            ]
        ]
    },
    {
        "id": "2fbe30dba8ad0be4",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "calculate pct changes",
        "func": "msg.query = \"update watchlist set pct24 =  ((change24h / closing) * 100), pct7d = ((change7d / closing) * 100)\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 860,
        "wires": [
            [
                "e75680e8a7b2bf16"
            ]
        ]
    },
    {
        "id": "3954416eb8857ed8",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "get first value",
        "func": "let symbol = msg.ticker\n\nconst account = { name: 'One Minute Bars', data: [] };\n\nfor (const item of msg.payload.results) {\n    const { c, t } = item;\n    const dateEpoch = +(new Date(t));\n\n//    account.data.push([ dateEpoch, +c ]);\n    account.data.push([ c ]);\n}\n\nlet price = account.data[0];\n\nprice = price.toString()\n//node.warn(\"Price: \" +price)\n\nmsg.query = \"update watchlist set price7d = \" + price + \" where symbol = '\" + symbol + \"' \"\n\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "7a32d2923c6788f6"
            ]
        ]
    },
    {
        "id": "20d2f19992f9ea88",
        "type": "polygon-trades-min-agg-rest",
        "z": "0e92679c066cafd6",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "multiplier": 1,
        "timespan": "minute",
        "from": "",
        "to": "",
        "x": 820,
        "y": 800,
        "wires": [
            [
                "3954416eb8857ed8"
            ]
        ]
    },
    {
        "id": "f65829c40567f3c7",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "Each min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 860,
        "wires": [
            [
                "598f3e4c4cd7d24a"
            ]
        ]
    },
    {
        "id": "34717ddba43812a0",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 420,
        "wires": [
            [
                "9f6fd7d3dc5c5dcc"
            ]
        ]
    },
    {
        "id": "d68cec17eec9ed37",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "4681a8e68d924b6e",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 460,
        "wires": [
            [
                "6124c3dcdebf76b2"
            ]
        ]
    },
    {
        "id": "935cd9b6bc502d76",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ad4f4856a9a310e2",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 520,
        "wires": [
            [
                "c58d91d4f5d5f56a"
            ]
        ]
    },
    {
        "id": "0e8555d9ef640b44",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "1347551aad79b6fd",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 580,
        "wires": [
            [
                "7f6ff403740b5401"
            ]
        ]
    },
    {
        "id": "b0af5c372b657dd4",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 680,
        "wires": [
            [
                "28d398c59cab5280"
            ]
        ]
    },
    {
        "id": "aff7d08f2153ab36",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "61acb7cac7d62474",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 740,
        "wires": [
            [
                "53d8084b553215d3"
            ]
        ]
    },
    {
        "id": "3566cbad5c1ee950",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "7a32d2923c6788f6",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1220,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "e75487474d271a05",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 800,
        "wires": [
            [
                "273ce3cfab178f5b"
            ]
        ]
    },
    {
        "id": "3d6cef6faa09f7aa",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 860,
        "wires": [
            [
                "2fbe30dba8ad0be4"
            ]
        ]
    },
    {
        "id": "d598333d4bb3e748",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "e75680e8a7b2bf16",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "a3bb20217fe30adf",
        "type": "comment",
        "z": "0e92679c066cafd6",
        "name": "Markets Prices",
        "info": "",
        "x": 120,
        "y": 360,
        "wires": []
    },
    {
        "id": "ebd5a98e05366cd9",
        "type": "function-npm",
        "z": "0e92679c066cafd6",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 460,
        "wires": [
            [
                "3f9a164bce5bca7f"
            ]
        ]
    },
    {
        "id": "98b7492a539c834d",
        "type": "function-npm",
        "z": "0e92679c066cafd6",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 680,
        "wires": [
            [
                "60f2039e589dd417"
            ]
        ]
    },
    {
        "id": "0208e1bde818a9e3",
        "type": "function-npm",
        "z": "0e92679c066cafd6",
        "name": "prepare polygon ",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//msg.topic = symbol\n//node.warn(msg.symbol)\nnode.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 740,
        "wires": [
            [
                "cc4c24a2195bd5fc"
            ]
        ]
    },
    {
        "id": "414f137a0339c445",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "calculate changes each Minute",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "b0af5c372b657dd4"
            ]
        ]
    },
    {
        "id": "d9b3bcaa8bf5face",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "calculate changes at 6 am",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "61acb7cac7d62474"
            ]
        ]
    },
    {
        "id": "613f9453ab1aa0f2",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "get 7d price",
        "props": [
            {
                "p": "query",
                "v": "select symbol, polygon_symbol from watchlist",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "e75487474d271a05"
            ]
        ]
    },
    {
        "id": "1eb56ba83fc8a389",
        "type": "function-npm",
        "z": "0e92679c066cafd6",
        "name": "prepare polygon  7d",
        "func": "let symbol = msg.payload[\"polygon_symbol\"]\nmsg.ticker = msg.payload[\"symbol\"]\n\nlet cnt = 1\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nlet date = new Date();\n\n// this gets the day before yesterday\ndate.setDate(date.getDate() - 7);\n\nconst fromDt = date\n\n// toDt is today\nconst toDt = new Date(); // Today\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    from: fromDt.toLocaleDateString('en-CA'),\n    to: toDt.toLocaleDateString('en-CA'),\n    symbol: symbol\n}\n\nmsg.timespan = 'day';\nmsg.topic = symbol\n\n//node.warn(msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 800,
        "wires": [
            [
                "20d2f19992f9ea88"
            ]
        ]
    },
    {
        "id": "0d1a8898132c2f77",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "2aa94bf467f9a848"
            ]
        ]
    },
    {
        "id": "105885f84e8ea998",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "ade9f462a5411662",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "get 500 closed orders live",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "d80d5801ba04274a"
            ]
        ]
    },
    {
        "id": "d80d5801ba04274a",
        "type": "alpaca-query-order",
        "z": "0e92679c066cafd6",
        "conf": "0c86a5f06a42b505",
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "0d1a8898132c2f77"
            ]
        ]
    },
    {
        "id": "2aa94bf467f9a848",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "insert into orders live",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'live');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1020,
        "wires": [
            [
                "105885f84e8ea998"
            ]
        ]
    },
    {
        "id": "69da198f7aee3767",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "e681be5e61b00a5d"
            ]
        ]
    },
    {
        "id": "33baf68e18ac72b9",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "e4e172f64634095d",
        "type": "alpaca-query-order",
        "z": "0e92679c066cafd6",
        "conf": "e535f42f1df1b25f",
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "69da198f7aee3767"
            ]
        ]
    },
    {
        "id": "c1a99778899d3bcc",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "get 500 closed orders paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "e4e172f64634095d"
            ]
        ]
    },
    {
        "id": "e681be5e61b00a5d",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1060,
        "wires": [
            [
                "33baf68e18ac72b9"
            ]
        ]
    },
    {
        "id": "ca18ac45dd2b35bb",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "0fd8064b8f9a05e2",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "update symbol from alpaca_assets",
        "func": "msg.query = \"UPDATE orders SET symbol = alpaca_assets.symbol FROM alpaca_assets where orders.symbol = alpaca_assets.alpaca_symbol\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "ca18ac45dd2b35bb"
            ]
        ]
    },
    {
        "id": "6863a609c2161e02",
        "type": "delay",
        "z": "0e92679c066cafd6",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "367cd33582682079",
        "type": "comment",
        "z": "0e92679c066cafd6",
        "name": "Upload Recent Orders",
        "info": "",
        "x": 140,
        "y": 960,
        "wires": []
    },
    {
        "id": "9097ef93ac11d85d",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "4:30 am",
        "props": [],
        "repeat": "",
        "crontab": "30 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1020,
        "wires": [
            [
                "ade9f462a5411662",
                "c1a99778899d3bcc",
                "6863a609c2161e02"
            ]
        ]
    },
    {
        "id": "fc43d017804a78eb",
        "type": "alpaca-orders-close",
        "z": "0e92679c066cafd6",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 410,
        "y": 1260,
        "wires": [
            [
                "e566ded9bd43d50d"
            ]
        ]
    },
    {
        "id": "7528520abd5c851e",
        "type": "comment",
        "z": "0e92679c066cafd6",
        "name": "Close all orders at 4 AM",
        "info": "",
        "x": 140,
        "y": 1220,
        "wires": []
    },
    {
        "id": "55921f505673e6ea",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "Close paper account",
        "props": [],
        "repeat": "",
        "crontab": "00 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1260,
        "wires": [
            [
                "fc43d017804a78eb"
            ]
        ]
    },
    {
        "id": "e566ded9bd43d50d",
        "type": "debug",
        "z": "0e92679c066cafd6",
        "name": "debug 176",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1260,
        "wires": []
    },
    {
        "id": "fc3c42648608c6dc",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "truncate positions table",
        "func": "msg.query = \"truncate table positions\"\n//msg.query = \"drop table positions\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1460,
        "wires": [
            [
                "8f0e2ed12ae21219"
            ]
        ]
    },
    {
        "id": "8f0e2ed12ae21219",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 1460,
        "wires": [
            [
                "dd4a9aa62132110e"
            ]
        ]
    },
    {
        "id": "5ec2df6253b90016",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "insert vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('paper', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn(sql)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1520,
        "wires": [
            [
                "98afd8ae796253fc"
            ]
        ]
    },
    {
        "id": "dd4a9aa62132110e",
        "type": "alpaca-position-query",
        "z": "0e92679c066cafd6",
        "conf": "e535f42f1df1b25f",
        "x": 350,
        "y": 1520,
        "wires": [
            [
                "d3c52cc7e3566340"
            ]
        ]
    },
    {
        "id": "98afd8ae796253fc",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "8ff91bfaca43ef91",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1460,
        "wires": [
            [
                "fc3c42648608c6dc",
                "961a4329d8d26bc5"
            ]
        ]
    },
    {
        "id": "38653c4454313a2e",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "update positions from tickers",
        "func": "msg.query = \"UPDATE positions SET id = tickers.id, portfolioname = tickers.portfolioname, name = tickers.name, orderid = tickers.orderid FROM tickers where tickers.symbol = positions.symbol\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1580,
        "wires": [
            [
                "105da850f3d01fe3"
            ]
        ]
    },
    {
        "id": "105da850f3d01fe3",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "95222b81490b325a",
        "type": "comment",
        "z": "0e92679c066cafd6",
        "name": "Update positions table",
        "info": "",
        "x": 140,
        "y": 1420,
        "wires": []
    },
    {
        "id": "d3c52cc7e3566340",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 1520,
        "wires": [
            [
                "5ec2df6253b90016"
            ]
        ]
    },
    {
        "id": "961a4329d8d26bc5",
        "type": "delay",
        "z": "0e92679c066cafd6",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 150,
        "y": 1580,
        "wires": [
            [
                "38653c4454313a2e"
            ]
        ]
    },
    {
        "id": "6af216aedbc07f05",
        "type": "comment",
        "z": "0e92679c066cafd6",
        "name": "Update Orders Table ",
        "info": "",
        "x": 130,
        "y": 1660,
        "wires": []
    },
    {
        "id": "0d62ced5568c4cc8",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 1760,
        "wires": [
            [
                "86dacdf7b9718cbc"
            ]
        ]
    },
    {
        "id": "4786d654280de7c1",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "a0c0ce00f04d0bf3",
        "type": "alpaca-query-order",
        "z": "0e92679c066cafd6",
        "conf": "e535f42f1df1b25f",
        "x": 660,
        "y": 1760,
        "wires": [
            [
                "0d62ced5568c4cc8"
            ]
        ]
    },
    {
        "id": "8b65e4be6757ebdd",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "get last 100 closed paper orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"100\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1760,
        "wires": [
            [
                "a0c0ce00f04d0bf3"
            ]
        ]
    },
    {
        "id": "86dacdf7b9718cbc",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1760,
        "wires": [
            [
                "4786d654280de7c1"
            ]
        ]
    },
    {
        "id": "626bdf9c61d843d3",
        "type": "delay",
        "z": "0e92679c066cafd6",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "8b65e4be6757ebdd"
            ]
        ]
    },
    {
        "id": "045a1e257e661043",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1700,
        "wires": [
            [
                "3f26214ecba407f3"
            ]
        ]
    },
    {
        "id": "58126b83e851a522",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "update order_confirms from orders",
        "func": "msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created_at,filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\n//msg.query = \"UPDATE order_confirms SET status = orders.status, filled_at = orders.created.at, filled_qty = orders.filled_qty, filled_avg_price = orders.filled_avg_price, subtag = orders.subtag FROM orders where orders.id = order_confirms.id\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1820,
        "wires": [
            [
                "d15e576ecb10c4cc"
            ]
        ]
    },
    {
        "id": "d15e576ecb10c4cc",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "5b53fadc4dcb6b37",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "truncate orders table",
        "func": "//msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\nmsg.query = \"truncate table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1700,
        "wires": [
            [
                "8fb2a41ce6df3fa2"
            ]
        ]
    },
    {
        "id": "8fb2a41ce6df3fa2",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "3f26214ecba407f3",
        "type": "delay",
        "z": "0e92679c066cafd6",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1700,
        "wires": [
            [
                "5b53fadc4dcb6b37",
                "626bdf9c61d843d3",
                "3d564654b47c6372"
            ]
        ]
    },
    {
        "id": "3d564654b47c6372",
        "type": "delay",
        "z": "0e92679c066cafd6",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1820,
        "wires": [
            [
                "58126b83e851a522"
            ]
        ]
    },
    {
        "id": "ea907cf43cc4b911",
        "type": "comment",
        "z": "0e92679c066cafd6",
        "name": "Update from algos table current day performance",
        "info": "",
        "x": 200,
        "y": 1980,
        "wires": []
    },
    {
        "id": "58530e32a505bac9",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "Every min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 2040,
        "wires": [
            [
                "d5b9896272d19996"
            ]
        ]
    },
    {
        "id": "1525e57f8f5d1912",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "get totals from positions",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(unrealized_pl) as b, sum(market_value) as c from positions where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 2040,
        "wires": [
            [
                "6fa9c532011bc72e"
            ]
        ]
    },
    {
        "id": "6375d0aa18688541",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "store sums",
        "func": "let gain_alltime = msg.payload[\"a\"]\nlet gain_today = msg.payload[\"b\"]\nlet total_value = msg.payload[\"c\"]\nmsg.totalvalue = total_value\nmsg.gainalltime = gain_alltime\nmsg.gaintoday = gain_today\nlet id = msg.name\n//node.warn(\"Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" +total_value+ \", gain_today = \" +gain_today+ \", gain_alltime = \" +gain_alltime+ \" where algo_name = '\" +id+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2100,
        "wires": [
            [
                "3507ab2b133e0b9f",
                "fe8bc2fe2e6dcfb9"
            ]
        ]
    },
    {
        "id": "8efdd18b9f50353b",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 350,
        "y": 2100,
        "wires": [
            [
                "6375d0aa18688541"
            ]
        ]
    },
    {
        "id": "6fa9c532011bc72e",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 220,
        "y": 2100,
        "wires": [
            [
                "8efdd18b9f50353b"
            ]
        ]
    },
    {
        "id": "3507ab2b133e0b9f",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "fe8bc2fe2e6dcfb9",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday + \", pctgain_alltime  = \" + pctgainalltime + \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2160,
        "wires": [
            [
                "c9623f2e3ffdf8db"
            ]
        ]
    },
    {
        "id": "c9623f2e3ffdf8db",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "133e9bfdd0d729b0",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2040,
        "wires": [
            [
                "c0557ecac8268de1"
            ]
        ]
    },
    {
        "id": "c0557ecac8268de1",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 2040,
        "wires": [
            [
                "69a386714b1a72fd"
            ]
        ]
    },
    {
        "id": "69a386714b1a72fd",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 2040,
        "wires": [
            [
                "99f83e025bd95410"
            ]
        ]
    },
    {
        "id": "99f83e025bd95410",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2040,
        "wires": [
            [
                "1525e57f8f5d1912"
            ]
        ]
    },
    {
        "id": "c0a22006940eed03",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 2580,
        "wires": [
            [
                "72a325d00edad196"
            ]
        ]
    },
    {
        "id": "c8435aa6bc0f454c",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "calculate benchmark changes",
        "func": "let start = msg.payload[\"benchmark_start\"]\nlet close = global.get(\"spy_close\")\nlet current = global.get(\"spy_current\")\n//node.warn(\"Start: \" +start+ \" Close: \" +close+ \" Current: \" +current) \n\nlet gain_alltime = (current - start)\nlet gain_today = (current - close)\n\nlet pctbench_today = (gain_today / start) * 100\nlet pctbench_alltime = (gain_alltime / start) * 100\n\n\nmsg.query = \"update algos set pctbench_today = \" + pctbench_today + \", pctbench_alltime = \" + pctbench_alltime+ \", info_ratio = (pctgain_alltime - pctbench_alltime);\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2640,
        "wires": [
            [
                "c824891b18114c5d"
            ]
        ]
    },
    {
        "id": "72a325d00edad196",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1150,
        "y": 2580,
        "wires": [
            [
                "c8435aa6bc0f454c"
            ]
        ]
    },
    {
        "id": "b2e9a83909cac202",
        "type": "comment",
        "z": "0e92679c066cafd6",
        "name": "Update benchmarks",
        "info": "",
        "x": 150,
        "y": 2520,
        "wires": []
    },
    {
        "id": "38466f0c8b7fb510",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2580,
        "wires": [
            [
                "dc644ddf51612138"
            ]
        ]
    },
    {
        "id": "a910e569dad1b605",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2580,
        "wires": [
            [
                "8909e4c8f0bbbd50"
            ]
        ]
    },
    {
        "id": "8909e4c8f0bbbd50",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 2580,
        "wires": [
            [
                "4224a8f1e2937d21"
            ]
        ]
    },
    {
        "id": "4224a8f1e2937d21",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 2580,
        "wires": [
            [
                "65cfd04123cd7063"
            ]
        ]
    },
    {
        "id": "65cfd04123cd7063",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\n//node.warn(\"Algo name: \" +name)\nmsg.query = \"select benchmark_start from algos where algo_name = '\" + name + \"';\"\nmsg.name = name\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2580,
        "wires": [
            [
                "c0a22006940eed03"
            ]
        ]
    },
    {
        "id": "c824891b18114c5d",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "dc644ddf51612138",
        "type": "delay",
        "z": "0e92679c066cafd6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 2580,
        "wires": [
            [
                "a910e569dad1b605"
            ]
        ]
    },
    {
        "id": "02d03b46bbe8998a",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "display algos",
        "props": [
            {
                "p": "query",
                "v": "select * from algos",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "delete from algos",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from positions where portfolioname = 'High Dividend Stocks (> 11%)'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update positions set portfolioname = 'Buy Crypto Portfolio' where asset_class = 'crypto'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 2740,
        "wires": [
            [
                "f51d7c941c60495e"
            ]
        ]
    },
    {
        "id": "f51d7c941c60495e",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 340,
        "y": 2740,
        "wires": [
            [
                "b3e9f151963572fe"
            ]
        ]
    },
    {
        "id": "b3e9f151963572fe",
        "type": "debug",
        "z": "0e92679c066cafd6",
        "name": "debug 234",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 2740,
        "wires": []
    },
    {
        "id": "7f12ae2861b1a99d",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "Every Min",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 2260,
        "wires": [
            [
                "d6941d5dd3725623"
            ]
        ]
    },
    {
        "id": "b4fc171e47c78853",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "store sums",
        "func": "let gain_alltime = msg.payload[\"a\"]\nlet gain_today = msg.payload[\"b\"]\nlet total_value = msg.payload[\"c\"]\nmsg.totalvalue = total_value\nmsg.gainalltime = gain_alltime\nmsg.gaintoday = gain_today\nlet id = msg.name\n//node.warn(\"Gain Today: \" + gain_today + \" Gain Alltime: \" + gain_alltime)\nmsg.query = \"update algos set portfolio_size = \" +total_value+ \", gain_today = \" +gain_today+ \", gain_alltime = \" +gain_alltime+ \" where algo_name = '\" +id+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "bb6330e09d661047",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 370,
        "y": 2320,
        "wires": [
            [
                "b4fc171e47c78853"
            ]
        ]
    },
    {
        "id": "adf9d303bc2cf8b3",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 240,
        "y": 2320,
        "wires": [
            [
                "bb6330e09d661047"
            ]
        ]
    },
    {
        "id": "6e4621e640011f92",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "d2c13bbfed681fbd",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "update algos table",
        "func": "let gain_alltime = msg.gainalltime\nlet gain_today = msg.gaintoday\nlet total_value = msg.totalvalue\nlet id = msg.name\nlet pctgainalltime = 0\nlet pctgaintoday = 0\n\nif (total_value > 0){\n     pctgainalltime = (gain_alltime / total_value) * 100\n     pctgaintoday = (gain_today / total_value) * 100\n}\n\n\nmsg.query = \"update algos set pctgain_today = \" + pctgaintoday + \", pctgain_alltime  = \" + pctgainalltime + \" where algo_name = '\" + id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2380,
        "wires": [
            [
                "7c506b48e5ffd196"
            ]
        ]
    },
    {
        "id": "7c506b48e5ffd196",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "d5b9896272d19996",
        "type": "delay",
        "z": "0e92679c066cafd6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 2040,
        "wires": [
            [
                "133e9bfdd0d729b0"
            ]
        ]
    },
    {
        "id": "9522112c8e7e836c",
        "type": "comment",
        "z": "0e92679c066cafd6",
        "name": "Update from \"interday\" algos table all time performance",
        "info": "",
        "x": 220,
        "y": 2220,
        "wires": []
    },
    {
        "id": "190ec3793467ed72",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "get totals from order_confirms",
        "func": "let name = msg.name\nmsg.query = \"select sum(unrealized_intraday_pl) as a, sum(unrealized_pl) as b, sum(market_value) as c from order_confirms where portfolioname = '\" +name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "92e85e765fbd685e",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "get algo name",
        "func": "msg.query = \"select algo_name from algos where algo_type = 'interday'\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2260,
        "wires": [
            [
                "08f1e7d9f42d996b"
            ]
        ]
    },
    {
        "id": "08f1e7d9f42d996b",
        "type": "postgresql",
        "z": "0e92679c066cafd6",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 2260,
        "wires": [
            [
                "1b1d39f56c75825b"
            ]
        ]
    },
    {
        "id": "1b1d39f56c75825b",
        "type": "split",
        "z": "0e92679c066cafd6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 2260,
        "wires": [
            [
                "06adc46327b2444d"
            ]
        ]
    },
    {
        "id": "06adc46327b2444d",
        "type": "function",
        "z": "0e92679c066cafd6",
        "name": "store sums",
        "func": "let name  = msg.payload[\"algo_name\"]\nnode.warn(\"Algo name: \" +name)\nmsg.name = name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2260,
        "wires": [
            [
                "190ec3793467ed72"
            ]
        ]
    },
    {
        "id": "d6941d5dd3725623",
        "type": "delay",
        "z": "0e92679c066cafd6",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 2260,
        "wires": [
            [
                "92e85e765fbd685e"
            ]
        ]
    },
    {
        "id": "32c8fb1e0ecedd0d",
        "type": "inject",
        "z": "0e92679c066cafd6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2420,
        "wires": [
            [
                "92e85e765fbd685e"
            ]
        ]
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "AKHGVWA9MGB4CX40J5X6",
        "paper": false
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]