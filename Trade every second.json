[
    {
        "id": "0cb13c1ff3ddec26",
        "type": "tab",
        "label": "Trade every second",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9e44bbe0aa71fdec",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "truncate positions_live",
        "func": "msg.query = \"truncate table positions_live\"\n//msg.query = \"drop table positions\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 260,
        "wires": [
            [
                "82851ff9c86da9b7"
            ]
        ]
    },
    {
        "id": "82851ff9c86da9b7",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 260,
        "wires": [
            [
                "5f446518f8aa92fd"
            ]
        ]
    },
    {
        "id": "0718b0128bf18f5f",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "insert LIVE account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions_live (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('live', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn('live')\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 260,
        "wires": [
            [
                "e745a46b639e2f55"
            ]
        ]
    },
    {
        "id": "5f446518f8aa92fd",
        "type": "alpaca-position-query",
        "z": "0cb13c1ff3ddec26",
        "conf": "0c86a5f06a42b505",
        "x": 730,
        "y": 260,
        "wires": [
            [
                "45fdf168b319611a"
            ]
        ]
    },
    {
        "id": "e745a46b639e2f55",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1380,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "874ef60c1d21b36c",
        "type": "inject",
        "z": "0cb13c1ff3ddec26",
        "name": "Every sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "1c0ab0213f8c2157"
            ]
        ]
    },
    {
        "id": "b102c046e0b7ba27",
        "type": "comment",
        "z": "0cb13c1ff3ddec26",
        "name": "Update positions table from Alpaca every second. Activate only when trades are being made in the account - otherwise too much activity.",
        "info": "",
        "x": 500,
        "y": 180,
        "wires": []
    },
    {
        "id": "45fdf168b319611a",
        "type": "split",
        "z": "0cb13c1ff3ddec26",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 260,
        "wires": [
            [
                "0718b0128bf18f5f"
            ]
        ]
    },
    {
        "id": "a5b1de8c12311469",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "create Alpaca buy order ",
        "func": "let qty = 0\n\nlet ticker = 'TQQQ'\nlet price = 0\nlet profit = 0\nlet side = 'buy'\nqty = 100\nqty = +qty\n\n\n\nconst ld = new Date();\nlet text = ld.toLocaleTimeString();\nlet localtime = ld.toLocaleTimeString();\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nnode.warn(\"Ticker: \" +ticker+ \" Price: \" +price+ \" Profit: \" +profit+ \" Side: \" +side+ \" Qty: \" +qty)\n\n\nlet temp = ''\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": \"market\",\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"day\"\n    };\n\n//node.warn(temp)\nmsg.payload = temp\nlet id = (\"Localtime: \" +localtime+ \" Ticker: \" + ticker + \" Price: \" + price + \" Profit: \" + profit + \" Side: \" + side + \" Qty: \" + qty)\nlet id2 = ''\nmsg.sql = \"insert into log_tqqq (id, id2) values ('\" + id + \"','\" + id2 + \"');\" \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 720,
        "wires": [
            [
                "ee2bf4c46f471ae6",
                "86cdc425eaab5a86"
            ]
        ]
    },
    {
        "id": "7002131e5df06577",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 780,
        "wires": [
            [
                "1dc72545b4da8179"
            ]
        ]
    },
    {
        "id": "ee2bf4c46f471ae6",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "create log table",
        "func": "let sql = \"create table IF NOT EXISTS log_tqqq (id VARCHAR(5000), id2 VARCHAR(5000))\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 780,
        "wires": [
            [
                "7002131e5df06577"
            ]
        ]
    },
    {
        "id": "1dc72545b4da8179",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "insert into log",
        "func": "let sql = msg.sql\nmsg.query = sql\n//node.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 780,
        "wires": [
            [
                "1b73b01670b07d1a"
            ]
        ]
    },
    {
        "id": "1b73b01670b07d1a",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "2f379a1e12d606ae",
        "type": "http in",
        "z": "0cb13c1ff3ddec26",
        "name": "/api/download_log_positions",
        "url": "/api/download_log_positions",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1140,
        "wires": [
            [
                "3c8b15228f4beb64"
            ]
        ]
    },
    {
        "id": "a3d4b0fe4fa7c952",
        "type": "http response",
        "z": "0cb13c1ff3ddec26",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1010,
        "y": 1140,
        "wires": []
    },
    {
        "id": "195a96c293831d93",
        "type": "csv",
        "z": "0cb13c1ff3ddec26",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 730,
        "y": 1140,
        "wires": [
            [
                "dfeebcbb1644a3d1"
            ]
        ]
    },
    {
        "id": "3c8b15228f4beb64",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "export query",
        "func": "msg.query = \"select * from log_positions\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1140,
        "wires": [
            [
                "c954e58689d3a790"
            ]
        ]
    },
    {
        "id": "dfeebcbb1644a3d1",
        "type": "file",
        "z": "0cb13c1ff3ddec26",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 870,
        "y": 1140,
        "wires": [
            [
                "a3d4b0fe4fa7c952"
            ]
        ]
    },
    {
        "id": "c954e58689d3a790",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 1140,
        "wires": [
            [
                "195a96c293831d93"
            ]
        ]
    },
    {
        "id": "86cdc425eaab5a86",
        "type": "alpaca-order",
        "z": "0cb13c1ff3ddec26",
        "conf": "e535f42f1df1b25f",
        "x": 690,
        "y": 720,
        "wires": [
            [
                "480cff2a877e963e"
            ]
        ]
    },
    {
        "id": "a38dcac3f981fa72",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "480cff2a877e963e",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 720,
        "wires": [
            [
                "a38dcac3f981fa72"
            ]
        ]
    },
    {
        "id": "0c9f8cb58b365dcd",
        "type": "change",
        "z": "0cb13c1ff3ddec26",
        "name": "reset msgs to 0",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "qty",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "side",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 900,
        "wires": [
            [
                "30e7b6ea8ade0d13"
            ]
        ]
    },
    {
        "id": "5d7e8ace0d73f19e",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "create Alpaca sell order on profit > 1",
        "func": "let qty = 0\n\nlet ticker = msg.symbol\nlet price = msg.price\nlet profit = msg.profit\nlet side = msg.side\nqty = msg.qty \nqty = +qty\n\n\n\nconst ld = new Date();\nlet text = ld.toLocaleTimeString();\nlet localtime = ld.toLocaleTimeString();\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n//node.warn(\"Ticker: \" +ticker+ \" Price: \" +price+ \" Profit: \" +profit+ \" Side: \" +side+ \" Qty: \" +qty)\nlet temp = ''\n\nif ( (qty > 0) && (profit > 1) ){\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": \"market\",\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"day\"\n    };\n}\n\n//node.warn(temp)\nmsg.payload = temp\nlet id = (\"Localtime: \" +localtime+ \" Ticker: \" + ticker + \" Price: \" + price + \" Profit: \" + profit + \" Side: \" + side + \" Qty: \" + qty)\nlet id2 = ''\nmsg.sql = \"insert into log_tqqq (id, id2) values ('\" + id + \"','\" + id2 + \"');\" \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 980,
        "wires": [
            [
                "36f6ecf981867554"
            ]
        ]
    },
    {
        "id": "25c7f17048c1df97",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 960,
        "y": 900,
        "wires": [
            [
                "10d3eb3cc01f77ee"
            ]
        ]
    },
    {
        "id": "30e7b6ea8ade0d13",
        "type": "delay",
        "z": "0cb13c1ff3ddec26",
        "name": "",
        "pauseType": "delay",
        "timeout": "750",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 790,
        "y": 900,
        "wires": [
            [
                "25c7f17048c1df97"
            ]
        ]
    },
    {
        "id": "df296737dfea97a8",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 1040,
        "wires": [
            [
                "9b871d0c73b331eb"
            ]
        ]
    },
    {
        "id": "bfd881b39176a447",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "create log table",
        "func": "let sql = \"create table IF NOT EXISTS log_tqqq (id VARCHAR(5000), id2 VARCHAR(5000))\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1040,
        "wires": [
            [
                "df296737dfea97a8"
            ]
        ]
    },
    {
        "id": "9b871d0c73b331eb",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "insert into log",
        "func": "let sql = msg.sql\nmsg.query = sql\n//node.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1040,
        "wires": [
            [
                "041091dce2a04659"
            ]
        ]
    },
    {
        "id": "041091dce2a04659",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1100,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "10d3eb3cc01f77ee",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "payload > 0",
        "func": "node.warn(msg.payload.length);\nif (msg.payload.length > 0)\n{\n    msg.payload\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 900,
        "wires": [
            [
                "1c642f3d8a93480b"
            ]
        ]
    },
    {
        "id": "def06c69b98cbd81",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "get values",
        "func": "let symbol = msg.payload[\"symbol\"]\nlet qty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet side = msg.payload[\"side\"]\nlet price = msg.payload[\"current_price\"]\n\nmsg.symbol = symbol\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\nmsg.price = price\n\n//node.warn(\"Symbol: \" +symbol+ \" Qty: \" +qty+ \" Profit: \" +profit+ \" Side: \" +side+ \" Price: \" +price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 900,
        "wires": [
            [
                "5d7e8ace0d73f19e"
            ]
        ]
    },
    {
        "id": "1c642f3d8a93480b",
        "type": "split",
        "z": "0cb13c1ff3ddec26",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1250,
        "y": 900,
        "wires": [
            [
                "def06c69b98cbd81"
            ]
        ]
    },
    {
        "id": "36f6ecf981867554",
        "type": "alpaca-order",
        "z": "0cb13c1ff3ddec26",
        "conf": "e535f42f1df1b25f",
        "x": 630,
        "y": 980,
        "wires": [
            [
                "4f6a3b8532e55bd8"
            ]
        ]
    },
    {
        "id": "14bb0d79b8874506",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1100,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "4f6a3b8532e55bd8",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 980,
        "wires": [
            [
                "14bb0d79b8874506"
            ]
        ]
    },
    {
        "id": "edb3753fba129ec4",
        "type": "change",
        "z": "0cb13c1ff3ddec26",
        "name": "reset msgs to 0",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "qty",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "side",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 660,
        "wires": [
            [
                "5b0fc6db7f338b6c"
            ]
        ]
    },
    {
        "id": "0d1bdecc77544c36",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 980,
        "y": 660,
        "wires": [
            [
                "889520721bfaac73"
            ]
        ]
    },
    {
        "id": "5b0fc6db7f338b6c",
        "type": "delay",
        "z": "0cb13c1ff3ddec26",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 660,
        "wires": [
            [
                "0d1bdecc77544c36"
            ]
        ]
    },
    {
        "id": "889520721bfaac73",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "payload = 0",
        "func": "//node.warn(msg.payload.length);\nif (msg.payload.length == 0)\n{\n    msg.payload\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 660,
        "wires": [
            [
                "a5b1de8c12311469"
            ]
        ]
    },
    {
        "id": "ca4c33a1fb084b31",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4d47f76d6ba3653f",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "create positions_live table",
        "func": "msg.query = \"create table IF NOT EXISTS positions_live (id BIGINT, asset_id VARCHAR(100), portfolioname VARCHAR(100), symbol VARCHAR(10), name VARCHAR(500), account VARCHAR(10), exchange VARCHAR(100), asset_class VARCHAR(100), asset_marginable VARCHAR(100), qty FLOAT, avg_entry_price FLOAT, side VARCHAR(100), market_value FLOAT, cost_basis FLOAT, unrealized_pl FLOAT, unrealized_plpc FLOAT, unrealized_intraday_pl FLOAT, unrealized_intraday_plpc FLOAT, current_price FLOAT, lastday_price FLOAT, change_today FLOAT, qty_available FLOAT, status VARCHAR(10), orderid VARCHAR(100))\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "ca4c33a1fb084b31"
            ]
        ]
    },
    {
        "id": "216193b69bf7cf04",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "724fe6c9c08e4119",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "create positions_paper table",
        "func": "msg.query = \"create table IF NOT EXISTS positions_paper (id BIGINT, asset_id VARCHAR(100), portfolioname VARCHAR(100), symbol VARCHAR(10), name VARCHAR(500), account VARCHAR(10), exchange VARCHAR(100), asset_class VARCHAR(100), asset_marginable VARCHAR(100), qty FLOAT, avg_entry_price FLOAT, side VARCHAR(100), market_value FLOAT, cost_basis FLOAT, unrealized_pl FLOAT, unrealized_plpc FLOAT, unrealized_intraday_pl FLOAT, unrealized_intraday_plpc FLOAT, current_price FLOAT, lastday_price FLOAT, change_today FLOAT, qty_available FLOAT, status VARCHAR(10), orderid VARCHAR(100))\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "216193b69bf7cf04"
            ]
        ]
    },
    {
        "id": "18b570a3cedd03bb",
        "type": "inject",
        "z": "0cb13c1ff3ddec26",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "4d47f76d6ba3653f"
            ]
        ]
    },
    {
        "id": "ce293bbbe702938e",
        "type": "inject",
        "z": "0cb13c1ff3ddec26",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "724fe6c9c08e4119"
            ]
        ]
    },
    {
        "id": "1c0ab0213f8c2157",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "truncate positions_paper",
        "func": "msg.query = \"truncate table positions_paper\"\n//msg.query = \"drop table positions\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 340,
        "wires": [
            [
                "76369f3d999fb512"
            ]
        ]
    },
    {
        "id": "76369f3d999fb512",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 340,
        "wires": [
            [
                "3e96a062f101a762"
            ]
        ]
    },
    {
        "id": "7ed03be2513e8f34",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "insert PAPER account vaues into positions",
        "func": "//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\nlet sql = \"INSERT INTO positions_paper (account, asset_id, symbol, exchange, asset_class\"\nsql += \", asset_marginable, qty, avg_entry_price, side, market_value, cost_basis, unrealized_pl, unrealized_plpc\"\nsql += \", unrealized_intraday_pl, unrealized_intraday_plpc, current_price, lastday_price, change_today, qty_available) values \"\nsql += \"('live', '\" + asset_id + \"','\" + symbol + \"','\" + exchange + \"','\" + asset_class + \"','\" + asset_marginable + \"','\" + qty + \"','\" + avg_entry_price + \"','\" + side + \"','\" + market_value + \"','\" + cost_basis + \"','\" + unrealized_pl + \"','\" + unrealized_plpc + \"','\" + unrealized_intraday_pl + \"','\" + unrealized_intraday_plpc + \"','\" + current_price + \"','\" + lastday_price + \"','\" + change_today + \"','\" + qty_available + \"');\"\n\n\nmsg.query = sql\n//node.warn('live')\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 340,
        "wires": [
            [
                "165a635bd8878537"
            ]
        ]
    },
    {
        "id": "3e96a062f101a762",
        "type": "alpaca-position-query",
        "z": "0cb13c1ff3ddec26",
        "conf": "e535f42f1df1b25f",
        "x": 730,
        "y": 340,
        "wires": [
            [
                "24f1b6fede61a50d"
            ]
        ]
    },
    {
        "id": "165a635bd8878537",
        "type": "postgresql",
        "z": "0cb13c1ff3ddec26",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1400,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "24f1b6fede61a50d",
        "type": "split",
        "z": "0cb13c1ff3ddec26",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 340,
        "wires": [
            [
                "7ed03be2513e8f34"
            ]
        ]
    },
    {
        "id": "0303eb4de9543d04",
        "type": "comment",
        "z": "0cb13c1ff3ddec26",
        "name": "Create positions tables for storing one second values",
        "info": "",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "2fa682560466d446",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "select from positions_paper",
        "func": "let symbol = flow.get(\"ticker\")\nlet sql = \"select * from positions_paper where symbol = '\" +symbol+ \"';\"\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "edb3753fba129ec4"
            ]
        ]
    },
    {
        "id": "79ab9e77f777952b",
        "type": "function",
        "z": "0cb13c1ff3ddec26",
        "name": "select from positions_paper",
        "func": "let symbol = flow.get(\"ticker\")\nlet sql = \"select * from positions_paper where symbol = '\" +symbol+ \"';\"\nmsg.query = sql\n//node.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 900,
        "wires": [
            [
                "0c9f8cb58b365dcd"
            ]
        ]
    },
    {
        "id": "a2e54c4fa9f1672b",
        "type": "comment",
        "z": "0cb13c1ff3ddec26",
        "name": "Create buy order when position is empty",
        "info": "",
        "x": 220,
        "y": 620,
        "wires": []
    },
    {
        "id": "43b2140e0384acb7",
        "type": "comment",
        "z": "0cb13c1ff3ddec26",
        "name": "optional log file",
        "info": "",
        "x": 520,
        "y": 780,
        "wires": []
    },
    {
        "id": "c22a24e889231edb",
        "type": "comment",
        "z": "0cb13c1ff3ddec26",
        "name": "Create sell order when position > 0",
        "info": "",
        "x": 200,
        "y": 840,
        "wires": []
    },
    {
        "id": "81eee587da2febbd",
        "type": "comment",
        "z": "0cb13c1ff3ddec26",
        "name": "optional log file",
        "info": "",
        "x": 420,
        "y": 1040,
        "wires": []
    },
    {
        "id": "93d409ef38947fd8",
        "type": "comment",
        "z": "0cb13c1ff3ddec26",
        "name": "live account",
        "info": "",
        "x": 710,
        "y": 220,
        "wires": []
    },
    {
        "id": "9e9fd8be320775dd",
        "type": "comment",
        "z": "0cb13c1ff3ddec26",
        "name": "paper account",
        "info": "",
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "bffc5bacd6d7a24f",
        "type": "change",
        "z": "0cb13c1ff3ddec26",
        "name": "flow.ticker",
        "rules": [
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "TQQQ",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "1ac8bc4212a7b8f0",
        "type": "inject",
        "z": "0cb13c1ff3ddec26",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 460,
        "wires": [
            [
                "bffc5bacd6d7a24f"
            ]
        ]
    },
    {
        "id": "e4cfa13b811f2267",
        "type": "comment",
        "z": "0cb13c1ff3ddec26",
        "name": "select ticker to trade",
        "info": "",
        "x": 150,
        "y": 420,
        "wires": []
    },
    {
        "id": "60adf6e4b4e52eef",
        "type": "inject",
        "z": "0cb13c1ff3ddec26",
        "name": "Every min",
        "props": [],
        "repeat": "",
        "crontab": "*/1 10-15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "2fa682560466d446",
                "79ab9e77f777952b"
            ]
        ]
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PKHV5JYVLJZKJL9YSFYA",
        "paper": true
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKA7ZL2KR9705ERT2BCO",
        "paper": true
    }
]