[
    {
        "id": "bb774fa77493e4a7",
        "type": "tab",
        "label": "Trade on Lasttrades-TSLA",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ea85858e50828467",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "display avg",
        "func": "msg.price = flow.get(\"price\")\nmsg.pos = flow.get(\"pos\")\nmsg.profit = flow.get(\"profit\")\n\n\nif ( msg.price == null) { msg.price = 0}\nif (msg.pos == null) { msg.pos = 0 }\nif (msg.profit == null) { msg.profit = 0 }\n\n\nlet avg = msg.moving_avg\navg = avg.toFixed(2)\nlet symbol = msg.symbol\nmsg.price = flow.get(\"price\")\nlet diff = (msg.price - avg) \nmsg.moving_avg = avg\nmsg.diff = diff\n\n\nvar unixTimestamp = msg.ux;\nvar d = new Date(unixTimestamp);\nlet lt = d.toLocaleTimeString(\"en-US\");\n\n\n\nnode.warn(\"Ticker: \" + symbol + \" Moving Avg: \" + avg + \" Current Price: \" + msg.price + \" Diff: \" + diff+ \" Position: \" +msg.pos+ \" Profit: \" +msg.profit)\nmsg.query = \"insert into tsla_lasttrade (datetime, value, position, profit, price) values ('\" + lt + \"',\" + diff + \",\" + msg.pos + \",\" + msg.profit + \",\" + msg.price + \");\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 380,
        "wires": [
            [
                "17798c25d6ec3285",
                "cb985055fb6431e9"
            ]
        ]
    },
    {
        "id": "17798c25d6ec3285",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "create Alpaca buy or sell order ",
        "func": "let alpaca_ticker = msg.symbol\nlet algo_name = msg.algo_name\nlet price = msg.price\nlet qty = msg.size\nlet diff = msg.diff\nlet pos = msg.pos\nlet profit = msg.profit\nprice = +price\nprice = price.toFixed(2)\n\n\n//node.warn(\"Algoname: \" +algo_name+ \" Ticker: \" +alpaca_ticker+ \" Qty: \" +qty+ \" Position: \" +pos+ \" Price: \" +price+ \" Diff: \" +diff)\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = alpaca_ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\nlet temp = ''\nlet side = 'buy'\n\n\n// CASE 1: Holding More than 100 Shares Short \n\nif (pos < -100) {\n    side = 'buy'\n    qty = (pos * -1)\n    node.warn(\"Case 1: Buy to cover > 100 shares\")\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'market',\n        \"client_order_id\": client_order_id,\n       // \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 28\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 24\n\n\n// CASE 2: Holding More than 100 Shares Long \n\nelse if (pos > 100) {\n    side = 'sell'\n    node.warn(\"Case 2: Buy to cover > 100 shares\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'market',\n        \"client_order_id\": client_order_id,\n       // \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 51\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 48\n\n\n// CASE 3: No position held by. Buy if diff < -.10\n\nif (( diff < -0.10) && (pos == 0)) {\n    node.warn(\"Case 3: Position = 0. Buy 100 shares as price below SMA\")\n\n    side = 'buy'\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 72\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 69\n\n// CASE 4 No position held. Diff indicates sell\n\nelse if ((diff > 0.10) && (pos == 0)) {\n    side = 'sell'\n    node.warn(\"Case 4: Position = 0. Sell 100 shares as price above EMA\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 93\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 90\n\n\n// CASE 5: Profitable and Holding Long Position \n\nelse if ( (profit > 5) && (pos > 0) ) {\n    side = 'sell'\n    qty = pos\n    node.warn(\"Case 5: Take Profit by selling 100 shares\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; // line 116\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} // line 112\n\n// CASE 6: Profitable and Holding Short Position \n\n\nelse if ((profit > 2) && (pos < 0)) {\n    side = 'buy'\n    qty = (pos * -1)\n    node.warn(\"Case 6: Take Profit by covering 100 shares\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    }; \n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n} \n\n\n\n// CASE 7: Unprofitable and Holding Long Position \n\n\nelse if ((profit < -0.50) && (pos > 0)) {\n    side = 'sell'\n    node.warn(\"Case 7: Cut losses  by selling shares\")\n    qty = pos\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n}\n\n\n\n// CASE 8: Unprofitable and Holding Short Position \n\n\nelse if ((profit < -1 ) && (pos < 0)) {\n    side = 'buy'\n    qty = (pos * -1)\n    node.warn(\"Case 8: Cut loss by buying 100 shares\")\n\n    temp = {\n        \"symbol\": alpaca_ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": 'limit',\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    return msg;\n}\n\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 380,
        "wires": [
            [
                "8f332716f5a097e6"
            ]
        ]
    },
    {
        "id": "cbbbdc1ad4a35e2a",
        "type": "comment",
        "z": "bb774fa77493e4a7",
        "name": "Sample Lasttrades Flow Trading TSLA",
        "info": "",
        "x": 230,
        "y": 40,
        "wires": []
    },
    {
        "id": "94d47a621826653a",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "trading interval ",
        "func": "let d = new Date();\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay();\nlet sec = d.getSeconds();\n\n//node.warn(\"Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n//if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "188e8b992c9aed8f",
                "d4a3656c334f80e2"
            ]
        ]
    },
    {
        "id": "8e65bcea1e8c2275",
        "type": "inject",
        "z": "bb774fa77493e4a7",
        "name": "GO",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "94d47a621826653a"
            ]
        ]
    },
    {
        "id": "188e8b992c9aed8f",
        "type": "delay",
        "z": "bb774fa77493e4a7",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 120,
        "y": 300,
        "wires": [
            [
                "9783c77cd3c7676a"
            ]
        ]
    },
    {
        "id": "8212523c941c1da4",
        "type": "inject",
        "z": "bb774fa77493e4a7",
        "name": "GO",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "209d73538116d353"
            ]
        ]
    },
    {
        "id": "cadb97a989aa5f78",
        "type": "alpaca-position-query",
        "z": "bb774fa77493e4a7",
        "conf": "810ce3520dc18040",
        "x": 510,
        "y": 140,
        "wires": [
            [
                "83e454d79424ce5c"
            ]
        ]
    },
    {
        "id": "5d7dd9b91c450d26",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "create msg.vars for ticker",
        "func": "let ticker = flow.get(\"ticker\")\nticker = 'TSLA'\n\nif (msg.payload[\"symbol\"] == ticker ){\n    \n//let id = msg.payload[\"id\"]\nlet asset_id = msg.payload[\"asset_id\"]\n//let portfolioname = msg.payload[\"portfolioname\"]\nlet symbol = msg.payload[\"symbol\"]\n//let name = msg.payload[\"name\"]\n//let account = msg.payload[\"account\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n//let status = msg.payload[\"status\"]\n//let orderid = msg.payload[\"orderid\"]\n\n//node.warn(qty)\nmsg.qty = qty\nmsg.profit = unrealized_pl\nmsg.ticker = symbol\nmsg.price = current_price\n//node.warn(\"Ticker: \" + msg.ticker + \" Price: \" + msg.price + \" Profit: \" + msg.profit + \" Buy Qty: \" + msg.qty)\nreturn msg;\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "885ecf5b501772c2"
            ]
        ]
    },
    {
        "id": "83e454d79424ce5c",
        "type": "split",
        "z": "bb774fa77493e4a7",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 140,
        "wires": [
            [
                "5d7dd9b91c450d26"
            ]
        ]
    },
    {
        "id": "885ecf5b501772c2",
        "type": "change",
        "z": "bb774fa77493e4a7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pos",
                "pt": "flow",
                "to": "qty",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "profit",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "209d73538116d353",
        "type": "change",
        "z": "bb774fa77493e4a7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pos",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "profit",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 140,
        "wires": [
            [
                "cadb97a989aa5f78"
            ]
        ]
    },
    {
        "id": "1851677abb53838f",
        "type": "comment",
        "z": "bb774fa77493e4a7",
        "name": "set ticker on line 2",
        "info": "",
        "x": 850,
        "y": 100,
        "wires": []
    },
    {
        "id": "fa03844df360c9fb",
        "type": "http in",
        "z": "bb774fa77493e4a7",
        "name": "/api/download_tsla",
        "url": "/api/download_tsla",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "15db97ca8b7d4c9e"
            ]
        ]
    },
    {
        "id": "59c9f62619309f7c",
        "type": "http response",
        "z": "bb774fa77493e4a7",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 950,
        "y": 580,
        "wires": []
    },
    {
        "id": "58c14687df4463e4",
        "type": "csv",
        "z": "bb774fa77493e4a7",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 670,
        "y": 580,
        "wires": [
            [
                "fc799f602474add0"
            ]
        ]
    },
    {
        "id": "15db97ca8b7d4c9e",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "export query",
        "func": "msg.query = \"select * from orders_live where symbol like 'TSLA';\"\n//msg.query = \"select * from orders_live where symbol like 'TSLA' and created_at like '2023-05-11%';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 580,
        "wires": [
            [
                "32a8f06652283e01"
            ]
        ]
    },
    {
        "id": "fc799f602474add0",
        "type": "file",
        "z": "bb774fa77493e4a7",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 580,
        "wires": [
            [
                "59c9f62619309f7c"
            ]
        ]
    },
    {
        "id": "32a8f06652283e01",
        "type": "postgresql",
        "z": "bb774fa77493e4a7",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 580,
        "wires": [
            [
                "58c14687df4463e4"
            ]
        ]
    },
    {
        "id": "8841040e542338dc",
        "type": "comment",
        "z": "bb774fa77493e4a7",
        "name": "The  sample size is the key variable for SMA of lasttrades",
        "info": "",
        "x": 710,
        "y": 40,
        "wires": []
    },
    {
        "id": "8f332716f5a097e6",
        "type": "alpaca-order",
        "z": "bb774fa77493e4a7",
        "conf": "810ce3520dc18040",
        "x": 650,
        "y": 380,
        "wires": [
            [
                "60852165bffd1b57"
            ]
        ]
    },
    {
        "id": "07be10a38928dd55",
        "type": "change",
        "z": "bb774fa77493e4a7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "orderid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d4a3656c334f80e2",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "prepare cancel order",
        "func": "let order_id = flow.get(\"orderid\")\nnode.warn(\"Cancelling orderid: \" +order_id)\n\nmsg.payload =  { order_id }\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 240,
        "wires": [
            [
                "d7d81c766239e512"
            ]
        ]
    },
    {
        "id": "d7d81c766239e512",
        "type": "alpaca-orders-close-one",
        "z": "bb774fa77493e4a7",
        "conf": "810ce3520dc18040",
        "order_id": "",
        "name": "",
        "x": 790,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "60852165bffd1b57",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n//let limit_price = msg.payload[\"limit_price\"]\nlet limit_price = flow.get(\"price\")\n\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif ( source === null){ source = 0}\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, limit_price, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + limit_price + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours + \"'); \" \n\nmsg.query = sql\n//node.warn(msg.query)\nmsg.id = id\nnode.warn(\"set orderid: \" +msg.id)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 380,
        "wires": [
            [
                "07be10a38928dd55"
            ]
        ]
    },
    {
        "id": "bf361e3c225b4297",
        "type": "comment",
        "z": "bb774fa77493e4a7",
        "name": "download csv",
        "info": "",
        "x": 130,
        "y": 540,
        "wires": []
    },
    {
        "id": "39f1e8f0e75823a3",
        "type": "inject",
        "z": "bb774fa77493e4a7",
        "name": "every sec",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 780,
        "wires": [
            [
                "2f209cabf27b992f"
            ]
        ]
    },
    {
        "id": "34a0a93f49b625e7",
        "type": "comment",
        "z": "bb774fa77493e4a7",
        "name": "Get current price of the asset from Polygon",
        "info": "",
        "x": 200,
        "y": 720,
        "wires": []
    },
    {
        "id": "d8fb64d03950890a",
        "type": "function-npm",
        "z": "bb774fa77493e4a7",
        "name": "Get lasttrades",
        "func": "let symbol = 'TSLA'\nlet cnt = 1 // last trade\n\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 780,
        "wires": [
            [
                "0e04bc52c9d79a72"
            ]
        ]
    },
    {
        "id": "0e04bc52c9d79a72",
        "type": "polygon-last-trade-v3",
        "z": "bb774fa77493e4a7",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 680,
        "y": 780,
        "wires": [
            [
                "cebe95423c046688"
            ]
        ]
    },
    {
        "id": "cebe95423c046688",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "display price",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet ux = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\nmsg.price = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 780,
        "wires": [
            [
                "be8a161be50e03f0"
            ]
        ]
    },
    {
        "id": "be8a161be50e03f0",
        "type": "change",
        "z": "bb774fa77493e4a7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "flow",
                "to": "price",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "0c2cde4c6e340bbb",
        "type": "comment",
        "z": "bb774fa77493e4a7",
        "name": "set ticker on line 1",
        "info": "",
        "x": 490,
        "y": 740,
        "wires": []
    },
    {
        "id": "2f209cabf27b992f",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "trading interval ",
        "func": "let d = new Date();\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay();\nlet sec = d.getSeconds();\n\n//node.warn(\"Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n//if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 780,
        "wires": [
            [
                "d8fb64d03950890a"
            ]
        ]
    },
    {
        "id": "03d15d467292c15b",
        "type": "comment",
        "z": "bb774fa77493e4a7",
        "name": "Enable frontend reporting",
        "info": "",
        "x": 130,
        "y": 860,
        "wires": []
    },
    {
        "id": "3829b20a3f6f6c8b",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "define values required for adding trade to portfolio",
        "func": "// create a unique algo_id with current unixtime\nlet d = Date.now()\n\nmsg.id = d\nmsg.login = global.get(\"login\")\nmsg.ticker = flow.get(\"symbol\")\nmsg.algo_name = flow.get(\"algo_name\")\nmsg.asset_class = 'stocks'\nmsg.number = 1\nmsg.target = ''\nmsg.account = flow.get(\"account\")\nmsg.psize = flow.get(\"psize\")\nmsg.status = 'running'\nmsg.algo_type = 'intraday'\nmsg.benchmark = 'SPY'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 920,
        "wires": [
            [
                "d2fe0a5782809ca2"
            ]
        ]
    },
    {
        "id": "62fa743523e93843",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "delete from tickers",
        "func": "let id = msg.id\nlet symbol = msg.ticker\nlet portfolioname = msg.algo_name\nmsg.query = \"delete from tickers_\" +msg.account+ \" where symbol like '\" +symbol+ \"';\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 980,
        "wires": [
            [
                "be501981ebdc052d"
            ]
        ]
    },
    {
        "id": "be501981ebdc052d",
        "type": "postgresql",
        "z": "bb774fa77493e4a7",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 980,
        "wires": [
            [
                "fdd052dafb3c5a5e"
            ]
        ]
    },
    {
        "id": "d2fe0a5782809ca2",
        "type": "delay",
        "z": "bb774fa77493e4a7",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1000,
        "y": 920,
        "wires": [
            [
                "ba5162a730a8d753"
            ]
        ]
    },
    {
        "id": "9e0b74740d58e944",
        "type": "postgresql",
        "z": "bb774fa77493e4a7",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 220,
        "y": 980,
        "wires": [
            [
                "62fa743523e93843"
            ]
        ]
    },
    {
        "id": "3b6f4a874f785393",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "delete existing algo",
        "func": "msg.algo_name = flow.get(\"algo_name\")\nmsg.query = \"delete from algos where algo_name = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 920,
        "wires": [
            [
                "82b9a77964d1658f"
            ]
        ]
    },
    {
        "id": "82b9a77964d1658f",
        "type": "postgresql",
        "z": "bb774fa77493e4a7",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 440,
        "y": 920,
        "wires": [
            [
                "3829b20a3f6f6c8b"
            ]
        ]
    },
    {
        "id": "fdd052dafb3c5a5e",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "insert into tickers_paper",
        "func": "let id = msg.id\nlet symbol = msg.symbol\nlet portfolioname = msg.algo_name\nmsg.query = \"insert into tickers_\" +msg.account+ \" (id, symbol, portfolioname) values (\" + id + \",'\" + symbol + \"', '\" + portfolioname + \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 980,
        "wires": [
            [
                "6bde88692ae63c2a"
            ]
        ]
    },
    {
        "id": "6bde88692ae63c2a",
        "type": "postgresql",
        "z": "bb774fa77493e4a7",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "ba5162a730a8d753",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "add values to algos table",
        "func": "let id = msg.id\nlet ticker = msg.tickers\nlet algo_name = msg.algo_name\nlet login = msg.login\nlet asset_class = msg.asset_class\nlet number = msg.number\nlet target = msg.target\nlet account = msg.account\nlet psize = msg.psize\nlet algo_type = msg.algo_type\nlet status = msg.status\nlet benchmark = msg.benchmark\n\nlet benchmark_start = global.get(\"spy_current\")\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 920,
        "wires": [
            [
                "9e0b74740d58e944"
            ]
        ]
    },
    {
        "id": "05f95e317ac1fa74",
        "type": "inject",
        "z": "bb774fa77493e4a7",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 920,
        "wires": [
            [
                "3b6f4a874f785393"
            ]
        ]
    },
    {
        "id": "9783c77cd3c7676a",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "Store Flow Variables",
        "func": "let d = new Date().toJSON().slice(0, 10);\n//node.warn(d)\n\n// enter desired values below\nmsg.symbol = 'TSLA'\nmsg.window = 1000 // lookback window\nmsg.cnt = 1 // get most recent value\nmsg.timestamp = d\n//msg.timespan = 'minute'\nmsg.algo_name = \"Trade TSLA on Last Trade SMA [LIVE]\"\nmsg.psize = 170 // size of portfolio\nmsg.size = 1 // shares to trade\nmsg.account = 'live'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "0ac72e8aa9303513"
            ]
        ]
    },
    {
        "id": "9172ce60eb7c7017",
        "type": "comment",
        "z": "bb774fa77493e4a7",
        "name": "set orders_live or order_paper",
        "info": "",
        "x": 420,
        "y": 540,
        "wires": []
    },
    {
        "id": "f38669fda59c1185",
        "type": "function-npm",
        "z": "bb774fa77493e4a7",
        "name": "Get lasttrades",
        "func": "let symbol = msg.symbol\nlet cnt = msg.window\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 680,
        "y": 300,
        "wires": [
            [
                "03d38d68c577a60b"
            ]
        ]
    },
    {
        "id": "03d38d68c577a60b",
        "type": "polygon-last-trade-v3",
        "z": "bb774fa77493e4a7",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 880,
        "y": 300,
        "wires": [
            [
                "55bcf663b6b6d7a7"
            ]
        ]
    },
    {
        "id": "55bcf663b6b6d7a7",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = 0\nlet siptime = 0\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    siptime = item.sip_timestamp;\n    prices.push(price);\n      \n//    node.warn(price)\n\n}\n\nmsg.ux = siptime / 1000000000\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "23c1e95e73a172e0"
            ]
        ]
    },
    {
        "id": "23c1e95e73a172e0",
        "type": "calculator",
        "z": "bb774fa77493e4a7",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "moving_avg",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": "0",
        "x": 1340,
        "y": 300,
        "wires": [
            [
                "ea85858e50828467"
            ]
        ]
    },
    {
        "id": "0ac72e8aa9303513",
        "type": "change",
        "z": "bb774fa77493e4a7",
        "name": "Store flow vars",
        "rules": [
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "size",
                "pt": "flow",
                "to": "size",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "symbol",
                "pt": "flow",
                "to": "symbol",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 300,
        "wires": [
            [
                "f38669fda59c1185"
            ]
        ]
    },
    {
        "id": "63af4f93e822e7fb",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "create table tsla_lasttrade",
        "func": "msg.query = \"create table IF NOT EXISTS tsla_lasttrade (datetime VARCHAR(40), value FLOAT, position FLOAT, profit FLOAT, price FLOAT)\"\n//msg.query = \"select * from amzn_ema;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 440,
        "wires": [
            [
                "cb985055fb6431e9"
            ]
        ]
    },
    {
        "id": "6cabeb347fd07920",
        "type": "inject",
        "z": "bb774fa77493e4a7",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 70,
        "y": 440,
        "wires": [
            [
                "63af4f93e822e7fb"
            ]
        ]
    },
    {
        "id": "cb985055fb6431e9",
        "type": "postgresql",
        "z": "bb774fa77493e4a7",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "7280ab0ea3f9d555",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "function 31",
        "func": "// create a unique clientid with unixtime\nlet d = Date.now()\nnode.warn(d)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 480,
        "wires": [
            [
                "43627d8b87b38399"
            ]
        ]
    },
    {
        "id": "43627d8b87b38399",
        "type": "debug",
        "z": "bb774fa77493e4a7",
        "name": "debug 396",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 480,
        "wires": []
    },
    {
        "id": "6bb8c6e8f5327f5d",
        "type": "inject",
        "z": "bb774fa77493e4a7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 700,
        "y": 480,
        "wires": [
            [
                "7280ab0ea3f9d555"
            ]
        ]
    },
    {
        "id": "be88e35caf409286",
        "type": "http in",
        "z": "bb774fa77493e4a7",
        "name": "/api/download_tsla_lasttrade",
        "url": "/api/download_tsla_lasttrade",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 620,
        "wires": [
            [
                "f0feb5bc8a967e3e"
            ]
        ]
    },
    {
        "id": "3eae5f2d4d5be248",
        "type": "http response",
        "z": "bb774fa77493e4a7",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 970,
        "y": 620,
        "wires": []
    },
    {
        "id": "85c9e2c0b5e623f6",
        "type": "csv",
        "z": "bb774fa77493e4a7",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 690,
        "y": 620,
        "wires": [
            [
                "64eebf618d99fb85"
            ]
        ]
    },
    {
        "id": "f0feb5bc8a967e3e",
        "type": "function",
        "z": "bb774fa77493e4a7",
        "name": "export query",
        "func": "msg.query = \"select * from tsla_lasttrade;\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "d51595401ede6a64"
            ]
        ]
    },
    {
        "id": "64eebf618d99fb85",
        "type": "file",
        "z": "bb774fa77493e4a7",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 620,
        "wires": [
            [
                "3eae5f2d4d5be248"
            ]
        ]
    },
    {
        "id": "d51595401ede6a64",
        "type": "postgresql",
        "z": "bb774fa77493e4a7",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 620,
        "wires": [
            [
                "85c9e2c0b5e623f6"
            ]
        ]
    },
    {
        "id": "810ce3520dc18040",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "AK7TS1878RQGLSTHFE7H",
        "paper": false
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]