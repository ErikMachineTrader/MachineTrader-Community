[
    {
        "id": "9b89f01a76bfb268",
        "type": "tab",
        "label": "Trade Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "04a1f6a5f310a027",
        "type": "function",
        "z": "9b89f01a76bfb268",
        "name": "place limit order ",
        "func": "let id = msg.id\nlet name = msg.name // name of the strategy\nlet ticker = msg.symbol\nlet tickertype = msg.tickertype\nlet price = msg.price\nlet number = msg.number // number of tickers in portfolio \nlet psize = msg.portfolio_size\nlet account = msg.account\n\n\nlet localtime = new Date();\n\n\nif (tickertype == 'crypto') {\n    ticker = ticker.replace(\"X:\", \"\");\n    ticker = ticker.replace(\"USD\", \"/USD\");  // this works only if the currency is USD\n    price =  +price + +1 // price has to be $1 greater for cryptos\n}\n\n\n// use this to balance the portfolio equally\nlet qty = (psize / number) / price\nqty = Math.round(qty) // to get whole numbers \nnode.warn(\"Portfolioid: \" +id+ \" Ticker: \" + ticker + \" Price: \" + price + \" Portfolio Size: \" + psize + \" Qty: \" + qty + \" Number:\" +number)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n// add the order to the portfolio table\nlet sql = \"replace into portfolio (account,date,portfolioid,name,ticker,tickertype, clientorderid,price,qty) values ('\" + account + \"', '\" + localtime + \"',\" + id + \",'\" + name + \"','\" + ticker + \"','\" +tickertype+ \"','\" + client_order_id + \"','\" +price+ \"',\" +qty+ \");\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\n// create a order for Alpaca\n    let temp = ''\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty, \n        \"side\": \"buy\",\n        \"type\": \"market\",\n  //      \"limit_price\": price,\n        \"client_order_id\": client_order_id,\n        \"time_in_force\": \"gtc\"\n    };\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "8c1ae960fac9ea68",
                "9d7c9785310ea3e7",
                "879409dfab73f738"
            ]
        ]
    },
    {
        "id": "bcb9d5c09cd7b6b6",
        "type": "function",
        "z": "9b89f01a76bfb268",
        "name": "define values required for adding trade to portfolo",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet ticker = 'X:ETHUSD'\nlet name = \"Trade ETHUSD Against Moving Average\"\nlet tickertype = 'crypto'\nlet number = 1 // number of tickers in portfolio\nlet account = 'paper'\nlet psize = 10000 // size of portfolio\n\nmsg.id = id\nmsg.symbol = ticker\nmsg.name = name\nmsg.tickertype = tickertype\nmsg.number = number\nmsg.account = account\nmsg.portfolio_size = psize\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 100,
        "wires": [
            [
                "e575b57e95be717b"
            ]
        ]
    },
    {
        "id": "e575b57e95be717b",
        "type": "function-npm",
        "z": "9b89f01a76bfb268",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\nnode.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 160,
        "wires": [
            [
                "566287c87b8fe217"
            ]
        ]
    },
    {
        "id": "ab0cf3317b092e69",
        "type": "function",
        "z": "9b89f01a76bfb268",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\nnode.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "04a1f6a5f310a027"
            ]
        ]
    },
    {
        "id": "566287c87b8fe217",
        "type": "polygon-last-trade-v3",
        "z": "9b89f01a76bfb268",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 160,
        "wires": [
            [
                "ab0cf3317b092e69"
            ]
        ]
    },
    {
        "id": "fcc0437667919cd7",
        "type": "inject",
        "z": "9b89f01a76bfb268",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "bcb9d5c09cd7b6b6",
                "365bd5425634481a"
            ]
        ]
    },
    {
        "id": "9d7c9785310ea3e7",
        "type": "alpaca-order",
        "z": "9b89f01a76bfb268",
        "conf": "e535f42f1df1b25f",
        "x": 530,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "879409dfab73f738",
        "type": "sqlite",
        "z": "9b89f01a76bfb268",
        "mydb": "68ede6fdaec7cef6",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 520,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "0826644897f2e6e2",
        "type": "function",
        "z": "9b89f01a76bfb268",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"5\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 420,
        "wires": [
            [
                "23c0dc11520195ab"
            ]
        ]
    },
    {
        "id": "23c0dc11520195ab",
        "type": "alpaca-query-order",
        "z": "9b89f01a76bfb268",
        "conf": "e535f42f1df1b25f",
        "x": 640,
        "y": 420,
        "wires": [
            [
                "776aba0694d4bc8e"
            ]
        ]
    },
    {
        "id": "efda3852e31a25c6",
        "type": "function",
        "z": "9b89f01a76bfb268",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = flow.get(\"clientorderid\")\n\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((status == 'filled') && (clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  filled_type = '\" +type+ \"', filled_side = '\" + side + \"', filled_tif = '\" + time_in_force + \"', filled_status = '\" + status + \"', filled_at = '\" + filled_at + \"', filled_price = '\" + filled_avg_price + \"', filled_qty = '\" + filled_qty + \"', position = \" +position+ \" where clientorderid = '\" +clientorderid+ \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 480,
        "wires": [
            [
                "43fa0fba6b927197"
            ]
        ]
    },
    {
        "id": "776aba0694d4bc8e",
        "type": "split",
        "z": "9b89f01a76bfb268",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 420,
        "wires": [
            [
                "efda3852e31a25c6"
            ]
        ]
    },
    {
        "id": "43fa0fba6b927197",
        "type": "sqlite",
        "z": "9b89f01a76bfb268",
        "mydb": "2a5b896e7d56f572",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 800,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "365bd5425634481a",
        "type": "delay",
        "z": "9b89f01a76bfb268",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 420,
        "wires": [
            [
                "0826644897f2e6e2"
            ]
        ]
    },
    {
        "id": "8c1ae960fac9ea68",
        "type": "change",
        "z": "9b89f01a76bfb268",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "clientorderid",
                "pt": "flow",
                "to": "clientorderid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6d28f8088fdb9abf",
        "type": "comment",
        "z": "9b89f01a76bfb268",
        "name": "This flow retrieves order execution values from Alpaca",
        "info": "",
        "x": 380,
        "y": 360,
        "wires": []
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKJ2C0D69I05F8OOFZB0",
        "paper": true
    },
    {
        "id": "68ede6fdaec7cef6",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "2a5b896e7d56f572",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    }
]