[
    {
        "id": "5f11955a9e5fc5aa",
        "type": "comment",
        "z": "15d09ab80a8c38b9",
        "name": "Flow 4: Close all postions for specific algo",
        "info": "",
        "x": 200,
        "y": 720,
        "wires": []
    },
    {
        "id": "8404db46464fb94e",
        "type": "alpaca-order",
        "z": "15d09ab80a8c38b9",
        "conf": "c06cec183f9317f9",
        "x": 570,
        "y": 840,
        "wires": [
            [
                "d91df48a39424de1"
            ]
        ]
    },
    {
        "id": "1416ac0e3db08ebf",
        "type": "postgresql",
        "z": "15d09ab80a8c38b9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "d91df48a39424de1",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nsubtag = ''\n\nif ( source == null) { source = 0}\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 840,
        "wires": [
            [
                "1416ac0e3db08ebf"
            ]
        ]
    },
    {
        "id": "578981c8d4f694bc",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "needs list of tickers line 1",
        "func": "msg.payload = flow.get(\"tickers\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 780,
        "wires": [
            [
                "535ed5d60d72c2bb"
            ]
        ]
    },
    {
        "id": "2789326d3ce9a3f3",
        "type": "inject",
        "z": "15d09ab80a8c38b9",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "578981c8d4f694bc"
            ]
        ]
    },
    {
        "id": "535ed5d60d72c2bb",
        "type": "split",
        "z": "15d09ab80a8c38b9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 780,
        "wires": [
            [
                "0c49d3aea37b8164"
            ]
        ]
    },
    {
        "id": "0c49d3aea37b8164",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "store ticker",
        "func": "msg.ticker = msg.payload\nmsg.query  = \"select * from positions where symbol = '\" +msg.ticker+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 780,
        "wires": [
            [
                "9a8e9ba754ce60f9"
            ]
        ]
    },
    {
        "id": "73bb495c52a94703",
        "type": "split",
        "z": "15d09ab80a8c38b9",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 930,
        "y": 780,
        "wires": [
            [
                "2660d87a50d69608"
            ]
        ]
    },
    {
        "id": "2660d87a50d69608",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "display",
        "func": "msg.qty = msg.payload[\"qty\"]\nmsg.side = msg.payload[\"side\"]\nmsg.market_value = msg.payload[\"market_value\"]\nmsg.cost = msg.payload[\"cost_basis\"]\nmsg.profit = msg.payload[\"unrealized_pl\"]\nmsg.pctprofit = msg.payload[\"unrealized_plpc\"]\nmsg.profit_today = msg.payload[\"unrealized_intraday_pl\"]\nmsg.pctprofit_today = msg.payload[\"unrealized_intraday_plpc\"]\nmsg.price = msg.payload[\"current_price\"]\nmsg.change = msg.payload[\"change_today\"]\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 780,
        "wires": [
            [
                "a42d641a47dd2e3d"
            ]
        ]
    },
    {
        "id": "a42d641a47dd2e3d",
        "type": "function",
        "z": "15d09ab80a8c38b9",
        "name": "create market buy order ",
        "func": "let algo_name = flow.get(\"algo_name\")\nlet qty = msg.qty\nlet side = 'sell'\n\n\nif (qty < 0){ \n        qty = qty * -1\n        side = 'buy'\n}\n\nnode.warn(\"Ticker: \"  +msg.ticker+ \" Qty: \" +qty+ \" Price: \" +msg.price+ \" Side: \" +msg.side+ \" Profit: \" +msg.profit)\n\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = msg.ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\nlet order_type = 'market' // select limit for limit orders\n\nlet temp = ''\n\n   \ntemp = {\n        \n        \"symbol\": msg.ticker,\n        \"qty\": qty,\n        \"side\": side,\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //\"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n        };\n\n \n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 840,
        "wires": [
            [
                "8404db46464fb94e"
            ]
        ]
    },
    {
        "id": "9a8e9ba754ce60f9",
        "type": "postgresql",
        "z": "15d09ab80a8c38b9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 780,
        "wires": [
            [
                "73bb495c52a94703"
            ]
        ]
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKMGQKGZAI7ZZE1VHGOH",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]