[
    {
        "id": "2dd0e32e2e51f019",
        "type": "tab",
        "label": "SPY One Second Trades",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e76133e29e2c6051",
        "type": "comment",
        "z": "2dd0e32e2e51f019",
        "name": "This flow stores one second timeseries data, calculates moving average, and records difference between current price and moving average for SPY. Data is store in the MachineTrader data center rather than locally.",
        "info": "",
        "x": 740,
        "y": 40,
        "wires": []
    },
    {
        "id": "712f12fcf328e151",
        "type": "inject",
        "z": "2dd0e32e2e51f019",
        "name": "Update current price each second",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 360,
        "wires": [
            [
                "9423f178f0c42b93",
                "43ceaa57c4e90ae9"
            ]
        ]
    },
    {
        "id": "e34b7e90d06a581e",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "display polygon output",
        "func": "let ux = Date.now()\nlet nstime = '';\nlet price = '0';\nlet size = '';\nlet exchange = '';\nlet item = ''\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    nstime = item.participant_timestamp;\n    size = item.size;\n    exchange = item.exchange;\n   // node.warn(\"Current Price: \" +price)\n \n    msg.payload = price\n    \n}\n\nmsg.topic = ux\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 340,
        "wires": [
            [
                "4b6a7805f5272533"
            ]
        ]
    },
    {
        "id": "a2910f918f3c4431",
        "type": "change",
        "z": "2dd0e32e2e51f019",
        "name": "global.price, global.ux",
        "rules": [
            {
                "t": "set",
                "p": "price",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ux",
                "pt": "global",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1420,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "2d77638fe379f1f9",
        "type": "polygon-last-trade-v3",
        "z": "2dd0e32e2e51f019",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 920,
        "y": 340,
        "wires": [
            [
                "e34b7e90d06a581e",
                "85243a49a23a393e"
            ]
        ]
    },
    {
        "id": "9423f178f0c42b93",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "prepay payload for polygon",
        "func": "let symbol = global.get(\"ticker\")\nlet count = 1 // get only one record\n\n// if crypto\n//symbol = symbol.replace(\"\",\"X:\")\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: count,\n}\n\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 340,
        "wires": [
            [
                "2d77638fe379f1f9"
            ]
        ]
    },
    {
        "id": "9d03ee33de8b8a08",
        "type": "change",
        "z": "2dd0e32e2e51f019",
        "name": "global.average_price",
        "rules": [
            {
                "t": "set",
                "p": "average_price",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "b9223c5d24b9014a",
        "type": "comment",
        "z": "2dd0e32e2e51f019",
        "name": "Run every second. Calculate average and update tables",
        "info": "",
        "x": 380,
        "y": 460,
        "wires": []
    },
    {
        "id": "43ceaa57c4e90ae9",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "Store in data center",
        "func": "let unixtime = Date.now()\nlet price = 0\n\nlet table = global.get(\"ticker\") \nprice = global.get(\"price\")\n\n\nlet ux = (unixtime / 1000)\n\nlet sql = \"insert into \" +table+ \" (unixtime,ux,local_time,cur_price) values ('\" + unixtime + \"','\" +ux+ \"', from_unixtime(\" +ux+ \"),'\" + price+ \"');\"\n//node.warn(sql)\nmsg.topic = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "d3fa1c0fc5383082"
            ]
        ]
    },
    {
        "id": "c673219a168e2985",
        "type": "comment",
        "z": "2dd0e32e2e51f019",
        "name": "Flow #2",
        "info": "",
        "x": 90,
        "y": 260,
        "wires": []
    },
    {
        "id": "42a61216988d555a",
        "type": "comment",
        "z": "2dd0e32e2e51f019",
        "name": "Flow #4",
        "info": "",
        "x": 90,
        "y": 460,
        "wires": []
    },
    {
        "id": "419fddb22a42994d",
        "type": "comment",
        "z": "2dd0e32e2e51f019",
        "name": "Flow #1",
        "info": "",
        "x": 90,
        "y": 100,
        "wires": []
    },
    {
        "id": "79921c7704dc44fa",
        "type": "inject",
        "z": "2dd0e32e2e51f019",
        "name": "calculate average price",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "778f48effefe7118"
            ]
        ]
    },
    {
        "id": "211039735f5c47b9",
        "type": "calculator",
        "z": "2dd0e32e2e51f019",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "payload",
        "operation": "avg",
        "constant": "",
        "round": false,
        "decimals": 0,
        "x": 980,
        "y": 520,
        "wires": [
            [
                "1f00b9514dbe395c"
            ]
        ]
    },
    {
        "id": "29222aa156833e39",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "create array for average",
        "func": "const prices = [];\nlet item = ''\nlet price = ''\n\nfor (item of msg.payload) {\n    price = item.cur_price;\n    prices.push(price);  \n//    node.warn(price)\n\n}\n\n//node.warn(prices)\nmsg.payload = prices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 520,
        "wires": [
            [
                "211039735f5c47b9"
            ]
        ]
    },
    {
        "id": "778f48effefe7118",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "select specified rows",
        "func": "let count = global.get(\"avg_count\") // number of rows to include in average\nlet table = global.get(\"ticker\")\nlet sql = \"select cur_price from \" +table+ \" order by unixtime desc limit \" +count \n//node.warn(sql)\nmsg.topic = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 520,
        "wires": [
            [
                "57a7d8cfe5fee349"
            ]
        ]
    },
    {
        "id": "32d4dea89d043da7",
        "type": "inject",
        "z": "2dd0e32e2e51f019",
        "name": "Display Flow Variables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 200,
        "wires": [
            [
                "fd7f92fb4dccae38"
            ]
        ]
    },
    {
        "id": "fd7f92fb4dccae38",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "display variables",
        "func": "let ticker = global.get(\"ticker\")\nlet count = global.get(\"avg_count\")\nlet ux = global.get(\"ux\")\nlet avg = global.get(\"average_price\")\nlet current_price = global.get(\"price\")\nlet current_diff = current_price - avg\n\nnode.warn(\"Ticker: \" +ticker+ \" Avg Count: \" +count+ \" Unixtime: \" +ux+ \" Current Price: \" + current_price + \" Avg Price: \" + avg + \" Price Difference: \" +current_diff)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "8a867dd98a5ca90a",
        "type": "inject",
        "z": "2dd0e32e2e51f019",
        "name": "get count",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select count(*) from SPY",
        "x": 840,
        "y": 260,
        "wires": [
            [
                "95bbc578d0bd1c70"
            ]
        ]
    },
    {
        "id": "4d89cf211cea4cae",
        "type": "debug",
        "z": "2dd0e32e2e51f019",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 260,
        "wires": []
    },
    {
        "id": "4b6a7805f5272533",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "Format to 2 decimals",
        "func": "let price = msg.payload\nprice = price.toFixed(2)\nmsg.payload = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 340,
        "wires": [
            [
                "a2910f918f3c4431"
            ]
        ]
    },
    {
        "id": "1f00b9514dbe395c",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "Format to 2 decimals",
        "func": "let price = msg.payload\nprice = price.toFixed(2)\nmsg.payload = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 520,
        "wires": [
            [
                "9d03ee33de8b8a08"
            ]
        ]
    },
    {
        "id": "487d426ba7ce6362",
        "type": "mysql",
        "z": "2dd0e32e2e51f019",
        "mydb": "766ffca373be7e7d",
        "name": "algos",
        "x": 1150,
        "y": 260,
        "wires": [
            [
                "4d89cf211cea4cae"
            ]
        ]
    },
    {
        "id": "d3fa1c0fc5383082",
        "type": "mysql",
        "z": "2dd0e32e2e51f019",
        "mydb": "766ffca373be7e7d",
        "name": "algos",
        "x": 830,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "57a7d8cfe5fee349",
        "type": "mysql",
        "z": "2dd0e32e2e51f019",
        "mydb": "766ffca373be7e7d",
        "name": "algos",
        "x": 570,
        "y": 520,
        "wires": [
            [
                "29222aa156833e39"
            ]
        ]
    },
    {
        "id": "a4ae07dfbfb46cbe",
        "type": "inject",
        "z": "2dd0e32e2e51f019",
        "name": "Create SPY table in Data Center",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "create table IF NOT EXISTS SPY (unixtime BIGINT(20) PRIMARY KEY, ux BIGINT(20), local_time VARCHAR(40),cur_price float,avg_price float,price_dif float)",
        "x": 350,
        "y": 260,
        "wires": [
            [
                "1b4d98c5ad4a1354"
            ]
        ]
    },
    {
        "id": "57c0dc8f77ebb743",
        "type": "mysql",
        "z": "2dd0e32e2e51f019",
        "mydb": "766ffca373be7e7d",
        "name": "algos",
        "x": 670,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "3cdcbc9c6c3683dd",
        "type": "inject",
        "z": "2dd0e32e2e51f019",
        "name": "Set symbol 1x only",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 140,
        "wires": [
            [
                "d24ab2c98c241b4b"
            ]
        ]
    },
    {
        "id": "b8c08401eec7d623",
        "type": "comment",
        "z": "2dd0e32e2e51f019",
        "name": "Specify ticker for trading ",
        "info": "",
        "x": 290,
        "y": 100,
        "wires": []
    },
    {
        "id": "d24ab2c98c241b4b",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "set and store ticker SPY variable",
        "func": "let ticker = 'SPY'\nmsg.topic = ticker\n//node.warn(\"Global Ticker: \" +ticker)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "371e470cdaf9a305"
            ]
        ]
    },
    {
        "id": "371e470cdaf9a305",
        "type": "change",
        "z": "2dd0e32e2e51f019",
        "name": "set global variables: ticker, avg_count",
        "rules": [
            {
                "t": "set",
                "p": "ticker",
                "pt": "global",
                "to": "topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "avg_count",
                "pt": "global",
                "to": "100",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "eccd11d50a3ce48a",
        "type": "comment",
        "z": "2dd0e32e2e51f019",
        "name": "Function node allows manipulation of the msg.payload",
        "info": "",
        "x": 640,
        "y": 100,
        "wires": []
    },
    {
        "id": "83430ea644574d9a",
        "type": "comment",
        "z": "2dd0e32e2e51f019",
        "name": "Change node used to stores flow variables ticker and count",
        "info": "",
        "x": 1080,
        "y": 100,
        "wires": []
    },
    {
        "id": "95bbc578d0bd1c70",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "query",
        "func": "let ticker = global.get(\"ticker\")\nlet table = ticker\nlet sql = \"select count(*) from \" +table \nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 260,
        "wires": [
            [
                "487d426ba7ce6362"
            ]
        ]
    },
    {
        "id": "1b4d98c5ad4a1354",
        "type": "function",
        "z": "2dd0e32e2e51f019",
        "name": "query",
        "func": "let ticker = global.get(\"ticker\")\nlet table = ticker\nlet sql = \"create table IF NOT EXISTS \" +table+ \" (unixtime BIGINT(20) PRIMARY KEY, ux BIGINT(20), local_time VARCHAR(40),cur_price float,avg_price float,price_dif float)\"\nnode.warn(sql)\nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 260,
        "wires": [
            [
                "57c0dc8f77ebb743"
            ]
        ]
    },
    {
        "id": "ccc4bc6f84efa7bd",
        "type": "comment",
        "z": "2dd0e32e2e51f019",
        "name": "Flow #3",
        "info": "",
        "x": 90,
        "y": 360,
        "wires": []
    },
    {
        "id": "85243a49a23a393e",
        "type": "debug",
        "z": "2dd0e32e2e51f019",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 380,
        "wires": []
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "766ffca373be7e7d",
        "type": "MySQLdatabase",
        "name": "algos",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "algos",
        "tz": "EST5EDT",
        "charset": "UTF8"
    }
]