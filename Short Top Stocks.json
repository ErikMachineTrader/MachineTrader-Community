[
    {
        "id": "32793af6ec83db6e",
        "type": "tab",
        "label": "Short Top Stocks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "856559095b810c15",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet login = 'pta15'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 10 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'intraday'\nlet strategy_type = \"short\"\nlet benchmark = 'SPY'\n\nnode.warn(ticker)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 160,
        "wires": [
            [
                "7d6c709b51da122e"
            ]
        ]
    },
    {
        "id": "a7086e67f974527c",
        "type": "inject",
        "z": "32793af6ec83db6e",
        "name": "3:42 PM",
        "props": [],
        "repeat": "",
        "crontab": "42 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "856559095b810c15"
            ]
        ]
    },
    {
        "id": "7d6c709b51da122e",
        "type": "change",
        "z": "32793af6ec83db6e",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "16ca3de1bb265a61",
        "type": "comment",
        "z": "32793af6ec83db6e",
        "name": "Flow 2: Create new entry in algos table (FIRST TIME ONLY)",
        "info": "",
        "x": 270,
        "y": 360,
        "wires": []
    },
    {
        "id": "3501777996f36777",
        "type": "comment",
        "z": "32793af6ec83db6e",
        "name": "Flow 4: Place limit orders on profit target starting at 4 am",
        "info": "",
        "x": 230,
        "y": 740,
        "wires": []
    },
    {
        "id": "8a669775d1d633a7",
        "type": "comment",
        "z": "32793af6ec83db6e",
        "name": "Flow 3: Create trading flow (ONCE)",
        "info": "",
        "x": 180,
        "y": 520,
        "wires": []
    },
    {
        "id": "4c355cb5e03d3e42",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 680,
        "wires": [
            [
                "23f6da8c63396b15"
            ]
        ]
    },
    {
        "id": "cf699fb6d175b2ac",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 560,
        "wires": [
            [
                "35b3d804a6f1732c"
            ]
        ]
    },
    {
        "id": "35b3d804a6f1732c",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 560,
        "wires": [
            [
                "cd6513614396c311"
            ]
        ]
    },
    {
        "id": "11ccbfb06c6c1eba",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 560,
        "wires": [
            [
                "ab356154e2bb6116"
            ]
        ]
    },
    {
        "id": "c1c697cff5b5472f",
        "type": "function-npm",
        "z": "32793af6ec83db6e",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 620,
        "wires": [
            [
                "602a3a3c83e50cdd"
            ]
        ]
    },
    {
        "id": "cd6513614396c311",
        "type": "delay",
        "z": "32793af6ec83db6e",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 560,
        "wires": [
            [
                "11ccbfb06c6c1eba"
            ]
        ]
    },
    {
        "id": "ef53e19e3a2333d8",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 620,
        "wires": [
            [
                "c1c697cff5b5472f"
            ]
        ]
    },
    {
        "id": "ab356154e2bb6116",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 560,
        "wires": [
            [
                "e7ec187b489d6de8"
            ]
        ]
    },
    {
        "id": "e7ec187b489d6de8",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 620,
        "wires": [
            [
                "ef53e19e3a2333d8"
            ]
        ]
    },
    {
        "id": "f9c8c00f0c30c302",
        "type": "inject",
        "z": "32793af6ec83db6e",
        "name": "3:55",
        "props": [],
        "repeat": "",
        "crontab": "55 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "cf699fb6d175b2ac"
            ]
        ]
    },
    {
        "id": "1fa0e0280e39bac1",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 620,
        "wires": [
            [
                "4c355cb5e03d3e42"
            ]
        ]
    },
    {
        "id": "602a3a3c83e50cdd",
        "type": "polygon-last-trade-v3",
        "z": "32793af6ec83db6e",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 940,
        "y": 620,
        "wires": [
            [
                "1fa0e0280e39bac1"
            ]
        ]
    },
    {
        "id": "23f6da8c63396b15",
        "type": "alpaca-order",
        "z": "32793af6ec83db6e",
        "conf": "e535f42f1df1b25f",
        "x": 510,
        "y": 680,
        "wires": [
            [
                "7a2cc2235cb9f887"
            ]
        ]
    },
    {
        "id": "a2227bf2bba8c6f2",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "7a2cc2235cb9f887",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 680,
        "wires": [
            [
                "a2227bf2bba8c6f2"
            ]
        ]
    },
    {
        "id": "4089e3ae43c8baba",
        "type": "inject",
        "z": "32793af6ec83db6e",
        "name": "3:45 pm",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select symbol,price_change_pct from topstocks order by  price_change_pct desc limit 30;",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "85561c5c68541d74",
                "bedb134275335069"
            ]
        ]
    },
    {
        "id": "fad3f0a516ae1dbc",
        "type": "comment",
        "z": "32793af6ec83db6e",
        "name": "Flow 1: Define Strategy and Set Trading Values",
        "info": "",
        "x": 240,
        "y": 20,
        "wires": []
    },
    {
        "id": "85561c5c68541d74",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "5df9e0fb371ab30c"
            ]
        ]
    },
    {
        "id": "5df9e0fb371ab30c",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "836d4e372aeec8f8"
            ]
        ]
    },
    {
        "id": "836d4e372aeec8f8",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "insert into tickers",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers (id, symbol, portfolioname) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"');\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 220,
        "wires": [
            [
                "daa6dcccbe275fcd"
            ]
        ]
    },
    {
        "id": "daa6dcccbe275fcd",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "bf4d9d94ef824be7",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers.symbol\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 260,
        "wires": [
            [
                "426198e8045aaf9c"
            ]
        ]
    },
    {
        "id": "bedb134275335069",
        "type": "delay",
        "z": "32793af6ec83db6e",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 260,
        "wires": [
            [
                "bf4d9d94ef824be7"
            ]
        ]
    },
    {
        "id": "426198e8045aaf9c",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ae3c6458a38d2fc0",
        "type": "mysql",
        "z": "32793af6ec83db6e",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 290,
        "y": 80,
        "wires": [
            [
                "686ab8ac8aae71e7"
            ]
        ]
    },
    {
        "id": "686ab8ac8aae71e7",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get fresh list of tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.symbol;\n    tickers += ticker+ \", \"\n}\n\n// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nmsg.id = d\nmsg.tickers = tickers\nmsg.algo_name = 'Short Top Stocks'\nnode.warn(tickers)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 80,
        "wires": [
            [
                "f1c34821cf9fcf76"
            ]
        ]
    },
    {
        "id": "968f3334d149b978",
        "type": "inject",
        "z": "32793af6ec83db6e",
        "name": "3:40 pm",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "40 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select symbol,price_change_pct from topstocks order by  price_change_pct desc limit 30;",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "ae3c6458a38d2fc0"
            ]
        ]
    },
    {
        "id": "a380a1bc0ea6e5d5",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\nlet status = msg.status\nlet diff = flow.get(\"diff\")\n\n//node.warn(\"Alpaca Symbol: \" +ticker+ \" Price: \" +price)\n\nlet qty = ((psize / number) / price)\n\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet subtag = algo_name\n\n\n// logic for sell order\nlet profit = 0\nprofit = msg.profit\n\n//node.warn(\"Ticker: \" + ticker + \" Status: \" + status + \" Qty: \" + qty + \" Orderid: \" + client_order_id + \" Algo Name: \" + subtag)\n\n\nqty = msg.qty\nqty = (qty * -1)\n\nlet temp = ''\n\nlet order_type = 'limit' // select limit for limit orders\n\nif ( order_type == 'limit'){\n\n\ntemp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": 'buy',\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n}\n\nelse {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": 'buy',\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //  limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 980,
        "wires": [
            [
                "a82bc0c4b91ed59f"
            ]
        ]
    },
    {
        "id": "a82bc0c4b91ed59f",
        "type": "alpaca-order",
        "z": "32793af6ec83db6e",
        "conf": "e535f42f1df1b25f",
        "x": 470,
        "y": 1040,
        "wires": [
            [
                "34b7a69027d29fb0"
            ]
        ]
    },
    {
        "id": "f453ec5fb53646db",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//node.warn(\"Ticker: \" +ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 860,
        "wires": [
            [
                "e7f72a1e09a4f375"
            ]
        ]
    },
    {
        "id": "e7f72a1e09a4f375",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 490,
        "y": 860,
        "wires": [
            [
                "45a8ebda6c747431"
            ]
        ]
    },
    {
        "id": "45a8ebda6c747431",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get alt symbols",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 860,
        "wires": [
            [
                "b8b8a15b8b753b8f"
            ]
        ]
    },
    {
        "id": "74990aabb74330f5",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 920,
        "wires": [
            [
                "eec488cd8daddeb0"
            ]
        ]
    },
    {
        "id": "b8b8a15b8b753b8f",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 860,
        "wires": [
            [
                "dd3a8fcf6df56776"
            ]
        ]
    },
    {
        "id": "dd3a8fcf6df56776",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 250,
        "y": 920,
        "wires": [
            [
                "74990aabb74330f5"
            ]
        ]
    },
    {
        "id": "3ce10808924965b0",
        "type": "inject",
        "z": "32793af6ec83db6e",
        "name": "4 AM",
        "props": [],
        "repeat": "",
        "crontab": "00 04 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "f6e738bce0d51950"
            ]
        ]
    },
    {
        "id": "12b1d8e7a8218627",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "34b7a69027d29fb0",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1040,
        "wires": [
            [
                "12b1d8e7a8218627"
            ]
        ]
    },
    {
        "id": "eec488cd8daddeb0",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "check positions table ",
        "func": "let ticker = msg.symbol\nmsg.query = \"select * from positions where symbol = '\" +ticker+ \"';\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 920,
        "wires": [
            [
                "171b9d584155c6e4"
            ]
        ]
    },
    {
        "id": "171b9d584155c6e4",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 920,
        "wires": [
            [
                "931458d074947512"
            ]
        ]
    },
    {
        "id": "f6e738bce0d51950",
        "type": "delay",
        "z": "32793af6ec83db6e",
        "name": "Wait 5 secs for position table to update",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 800,
        "wires": [
            [
                "f453ec5fb53646db"
            ]
        ]
    },
    {
        "id": "931458d074947512",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "check curent position",
        "func": "let arr = msg.payload\nlet len = arr.length\nlet status = len // shows if payload is empty\n//node.warn(\"Status: \" +status)\n\nif ( status == 0){\n    //node.warn(\"position is 0\")\n    msg.status = 0\n} \n\nelse {\n    //node.warn(\"go to next flow\")\n    msg.status = 1\n }\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 920,
        "wires": [
            [
                "b61d2c52beddffc9"
            ]
        ]
    },
    {
        "id": "b61d2c52beddffc9",
        "type": "switch",
        "z": "32793af6ec83db6e",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 980,
        "wires": [
            [
                "13faeda0dbb5af51"
            ],
            []
        ]
    },
    {
        "id": "5ff9fd65cd494141",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "Get values from positions",
        "func": "let ticker = msg.symbol\nlet qty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nprice = +price\nprice = price.toFixed(2)\n\nnode.warn(\"Ticker: \" +ticker+ \" Price: \" +price+ \" Qty: \" +qty+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 980,
        "wires": [
            [
                "a380a1bc0ea6e5d5"
            ]
        ]
    },
    {
        "id": "13faeda0dbb5af51",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 980,
        "wires": [
            [
                "5ff9fd65cd494141"
            ]
        ]
    },
    {
        "id": "b6dd6d6ca571bf3e",
        "type": "comment",
        "z": "32793af6ec83db6e",
        "name": "Flow 5: Place market orders on remaining tickers at market open",
        "info": "",
        "x": 270,
        "y": 1160,
        "wires": []
    },
    {
        "id": "1c98209f916f63f1",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.ticker\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet qty = msg.qty\nlet side = msg.side\nlet profit = msg.profit\n\nnode.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side + \" Profit: \" + profit)\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\nlet action = ''\n\nif ( side == \"short\") { \n    action = \"buy\"\n    qty = (qty * -1)}\n\nlet temp = ''\n\nlet order_type = 'market' // select limit for limit orders\n\nif ( order_type == 'limit'){\n\n\ntemp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": action,\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n}\n\nelse {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": action,\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //  limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "f713e310e93e5bd0",
        "type": "alpaca-order",
        "z": "32793af6ec83db6e",
        "conf": "e535f42f1df1b25f",
        "x": 530,
        "y": 1340,
        "wires": [
            [
                "fea86604f6fae1e2"
            ]
        ]
    },
    {
        "id": "876fa03c6926dfc2",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//node.warn(\"Ticker: \" +ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1220,
        "wires": [
            [
                "de5cc5394d31b3e9"
            ]
        ]
    },
    {
        "id": "de5cc5394d31b3e9",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 490,
        "y": 1220,
        "wires": [
            [
                "fb8733b74bb3b949"
            ]
        ]
    },
    {
        "id": "1bb7632afd170917",
        "type": "inject",
        "z": "32793af6ec83db6e",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "32 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1220,
        "wires": [
            [
                "876fa03c6926dfc2",
                "f47114d44eb54b53"
            ]
        ]
    },
    {
        "id": "c1fb054b94f85b27",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "fea86604f6fae1e2",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1340,
        "wires": [
            [
                "c1fb054b94f85b27"
            ]
        ]
    },
    {
        "id": "3f31571d8b9f35d0",
        "type": "alpaca-position-query",
        "z": "32793af6ec83db6e",
        "conf": "e535f42f1df1b25f",
        "x": 430,
        "y": 1280,
        "wires": [
            [
                "48bd21df96f1702f"
            ]
        ]
    },
    {
        "id": "16ff18c71ac025ac",
        "type": "switch",
        "z": "32793af6ec83db6e",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 1280,
        "wires": [
            [
                "f20771f80f4048b3"
            ]
        ]
    },
    {
        "id": "48bd21df96f1702f",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 1280,
        "wires": [
            [
                "16ff18c71ac025ac"
            ]
        ]
    },
    {
        "id": "fb8733b74bb3b949",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "split tickers",
        "func": "let ticker = msg.payload\nnode.warn(\"Ticker: \" +ticker) \nmsg.ticker = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1220,
        "wires": [
            [
                "3f31571d8b9f35d0"
            ]
        ]
    },
    {
        "id": "f20771f80f4048b3",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "Get values from positions",
        "func": "let qty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\n//node.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1280,
        "wires": [
            [
                "1c98209f916f63f1"
            ]
        ]
    },
    {
        "id": "9e0d8b2e4d04958a",
        "type": "alpaca-orders-close",
        "z": "32793af6ec83db6e",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 350,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "f47114d44eb54b53",
        "type": "delay",
        "z": "32793af6ec83db6e",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 120,
        "y": 1400,
        "wires": [
            [
                "9e0d8b2e4d04958a"
            ]
        ]
    },
    {
        "id": "5562b09769fedd0e",
        "type": "inject",
        "z": "32793af6ec83db6e",
        "name": "",
        "props": [
            {
                "p": "query",
                "v": "select symbol from positions where portfolioname = 'Short Top Stocks'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 1120,
        "wires": [
            [
                "b67d6f9b83048022"
            ]
        ]
    },
    {
        "id": "b67d6f9b83048022",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1120,
        "wires": [
            [
                "6498d50c6bd898b6"
            ]
        ]
    },
    {
        "id": "3406f8dba8d699a7",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "function 4",
        "func": "let tickers = msg.payload[\"symbol\"]\nnode.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "6498d50c6bd898b6",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 1120,
        "wires": [
            [
                "3406f8dba8d699a7"
            ]
        ]
    },
    {
        "id": "5fcd67e1bb2616dc",
        "type": "comment",
        "z": "32793af6ec83db6e",
        "name": "Flow 5A: If up to date  ticker list does not exist",
        "info": "",
        "x": 210,
        "y": 1480,
        "wires": []
    },
    {
        "id": "53d9c0690a8a06bc",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.ticker\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet qty = msg.qty\nlet side = msg.side\nlet profit = msg.profit\n\n//node.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side + \" Profit: \" + profit)\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\nlet action = ''\n\nif ( side == \"short\") { \n    action = \"buy\"\n    qty = (qty * -1)}\n\nlet temp = ''\n\nlet order_type = 'market' // select limit for limit orders\n\nif ( order_type == 'limit'){\n\n\ntemp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": action,\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n}\n\nelse {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": action,\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //  limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1660,
        "wires": [
            [
                "46b3eb86476616e1"
            ]
        ]
    },
    {
        "id": "46b3eb86476616e1",
        "type": "alpaca-order",
        "z": "32793af6ec83db6e",
        "conf": "e535f42f1df1b25f",
        "x": 530,
        "y": 1660,
        "wires": [
            [
                "8de30df3b718ad66"
            ]
        ]
    },
    {
        "id": "f871367c2d53c421",
        "type": "inject",
        "z": "32793af6ec83db6e",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1540,
        "wires": [
            [
                "897ec3faf4b346f9",
                "fa879c9af8d726cb"
            ]
        ]
    },
    {
        "id": "393b210802518ea5",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "8de30df3b718ad66",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1660,
        "wires": [
            [
                "393b210802518ea5"
            ]
        ]
    },
    {
        "id": "2ef38f97d8c74851",
        "type": "alpaca-position-query",
        "z": "32793af6ec83db6e",
        "conf": "e535f42f1df1b25f",
        "x": 430,
        "y": 1600,
        "wires": [
            [
                "a4386d459665a56d"
            ]
        ]
    },
    {
        "id": "5b6a62e3d9c806f0",
        "type": "switch",
        "z": "32793af6ec83db6e",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 1600,
        "wires": [
            [
                "ba47471a26acc932"
            ]
        ]
    },
    {
        "id": "a4386d459665a56d",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 1600,
        "wires": [
            [
                "5b6a62e3d9c806f0"
            ]
        ]
    },
    {
        "id": "ba47471a26acc932",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "Get values from positions",
        "func": "let qty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\n//node.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1600,
        "wires": [
            [
                "53d9c0690a8a06bc"
            ]
        ]
    },
    {
        "id": "66f97be2a2760553",
        "type": "alpaca-orders-close",
        "z": "32793af6ec83db6e",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 350,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "897ec3faf4b346f9",
        "type": "delay",
        "z": "32793af6ec83db6e",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 120,
        "y": 1720,
        "wires": [
            [
                "66f97be2a2760553"
            ]
        ]
    },
    {
        "id": "6da377c230717390",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 1540,
        "wires": [
            [
                "8a2ef1718faf26ef"
            ]
        ]
    },
    {
        "id": "57383cbd2b55f1d7",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "display tickers",
        "func": "let tickers = msg.payload[\"symbol\"]\n//node.warn(tickers)\nmsg.ticker = tickers\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1540,
        "wires": [
            [
                "2ef38f97d8c74851"
            ]
        ]
    },
    {
        "id": "8a2ef1718faf26ef",
        "type": "split",
        "z": "32793af6ec83db6e",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 1540,
        "wires": [
            [
                "57383cbd2b55f1d7"
            ]
        ]
    },
    {
        "id": "fa879c9af8d726cb",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "get list of tickers from positions",
        "func": "msg.query = \"select symbol from positions where portfolioname = 'Short Top Stocks'\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1540,
        "wires": [
            [
                "6da377c230717390"
            ]
        ]
    },
    {
        "id": "f1c34821cf9fcf76",
        "type": "change",
        "z": "32793af6ec83db6e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 80,
        "wires": [
            [
                "c610dd3fe13a5c24"
            ]
        ]
    },
    {
        "id": "c610dd3fe13a5c24",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "Display flow vars",
        "func": "let id = flow.get(\"id\")\nlet name = flow.get(\"algo_name\")\nnode.warn(\"ID: \" +id+ \" Name: \" +name)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ee77d6be55ebc4e4",
        "type": "function",
        "z": "32793af6ec83db6e",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = 'pta15'\nlet asset_class = 'crypto' // stocks or crypto\nlet number = 20 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet algo_type = \"interday\"\nlet strategy_type = \"long\"\nlet status = 'running'\nlet benchmark = 'SPY'\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,algo_name,algo_type,strategy_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + algo_name + \"','\" + algo_type + \"','\" + strategy_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"');\"\nmsg.query = sql\nnode.warn(msg.query)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 420,
        "wires": [
            [
                "e81d5e11b8577516",
                "31c877cf06baa460"
            ]
        ]
    },
    {
        "id": "daceb4a49d2aa63f",
        "type": "inject",
        "z": "32793af6ec83db6e",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "ee77d6be55ebc4e4"
            ]
        ]
    },
    {
        "id": "e81d5e11b8577516",
        "type": "change",
        "z": "32793af6ec83db6e",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "31c877cf06baa460",
        "type": "postgresql",
        "z": "32793af6ec83db6e",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    }
]