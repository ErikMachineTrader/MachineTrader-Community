[
    {
        "id": "e4a3429ac9f11afd",
        "type": "tab",
        "label": "Short Top Stocks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0b20651ea5a3a60a",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "define values required for adding trade to portfolio",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet login = 'pta17'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = \"Short Top Stocks\"\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 10 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'intraday'\nlet benchmark = 'SPY'\n\nnode.warn(ticker)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "1921bcf95b4d39ba"
            ]
        ]
    },
    {
        "id": "bb751a1726ea5a2b",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "3:42 PM",
        "props": [],
        "repeat": "",
        "crontab": "42 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "0b20651ea5a3a60a"
            ]
        ]
    },
    {
        "id": "1921bcf95b4d39ba",
        "type": "change",
        "z": "e4a3429ac9f11afd",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6bfdd1a48bad8d13",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Flow 2: Create new entry in algos table (FIRST TIME ONLY)",
        "info": "",
        "x": 250,
        "y": 340,
        "wires": []
    },
    {
        "id": "acbca8b6123cd087",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "add values to algos table",
        "func": "let login = flow.get(\"login\")\nlet id = flow.get(\"id\")\nlet algo_name = flow.get(\"algo_name\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet portfolio_size = flow.get(\"psize\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_start = global.get(\"spy_current\")\n\nmsg.query = \"insert into algos (login,id,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values ('\" + login + \"','\" +id+ \"','\" +algo_name+ \"','\" +algo_type+ \"','\" +status+ \"','\" +portfolio_size+ \"','\" +benchmark+ \"','\" +benchmark_start+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "d93842fc0588e66b"
            ]
        ]
    },
    {
        "id": "d93842fc0588e66b",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "72c342da878fd285",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "STARTUP",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 400,
        "wires": [
            [
                "acbca8b6123cd087"
            ]
        ]
    },
    {
        "id": "5fd29866866ebe62",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "Display Algos",
        "props": [
            {
                "p": "query",
                "v": "select * from algos",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "delete from algos where id = 1671644577762",
                "vt": "str"
            },
            {
                "p": "query2",
                "v": "update algos set login = 'pta19'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update algos set gain_today = -158.7135149876422767159823658, gain_alltime = -158.71351498764227674, pctgain_today = 0, pctgain_alltime = 0 where algo_name = 'Buy and Sell BTCUSD on Profit Target';",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from order_confirms",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update order_confirms set subtag = 'Buy/Short SPY on News' where symbol = 'SPY'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update order_confirms set subtag = 'Trade BTCUSD'  where symbol = 'BTC/USD'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 400,
        "wires": [
            [
                "7412b1165d90c351"
            ]
        ]
    },
    {
        "id": "7412b1165d90c351",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 400,
        "wires": [
            [
                "fd0b1d99e25be11d"
            ]
        ]
    },
    {
        "id": "fd0b1d99e25be11d",
        "type": "debug",
        "z": "e4a3429ac9f11afd",
        "name": "debug 220",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 400,
        "wires": []
    },
    {
        "id": "9dc8f528f8517752",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Flow 4: Place limit orders on profit target starting at 4 am",
        "info": "",
        "x": 230,
        "y": 700,
        "wires": []
    },
    {
        "id": "85e30428694de786",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Flow 3: Create trading flow (ONCE)",
        "info": "",
        "x": 180,
        "y": 460,
        "wires": []
    },
    {
        "id": "4e8e245da7e7eff2",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 620,
        "wires": [
            [
                "c68d1492463084b4"
            ]
        ]
    },
    {
        "id": "1df270da4e22d4ca",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 500,
        "wires": [
            [
                "914f06aff589f05c"
            ]
        ]
    },
    {
        "id": "914f06aff589f05c",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 500,
        "wires": [
            [
                "19da0bfab595b27f"
            ]
        ]
    },
    {
        "id": "c1c5054071980c09",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 500,
        "wires": [
            [
                "e7cb5ad5c13a625a"
            ]
        ]
    },
    {
        "id": "24fdc7b6a307fc5d",
        "type": "function-npm",
        "z": "e4a3429ac9f11afd",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 560,
        "wires": [
            [
                "7c5105b955e88a59"
            ]
        ]
    },
    {
        "id": "19da0bfab595b27f",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 500,
        "wires": [
            [
                "c1c5054071980c09"
            ]
        ]
    },
    {
        "id": "d70d230e2a288151",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 560,
        "wires": [
            [
                "24fdc7b6a307fc5d"
            ]
        ]
    },
    {
        "id": "e7cb5ad5c13a625a",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 500,
        "wires": [
            [
                "5f8d666905b76561"
            ]
        ]
    },
    {
        "id": "5f8d666905b76561",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 560,
        "wires": [
            [
                "d70d230e2a288151"
            ]
        ]
    },
    {
        "id": "e1287c5b17215dbe",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "3:55",
        "props": [],
        "repeat": "",
        "crontab": "55 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "1df270da4e22d4ca"
            ]
        ]
    },
    {
        "id": "49df3af7e734c11b",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 560,
        "wires": [
            [
                "4e8e245da7e7eff2"
            ]
        ]
    },
    {
        "id": "7c5105b955e88a59",
        "type": "polygon-last-trade-v3",
        "z": "e4a3429ac9f11afd",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 940,
        "y": 560,
        "wires": [
            [
                "49df3af7e734c11b"
            ]
        ]
    },
    {
        "id": "c68d1492463084b4",
        "type": "alpaca-order",
        "z": "e4a3429ac9f11afd",
        "conf": "e535f42f1df1b25f",
        "x": 510,
        "y": 620,
        "wires": [
            [
                "555f0ade24bfac1e"
            ]
        ]
    },
    {
        "id": "22651c5054a636e0",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "555f0ade24bfac1e",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 620,
        "wires": [
            [
                "22651c5054a636e0"
            ]
        ]
    },
    {
        "id": "c79594d85dcccaef",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Flow 2: Set tickers",
        "info": "",
        "x": 150,
        "y": 220,
        "wires": []
    },
    {
        "id": "bbea02fe0322a3e2",
        "type": "mysql",
        "z": "e4a3429ac9f11afd",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 290,
        "y": 260,
        "wires": [
            [
                "287f67be8017e14a"
            ]
        ]
    },
    {
        "id": "287f67be8017e14a",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.symbol;\n    tickers += ticker+ \", \"\n}\n\nmsg.tickers = tickers\nmsg.portfolioname = 'Short Top Stocks'\nnode.warn(tickers)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "9febf045eb06d4f5"
            ]
        ]
    },
    {
        "id": "6ae3e9b107c5fdfb",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "3:45 pm",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select symbol,price_change_pct from topstocks order by  price_change_pct desc limit 30;",
        "x": 160,
        "y": 260,
        "wires": [
            [
                "bbea02fe0322a3e2"
            ]
        ]
    },
    {
        "id": "f8b420a035fa71b1",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Flow 1: Define Strategy and Set Trading Values",
        "info": "",
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "9febf045eb06d4f5",
        "type": "change",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 260,
        "wires": [
            [
                "c4f68a673477fb25",
                "5d0da0f8b02b3fcf"
            ]
        ]
    },
    {
        "id": "c4f68a673477fb25",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get tickers ",
        "func": "let ticker = msg.tickers\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [
                "cddee8a5eff2e55f"
            ]
        ]
    },
    {
        "id": "cddee8a5eff2e55f",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 260,
        "wires": [
            [
                "40613a3bb2237c78"
            ]
        ]
    },
    {
        "id": "40613a3bb2237c78",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "insert into tickers",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers (id, symbol, portfolioname) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"');\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 260,
        "wires": [
            [
                "5868b0a8daa7b9c6"
            ]
        ]
    },
    {
        "id": "5868b0a8daa7b9c6",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1240,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "c3813eef42adcbdd",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers.symbol\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "2ea6c5de9f8eacd7"
            ]
        ]
    },
    {
        "id": "5d0da0f8b02b3fcf",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 300,
        "wires": [
            [
                "c3813eef42adcbdd"
            ]
        ]
    },
    {
        "id": "2ea6c5de9f8eacd7",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1240,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e5b5bcd771cc0e37",
        "type": "mysql",
        "z": "e4a3429ac9f11afd",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 290,
        "y": 80,
        "wires": [
            [
                "d3c76cf272a49803"
            ]
        ]
    },
    {
        "id": "d3c76cf272a49803",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get fresh list of tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.symbol;\n    tickers += ticker+ \", \"\n}\n\nmsg.tickers = tickers\nmsg.portfolioname = 'Short Top Stocks'\nnode.warn(tickers)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5660ecd1647b41a8",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "3:40 pm",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "40 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select symbol,price_change_pct from topstocks order by  price_change_pct desc limit 30;",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "e5b5bcd771cc0e37"
            ]
        ]
    },
    {
        "id": "3fc70925a1d6d240",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.alpaca_symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\nlet status = msg.status\nlet diff = flow.get(\"diff\")\n\n//node.warn(\"Alpaca Symbol: \" +ticker+ \" Price: \" +price)\n\nlet qty = ((psize / number) / price)\n\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet subtag = algo_name\n\n\n// logic for sell order\nlet profit = 0\nprofit = msg.profit\n\nnode.warn(\"Ticker: \" + ticker + \" Diff: \" +diff+ \" Status: \" + status + \" Qty: \" + qty + \" Orderid: \" + client_order_id + \" Algo Name: \" + subtag)\n\n\nqty = msg.qty\nlet temp = ''\n\nlet order_type = 'limit' // select limit for limit orders\n\nif ( order_type == 'limit'){\n\n\ntemp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": 'buy',\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n}\n\nelse {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": 'buy',\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //  limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 980,
        "wires": [
            [
                "1d0eb9b46b210365"
            ]
        ]
    },
    {
        "id": "1d0eb9b46b210365",
        "type": "alpaca-order",
        "z": "e4a3429ac9f11afd",
        "conf": "e535f42f1df1b25f",
        "x": 470,
        "y": 1040,
        "wires": [
            [
                "75c1a69543a02dd0"
            ]
        ]
    },
    {
        "id": "eb28cd467255dd26",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//node.warn(ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 860,
        "wires": [
            [
                "877f3a267c78889b"
            ]
        ]
    },
    {
        "id": "877f3a267c78889b",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 490,
        "y": 860,
        "wires": [
            [
                "da596a372ca8a19c"
            ]
        ]
    },
    {
        "id": "e55c4e2208a2ed36",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get alt symbols",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 860,
        "wires": [
            [
                "f19f9c385fcf2c16"
            ]
        ]
    },
    {
        "id": "da596a372ca8a19c",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 860,
        "wires": [
            [
                "e55c4e2208a2ed36"
            ]
        ]
    },
    {
        "id": "a02c5e46a13a95e9",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 920,
        "wires": [
            [
                "4bf5a09757e3adc7"
            ]
        ]
    },
    {
        "id": "f19f9c385fcf2c16",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 860,
        "wires": [
            [
                "4a1b0e770503d32e"
            ]
        ]
    },
    {
        "id": "4a1b0e770503d32e",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 270,
        "y": 920,
        "wires": [
            [
                "a02c5e46a13a95e9"
            ]
        ]
    },
    {
        "id": "1cb17eaa81a124d9",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "ca3d85313a797f95",
                "ab0128c0285b4a71"
            ]
        ]
    },
    {
        "id": "207025abdbcabf0e",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "75c1a69543a02dd0",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1040,
        "wires": [
            [
                "207025abdbcabf0e"
            ]
        ]
    },
    {
        "id": "4bf5a09757e3adc7",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "check positions table ",
        "func": "let ticker = msg.symbol\nmsg.query = \"select * from positions where symbol = '\" +ticker+ \"';\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 920,
        "wires": [
            [
                "a9de437e17bbd5be"
            ]
        ]
    },
    {
        "id": "a9de437e17bbd5be",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 920,
        "wires": [
            [
                "922e0828531b4344"
            ]
        ]
    },
    {
        "id": "ca3d85313a797f95",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "Wait 5 secs for position table to update",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 800,
        "wires": [
            [
                "eb28cd467255dd26"
            ]
        ]
    },
    {
        "id": "922e0828531b4344",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "check curent position",
        "func": "let arr = msg.payload\nlet len = arr.length\nlet status = len // shows if payload is empty\n//node.warn(\"Status: \" +status)\n\nif ( status == 0){\n    //node.warn(\"position is 0\")\n    msg.status = 0\n} \n\nelse {\n    //node.warn(\"go to next flow\")\n    msg.status = 1\n }\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 920,
        "wires": [
            [
                "b7608ea7db619103"
            ]
        ]
    },
    {
        "id": "b7608ea7db619103",
        "type": "switch",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 980,
        "wires": [
            [
                "56f98a17463f7cac"
            ],
            []
        ]
    },
    {
        "id": "524423911f051e59",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "Get values from positions",
        "func": "let qty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\n\nnode.warn(\"Price: \" +price+ \" Qty: \" +qty+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 980,
        "wires": [
            [
                "3fc70925a1d6d240"
            ]
        ]
    },
    {
        "id": "56f98a17463f7cac",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 980,
        "wires": [
            [
                "524423911f051e59"
            ]
        ]
    },
    {
        "id": "ab0128c0285b4a71",
        "type": "alpaca-orders-close",
        "z": "e4a3429ac9f11afd",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 330,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "7b5ad214d66f6e3e",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Flow 5: Place market orders on remaining tickers at market open",
        "info": "",
        "x": 270,
        "y": 1120,
        "wires": []
    },
    {
        "id": "3d95f60eee6126ef",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "create Alpaca buy order ",
        "func": "let ticker = msg.alpaca_symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\nlet status = msg.status\nlet diff = flow.get(\"diff\")\n\n//node.warn(\"Alpaca Symbol: \" +ticker+ \" Price: \" +price)\n\nlet qty = ((psize / number) / price)\n\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet subtag = algo_name\n\n\n// logic for sell order\nlet profit = 0\nprofit = msg.profit\n\nnode.warn(\"Ticker: \" + ticker + \" Diff: \" +diff+ \" Status: \" + status + \" Qty: \" + qty + \" Orderid: \" + client_order_id + \" Algo Name: \" + subtag)\n\n\nqty = msg.qty\nlet temp = ''\n\nlet order_type = 'limit' // select limit for limit orders\n\nif ( order_type == 'limit'){\n\n\ntemp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": 'buy',\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            \"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n}\n\nelse {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": 'buy',\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        //  limit_price\": price,  // limit orders only\n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1400,
        "wires": [
            [
                "981861d5951464fb"
            ]
        ]
    },
    {
        "id": "981861d5951464fb",
        "type": "alpaca-order",
        "z": "e4a3429ac9f11afd",
        "conf": "e535f42f1df1b25f",
        "x": 490,
        "y": 1460,
        "wires": [
            [
                "dddb52feece82263"
            ]
        ]
    },
    {
        "id": "4adb848735d5e332",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//node.warn(ticker)\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1280,
        "wires": [
            [
                "8a0dd733358cc115"
            ]
        ]
    },
    {
        "id": "8a0dd733358cc115",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 1280,
        "wires": [
            [
                "ff48d2fcbda089f6"
            ]
        ]
    },
    {
        "id": "8ed77ff88a424749",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get alt symbols",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1280,
        "wires": [
            [
                "c66d540bca9540bc"
            ]
        ]
    },
    {
        "id": "ff48d2fcbda089f6",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 1280,
        "wires": [
            [
                "8ed77ff88a424749"
            ]
        ]
    },
    {
        "id": "1bd3e6c05d65e023",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1340,
        "wires": [
            [
                "c4057a034a39cc1e"
            ]
        ]
    },
    {
        "id": "c66d540bca9540bc",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 1280,
        "wires": [
            [
                "54b3be6d77e48ea2"
            ]
        ]
    },
    {
        "id": "54b3be6d77e48ea2",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 290,
        "y": 1340,
        "wires": [
            [
                "1bd3e6c05d65e023"
            ]
        ]
    },
    {
        "id": "7a19fbecce41aaf3",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "31 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1220,
        "wires": [
            [
                "e96e1b9cac548885",
                "e2c2667d1f482a88"
            ]
        ]
    },
    {
        "id": "714b27dff0dfa5c6",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "dddb52feece82263",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1460,
        "wires": [
            [
                "714b27dff0dfa5c6"
            ]
        ]
    },
    {
        "id": "c4057a034a39cc1e",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "check positions table ",
        "func": "let ticker = msg.symbol\nmsg.query = \"select * from positions where symbol = '\" +ticker+ \"';\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1340,
        "wires": [
            [
                "608041d4bb012a32"
            ]
        ]
    },
    {
        "id": "608041d4bb012a32",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 1340,
        "wires": [
            [
                "946f9b474ae9a46b"
            ]
        ]
    },
    {
        "id": "e96e1b9cac548885",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "Wait 5 secs for position table to update",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 1220,
        "wires": [
            [
                "4adb848735d5e332"
            ]
        ]
    },
    {
        "id": "946f9b474ae9a46b",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "check curent position",
        "func": "let arr = msg.payload\nlet len = arr.length\nlet status = len // shows if payload is empty\n//node.warn(\"Status: \" +status)\n\nif ( status == 0){\n    //node.warn(\"position is 0\")\n    msg.status = 0\n} \n\nelse {\n    //node.warn(\"go to next flow\")\n    msg.status = 1\n }\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1340,
        "wires": [
            [
                "6df58465ecfeeb1d"
            ]
        ]
    },
    {
        "id": "6df58465ecfeeb1d",
        "type": "switch",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "e618204579013c48"
            ],
            []
        ]
    },
    {
        "id": "3bddbd5ef79f21a5",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "Get values from positions",
        "func": "let qty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\n\nnode.warn(\"Price: \" +price+ \" Qty: \" +qty+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1400,
        "wires": [
            [
                "3d95f60eee6126ef"
            ]
        ]
    },
    {
        "id": "e618204579013c48",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 430,
        "y": 1400,
        "wires": [
            [
                "3bddbd5ef79f21a5"
            ]
        ]
    },
    {
        "id": "e2c2667d1f482a88",
        "type": "alpaca-orders-close",
        "z": "e4a3429ac9f11afd",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 350,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    }
]