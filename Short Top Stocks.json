[
    {
        "id": "e4a3429ac9f11afd",
        "type": "tab",
        "label": "Short Top Stocks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "719a02868c66af8d",
        "type": "alpaca-position-query",
        "z": "e4a3429ac9f11afd",
        "conf": "e535f42f1df1b25f",
        "x": 370,
        "y": 1640,
        "wires": [
            [
                "c118b3a979a5114e"
            ]
        ]
    },
    {
        "id": "c118b3a979a5114e",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 1640,
        "wires": [
            [
                "60b1d2f26a48a20c"
            ]
        ]
    },
    {
        "id": "9282a0b06690bd10",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Flow 1: Define Strategy and Set Trading Values (ONCE)",
        "info": "",
        "x": 240,
        "y": 100,
        "wires": []
    },
    {
        "id": "0b20651ea5a3a60a",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "define values required for adding trade to portfolio",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\n\nlet id = d\nlet login = 'pta19'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = \"Short Top Stocks\"\nlet asset_class = 'stocks' // stocks or crypto\nlet number = 10 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet benchmark = 'SPY'\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "1921bcf95b4d39ba"
            ]
        ]
    },
    {
        "id": "bb751a1726ea5a2b",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "3:46 PM",
        "props": [],
        "repeat": "",
        "crontab": "46 15 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "0b20651ea5a3a60a"
            ]
        ]
    },
    {
        "id": "1921bcf95b4d39ba",
        "type": "change",
        "z": "e4a3429ac9f11afd",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6bfdd1a48bad8d13",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Flow 2: Create new entry in algos table (ONCE)",
        "info": "",
        "x": 220,
        "y": 240,
        "wires": []
    },
    {
        "id": "acbca8b6123cd087",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "add values to algos table",
        "func": "let login = flow.get(\"login\")\nlet id = flow.get(\"id\")\nlet algo_name = flow.get(\"algo_name\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet portfolio_size = flow.get(\"psize\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_start = global.get(\"spy_current\")\n\nmsg.query = \"insert into algos (login,id,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values ('\" + login + \"','\" +id+ \"','\" +algo_name+ \"','\" +algo_type+ \"','\" +status+ \"','\" +portfolio_size+ \"','\" +benchmark+ \"','\" +benchmark_start+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "d93842fc0588e66b"
            ]
        ]
    },
    {
        "id": "d93842fc0588e66b",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "72c342da878fd285",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "3:50 PM",
        "props": [],
        "repeat": "",
        "crontab": "50 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "acbca8b6123cd087"
            ]
        ]
    },
    {
        "id": "5fd29866866ebe62",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "Display Algos",
        "props": [
            {
                "p": "query",
                "v": "select * from algos",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "delete from algos where id = 1671644577762",
                "vt": "str"
            },
            {
                "p": "query2",
                "v": "update algos set login = 'pta19'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update algos set gain_today = -158.7135149876422767159823658, gain_alltime = -158.71351498764227674, pctgain_today = 0, pctgain_alltime = 0 where algo_name = 'Buy and Sell BTCUSD on Profit Target';",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from order_confirms",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update order_confirms set subtag = 'Buy/Short SPY on News' where symbol = 'SPY'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update order_confirms set subtag = 'Trade BTCUSD'  where symbol = 'BTC/USD'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 300,
        "wires": [
            [
                "7412b1165d90c351"
            ]
        ]
    },
    {
        "id": "7412b1165d90c351",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 300,
        "wires": [
            [
                "fd0b1d99e25be11d"
            ]
        ]
    },
    {
        "id": "fd0b1d99e25be11d",
        "type": "debug",
        "z": "e4a3429ac9f11afd",
        "name": "debug 220",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 300,
        "wires": []
    },
    {
        "id": "9dc8f528f8517752",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Flow 4: Sell once profit target reached",
        "info": "",
        "x": 190,
        "y": 1500,
        "wires": []
    },
    {
        "id": "0332c19b944b325b",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.ticker\nlet qty = msg.qty\nlet price = msg.price\nlet profit = msg.profit\nlet profitpct = msg.profitpct\nlet target = flow.get(\"target\")\nlet algo_name = flow.get(\"algo_name\")\nlet subtag = algo_name\n\n//if ( profitpct > target) {\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'market',\n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\nreturn msg;\n//}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1700,
        "wires": [
            [
                "b753cf6f2dab3c8d",
                "0112e09d219cd806"
            ]
        ]
    },
    {
        "id": "b753cf6f2dab3c8d",
        "type": "alpaca-order",
        "z": "e4a3429ac9f11afd",
        "conf": "e535f42f1df1b25f",
        "x": 550,
        "y": 1700,
        "wires": [
            [
                "73e5e79007ac7107"
            ]
        ]
    },
    {
        "id": "73e5e79007ac7107",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "insert into order_confirms table",
        "func": "\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + subtag + \"', '\" + source + \"', '\" +status+ \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1700,
        "wires": [
            [
                "62a39cc39be6e683"
            ]
        ]
    },
    {
        "id": "62a39cc39be6e683",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "78681c82d946d702",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 1780,
        "wires": [
            [
                "a36e0a131079f3da"
            ]
        ]
    },
    {
        "id": "05d40a4bf54b3c6e",
        "type": "alpaca-query-order",
        "z": "e4a3429ac9f11afd",
        "conf": "e535f42f1df1b25f",
        "x": 860,
        "y": 1780,
        "wires": [
            [
                "78681c82d946d702"
            ]
        ]
    },
    {
        "id": "b2199e239e8d7997",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get last closed order paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"1\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1780,
        "wires": [
            [
                "05d40a4bf54b3c6e"
            ]
        ]
    },
    {
        "id": "a36e0a131079f3da",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "update orders confirms",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet source = msg.payload[\"source\"]\nlet subtag = flow.get(\"algo_name\")\n\n\nmsg.query = \"update order_confirms set filled_at = '\" + filled_at + \"', filled_qty = '\" + filled_qty + \"', filled_avg_price = '\" + filled_avg_price + \"', limit_price = '\" + limit_price + \"', status = '\" + status + \"', subtag = '\" + subtag+ \"', source = '\" + source + \"', extended_hours = '\" + extended_hours+ \"' where id = '\" +id+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1840,
        "wires": [
            [
                "6eacf92442c02e21"
            ]
        ]
    },
    {
        "id": "6eacf92442c02e21",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "0112e09d219cd806",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 1780,
        "wires": [
            [
                "b2199e239e8d7997"
            ]
        ]
    },
    {
        "id": "7a50d5689d1f4198",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 1560,
        "wires": [
            [
                "4b0444c29ac55bf3"
            ]
        ]
    },
    {
        "id": "c254a5c2d478f201",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get tickers",
        "func": "let algo_name = flow.get(\"algo_name\")\nmsg.query = \"select distinct symbol from order_confirms where subtag = '\" +algo_name+ \"';\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1560,
        "wires": [
            [
                "69037bb3f0f5bcac"
            ]
        ]
    },
    {
        "id": "8ab16835e6814341",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1560,
        "wires": [
            [
                "c254a5c2d478f201"
            ]
        ]
    },
    {
        "id": "69037bb3f0f5bcac",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 1560,
        "wires": [
            [
                "7a50d5689d1f4198"
            ]
        ]
    },
    {
        "id": "60b1d2f26a48a20c",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "update algos table with values from alpaca positions",
        "func": "let symbol = msg.symbol\nlet algo_name = flow.get(\"algo_name\")\n\n\nlet asset_id = msg.payload[\"asset_id\"]\nlet ticker = msg.payload[\"symbol\"]\nlet exchange = msg.payload[\"exchange\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet asset_marginable = msg.payload[\"asset_marginable\"]\nlet qty = msg.payload[\"qty\"]\nlet avg_entry_price = msg.payload[\"avg_entry_price\"]\nlet side = msg.payload[\"side\"]\nlet market_value = msg.payload[\"market_value\"]\nlet cost_basis = msg.payload[\"cost_basis\"]\nlet unrealized_pl = msg.payload[\"unrealized_pl\"]\nlet unrealized_plpc = msg.payload[\"unrealized_plpc\"]\nlet unrealized_intraday_pl = msg.payload[\"unrealized_intraday_pl\"]\nlet unrealized_intraday_plpc = msg.payload[\"unrealized_intraday_plpc\"]\nlet current_price = msg.payload[\"current_price\"]\nlet lastday_price = msg.payload[\"lastday_price\"]\nlet change_today = msg.payload[\"change_today\"]\nlet qty_available = msg.payload[\"qty_available\"]\n\nqty = parseFloat(qty)\ncurrent_price = parseFloat(current_price)\nlet market = (qty * current_price)\n\nlet profittoday = parseFloat(unrealized_intraday_pl)\nprofittoday = profittoday.toFixed(2)\n\nlet profit = parseFloat(unrealized_pl) \nprofit = profit.toFixed(2)\n\n\nlet profittodaypct = (profittoday / market) * 100 \n\nlet profitpct = (profit / market) * 100 \n\nnode.warn(\"Ticker: \" +ticker+ \" Symbol: \" +symbol)\n\nlet result = ticker.includes(symbol);\n\n\nif ( result == true ){\n    msg.ticker = symbol\n    msg.qty = qty\n    msg.price = current_price\n    msg.profit = unrealized_pl\n    msg.profitpct = unrealized_plpc\n\n    return msg;\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1640,
        "wires": [
            [
                "0332c19b944b325b"
            ]
        ]
    },
    {
        "id": "4b0444c29ac55bf3",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 790,
        "y": 1560,
        "wires": [
            [
                "fd138902dc31787c"
            ]
        ]
    },
    {
        "id": "fd138902dc31787c",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get list of tickers to buy",
        "func": "let symbol = msg.payload[\"symbol\"]\nmsg.symbol = symbol\nnode.warn(msg.symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1560,
        "wires": [
            [
                "719a02868c66af8d"
            ]
        ]
    },
    {
        "id": "40279c3368fce9f9",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "limit to 30 stocks as default",
        "info": "",
        "x": 580,
        "y": 100,
        "wires": []
    },
    {
        "id": "bbea02fe0322a3e2",
        "type": "mysql",
        "z": "e4a3429ac9f11afd",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 270,
        "y": 40,
        "wires": [
            [
                "287f67be8017e14a"
            ]
        ]
    },
    {
        "id": "287f67be8017e14a",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.symbol;\n    tickers += ticker+ \", \"\n}\n\nmsg.tickers = tickers\nmsg.portfolioname = 'Short Top Stocks'\nnode.warn(tickers)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 40,
        "wires": [
            [
                "86b753402f01d206"
            ]
        ]
    },
    {
        "id": "86b753402f01d206",
        "type": "change",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "portfolioname",
                "pt": "flow",
                "to": "portfolioname",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 40,
        "wires": [
            [
                "272a7bef1ea8db92"
            ]
        ]
    },
    {
        "id": "6ae3e9b107c5fdfb",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "3:45 pm",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select symbol,price_change_pct from topstocks order by  price_change_pct desc limit 30;",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "bbea02fe0322a3e2"
            ]
        ]
    },
    {
        "id": "85e30428694de786",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Flow 3: Create trading flow (ONCE)",
        "info": "",
        "x": 200,
        "y": 560,
        "wires": []
    },
    {
        "id": "4e8e245da7e7eff2",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'limit',\n    \"client_order_id\": client_order_id,\n    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 740,
        "wires": [
            [
                "2f5a0cac547670bb"
            ]
        ]
    },
    {
        "id": "2f5a0cac547670bb",
        "type": "alpaca-order",
        "z": "e4a3429ac9f11afd",
        "conf": "e535f42f1df1b25f",
        "x": 530,
        "y": 740,
        "wires": [
            [
                "213715dfd7d33ee2"
            ]
        ]
    },
    {
        "id": "1df270da4e22d4ca",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 620,
        "wires": [
            [
                "914f06aff589f05c"
            ]
        ]
    },
    {
        "id": "914f06aff589f05c",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 620,
        "wires": [
            [
                "19da0bfab595b27f"
            ]
        ]
    },
    {
        "id": "c1c5054071980c09",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 620,
        "wires": [
            [
                "e7cb5ad5c13a625a"
            ]
        ]
    },
    {
        "id": "24fdc7b6a307fc5d",
        "type": "function-npm",
        "z": "e4a3429ac9f11afd",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 680,
        "wires": [
            [
                "7c5105b955e88a59"
            ]
        ]
    },
    {
        "id": "19da0bfab595b27f",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 620,
        "wires": [
            [
                "c1c5054071980c09"
            ]
        ]
    },
    {
        "id": "d70d230e2a288151",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 680,
        "wires": [
            [
                "24fdc7b6a307fc5d"
            ]
        ]
    },
    {
        "id": "e7cb5ad5c13a625a",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 620,
        "wires": [
            [
                "5f8d666905b76561"
            ]
        ]
    },
    {
        "id": "5f8d666905b76561",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 680,
        "wires": [
            [
                "d70d230e2a288151"
            ]
        ]
    },
    {
        "id": "e1287c5b17215dbe",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "3:55",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "1df270da4e22d4ca",
                "9ab6b761e4730ebd",
                "4c2a1d99c924b20e"
            ]
        ]
    },
    {
        "id": "49df3af7e734c11b",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 680,
        "wires": [
            [
                "4e8e245da7e7eff2"
            ]
        ]
    },
    {
        "id": "7c5105b955e88a59",
        "type": "polygon-last-trade-v3",
        "z": "e4a3429ac9f11afd",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 940,
        "y": 680,
        "wires": [
            [
                "49df3af7e734c11b"
            ]
        ]
    },
    {
        "id": "7b12313d3be678ad",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "insert into temp_ids",
        "func": "let sql = msg.sql\nmsg.query = sql\n//node.warn(msg.sql)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 800,
        "wires": [
            [
                "4195e62a02134e5a"
            ]
        ]
    },
    {
        "id": "f53796da3bb958ee",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 800,
        "wires": [
            [
                "7b12313d3be678ad",
                "aaf8012b08446bdb"
            ]
        ]
    },
    {
        "id": "4195e62a02134e5a",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 760,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "9f6eeda96aa51f2c",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "insert into temp_ids",
        "func": "let id = msg.id\nmsg.query = \"insert into temp_ids (id) values ('\" +id+ \"');\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 840,
        "wires": [
            [
                "2925a4cf4bd288dc"
            ]
        ]
    },
    {
        "id": "aaf8012b08446bdb",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 840,
        "wires": [
            [
                "9f6eeda96aa51f2c"
            ]
        ]
    },
    {
        "id": "2925a4cf4bd288dc",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "109dde1f9c0515da",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "213715dfd7d33ee2",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\n//node.warn(msg.query)\nmsg.id = id\nmsg.sql = \"create table IF NOT EXISTS temp_ids (id VARCHAR(500) PRIMARY KEY)\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 740,
        "wires": [
            [
                "109dde1f9c0515da",
                "f53796da3bb958ee"
            ]
        ]
    },
    {
        "id": "8ed0a0968f6282d8",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get list of tickers to buy",
        "func": "let sql = \"select id from temp_ids;\"\nnode.warn(sql)\nmsg.query = sql\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1180,
        "wires": [
            [
                "97e36e952d683898"
            ]
        ]
    },
    {
        "id": "97e36e952d683898",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "dc197f0bdbb9f571"
            ]
        ]
    },
    {
        "id": "65c9f1d80fa73da2",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get list of ids to confirm",
        "func": "let id = msg.payload[\"id\"]\nnode.warn(id)\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1180,
        "wires": [
            [
                "f418e031904bd8c3"
            ]
        ]
    },
    {
        "id": "dc197f0bdbb9f571",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 1180,
        "wires": [
            [
                "812272d0f715e550"
            ]
        ]
    },
    {
        "id": "812272d0f715e550",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 890,
        "y": 1180,
        "wires": [
            [
                "65c9f1d80fa73da2"
            ]
        ]
    },
    {
        "id": "6789b04af402f110",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 1320,
        "wires": [
            [
                "9ba2cc941e257ccd"
            ]
        ]
    },
    {
        "id": "4c2a1d99c924b20e",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1180,
        "wires": [
            [
                "8ed0a0968f6282d8",
                "6789b04af402f110"
            ]
        ]
    },
    {
        "id": "f418e031904bd8c3",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get values from orders",
        "func": "let id = msg.id\nlet sql = \"select * from orders where id = '\" +id+ \"';\"\nmsg.query = sql\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1240,
        "wires": [
            [
                "c2fc01c58e505f34"
            ]
        ]
    },
    {
        "id": "c2fc01c58e505f34",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 1240,
        "wires": [
            [
                "7d83a7169d5ea5ec"
            ]
        ]
    },
    {
        "id": "7d83a7169d5ea5ec",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 1240,
        "wires": [
            [
                "5a3bff8b12d8f71e"
            ]
        ]
    },
    {
        "id": "f0e98ce4cdba9370",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "update order_confirms",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet source = msg.payload[\"source\"]\nlet subtag = flow.get(\"algo_name\")\n\n\nmsg.query = \"update order_confirms set filled_at = '\" + filled_at + \"', filled_qty = '\" + filled_qty + \"', filled_avg_price = '\" + filled_avg_price + \"', limit_price = '\" + limit_price + \"', status = '\" + status + \"', subtag = '\" + subtag+ \"', source = '\" + source + \"', extended_hours = '\" + extended_hours+ \"' where id = '\" +id+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1240,
        "wires": [
            [
                "e456da0a4522eaf7"
            ]
        ]
    },
    {
        "id": "5a3bff8b12d8f71e",
        "type": "switch",
        "z": "e4a3429ac9f11afd",
        "name": "matched",
        "property": "payload[\"id\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "id",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 900,
        "y": 1240,
        "wires": [
            [
                "f0e98ce4cdba9370"
            ],
            []
        ]
    },
    {
        "id": "46ebec3be82b34d6",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "Refresh the Orders Table - set time period for length to process orders",
        "info": "",
        "x": 430,
        "y": 900,
        "wires": []
    },
    {
        "id": "15f268a42ce7731d",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 1040,
        "wires": [
            [
                "4fe64bd5e640e09d"
            ]
        ]
    },
    {
        "id": "3bd00d16cbb507d2",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1240,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "9330d84465eca4a7",
        "type": "alpaca-query-order",
        "z": "e4a3429ac9f11afd",
        "conf": "e535f42f1df1b25f",
        "x": 720,
        "y": 1040,
        "wires": [
            [
                "15f268a42ce7731d"
            ]
        ]
    },
    {
        "id": "9dabb47d2feefb5c",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "drop orders table",
        "func": "//msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\nmsg.query = \"drop table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 940,
        "wires": [
            [
                "94b99b7a4f020d6f"
            ]
        ]
    },
    {
        "id": "94b99b7a4f020d6f",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "36ca774080c2b9e3",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get last 500 closed paper orders",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // default is 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1040,
        "wires": [
            [
                "9330d84465eca4a7"
            ]
        ]
    },
    {
        "id": "4fe64bd5e640e09d",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "insert into orders paper",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nif (qty === null) { qty = 0 }\n\n\nlet filled_qty = msg.payload[\"filled_qty\"]\nif (filled_qty === null) { filled_qty = 0 }\n\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nif (filled_avg_price === null) { filled_avg_price = 0 }\n\n\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\n\nlet limit_price = msg.payload[\"limit_price\"]\nif (limit_price === null) { limit_price = 0 }\n\nlet stop_price = msg.payload[\"stop_price\"]\nif (stop_price === null ){ stop_price = 0}\n\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\n\nlet trail_percent = msg.payload[\"trail_percent\"]\nif (trail_percent === null) { trail_percent = 0 }\n\nlet trail_price = msg.payload[\"trail_price\"]\nif (trail_price === null) { trail_price = 0 }\n\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nmsg.query = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,extended_hours,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,legs,trail_percent,trail_price,hwm,subtag,source, order_status, account) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + extended_hours + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source+ \"', 'closed', 'paper');\"\n//node.warn(symbol)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1040,
        "wires": [
            [
                "3bd00d16cbb507d2"
            ]
        ]
    },
    {
        "id": "dc13000d8a58a805",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 1000,
        "wires": [
            [
                "8a14977cf3e07950"
            ]
        ]
    },
    {
        "id": "8a14977cf3e07950",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "create orders table ",
        "func": "msg.query = \"create table IF NOT EXISTS orders (id VARCHAR(100) PRIMARY KEY, client_order_id VARCHAR(100), created_at VARCHAR(100), updated_at VARCHAR(100), submitted_at VARCHAR(100), filled_at VARCHAR(100), expired_at VARCHAR(100), canceled_at VARCHAR(100), failed_at VARCHAR(100), replaced_at VARCHAR(100), replaced_by VARCHAR(100), replaces VARCHAR(100), asset_id VARCHAR(100), symbol VARCHAR(10), asset_class VARCHAR(10), notional VARCHAR(100), qty FLOAT, filled_qty FLOAT, filled_avg_price FLOAT, order_class VARCHAR(100), order_type VARCHAR(10), type VARCHAR(100), side VARCHAR(10), time_in_force VARCHAR(10), limit_price FLOAT, stop_price FLOAT, status VARCHAR(100), extended_hours BOOLEAN NOT NULL, legs VARCHAR(100), trail_percent FLOAT, trail_price FLOAT, hwm VARCHAR(100), subtag VARCHAR(100), source varchar(100), order_status VARCHAR(10), account VARCHAR(10)) \"\n//msg.query = \"drop table orders\"\n//msg.query = \"select * from orders order by created_at desc limit 25 \"\n//msg.query = \"delete from orders\"\n//msg.query = \"update orders set id = 1671452659911, portfolioname = 'Buy Crypto Portfolio' where exchange = 'FTXU'\"\n//msg.query = \"update orders set id = 1671453742321, portfolioname = 'Buy/Short SPY on News Sentiment Daily' where symbol = 'SPY'\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1000,
        "wires": [
            [
                "dec2b5a47afe9912"
            ]
        ]
    },
    {
        "id": "dec2b5a47afe9912",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 1000,
        "wires": [
            [
                "394b50da66bbe822"
            ]
        ]
    },
    {
        "id": "394b50da66bbe822",
        "type": "debug",
        "z": "e4a3429ac9f11afd",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1000,
        "wires": []
    },
    {
        "id": "af5979b5ebc39d4e",
        "type": "comment",
        "z": "e4a3429ac9f11afd",
        "name": "update the order_confirms table from the orders",
        "info": "",
        "x": 480,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d3467f34a7948de6",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1040,
        "wires": [
            [
                "36ca774080c2b9e3"
            ]
        ]
    },
    {
        "id": "e456da0a4522eaf7",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "9ba2cc941e257ccd",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "drop table temp_ids",
        "func": "msg.query = \"select * from temp_ids\"\n//msg.query = \"drop table temp_ids\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1320,
        "wires": [
            [
                "70467072d3f0f8e2"
            ]
        ]
    },
    {
        "id": "70467072d3f0f8e2",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 1320,
        "wires": [
            [
                "2523cd142430ade3"
            ]
        ]
    },
    {
        "id": "2523cd142430ade3",
        "type": "debug",
        "z": "e4a3429ac9f11afd",
        "name": "debug 248",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1320,
        "wires": []
    },
    {
        "id": "9ab6b761e4730ebd",
        "type": "delay",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 940,
        "wires": [
            [
                "9dabb47d2feefb5c",
                "dc13000d8a58a805",
                "d3467f34a7948de6"
            ]
        ]
    },
    {
        "id": "272a7bef1ea8db92",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "get tickers ",
        "func": "let ticker = msg.tickers\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 40,
        "wires": [
            [
                "8ba22b9be3f4e523",
                "c08b37c53bd56c49"
            ]
        ]
    },
    {
        "id": "8ba22b9be3f4e523",
        "type": "split",
        "z": "e4a3429ac9f11afd",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 950,
        "y": 40,
        "wires": [
            [
                "8d1c31962f5614b9"
            ]
        ]
    },
    {
        "id": "8d1c31962f5614b9",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "insert into tickers",
        "func": "let id = msg.id\nlet symbol = msg.payload\nlet portfolioname = msg.portfolioname\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"insert into tickers (symbol, portfolioname) values ('\" + symbol + \"', '\" +portfolioname + \"');\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 40,
        "wires": [
            [
                "6ed25bdc7f5b690f"
            ]
        ]
    },
    {
        "id": "6ed25bdc7f5b690f",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1280,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c08b37c53bd56c49",
        "type": "function",
        "z": "e4a3429ac9f11afd",
        "name": "drop table temp_ids",
        "func": "//msg.query = \"select * from temp_ids\"\nmsg.query = \"drop table temp_ids\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 80,
        "wires": [
            [
                "9e6186a922848ed1"
            ]
        ]
    },
    {
        "id": "9e6186a922848ed1",
        "type": "postgresql",
        "z": "e4a3429ac9f11afd",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 80,
        "wires": [
            [
                "fcb81db5e1599f1f"
            ]
        ]
    },
    {
        "id": "fcb81db5e1599f1f",
        "type": "debug",
        "z": "e4a3429ac9f11afd",
        "name": "debug 249",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 80,
        "wires": []
    },
    {
        "id": "4c2b1de5077b9f26",
        "type": "inject",
        "z": "e4a3429ac9f11afd",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 790,
        "y": 80,
        "wires": [
            [
                "c08b37c53bd56c49"
            ]
        ]
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]