[
    {
        "id": "f9433c7bc1c24f38",
        "type": "tab",
        "label": "Short Top Stocks Paper",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9f8f24b008f5926c",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "set id,tickers, portfolioname",
        "func": "// describe algo with msg vars\n\n// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nd = 1698168098350\nmsg.id = d\nmsg.tickers = ''\nmsg.algo_name = 'Short Top Stocks Paper2'\nmsg.asset_class = 'stocks' // stocks or crypto\nmsg.number = 20 // number of tickers in portfolio\nmsg.target = 1 // target profit pct\nmsg.account = 'paper'\nmsg.psize = 20000 // size of portfolio\nmsg.status = 'running'\nmsg.algo_type = 'intraday'\nmsg.strategy_type = \"long\"\nmsg.benchmark = 'SPY'\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 240,
        "wires": [
            [
                "da6353cbea70084c"
            ]
        ]
    },
    {
        "id": "814de22e0542a7bf",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "define values required for adding trade to portfolio",
        "func": "// set flow vars for use by unconnected nodes\n\nflow.set(\"tickers\", +msg.tickers)\nflow.set(\"algo_name\", +msg.algo_name)\nflow.set(\"number\", +msg.number)\nflow.set(\"psize\", +msg.psize)\n\nnode.warn(\"Tickers: \" +msg.tickers+ \" Algo Name: \" +msg.algo_name+ \" Portfolio Size: \" +msg.psize+ \" Number of stocks: \" +msg.number)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 300,
        "wires": [
            [
                "70b8322a0422caf5",
                "bbef40676a478f75"
            ]
        ]
    },
    {
        "id": "70b8322a0422caf5",
        "type": "delay",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 300,
        "wires": [
            [
                "70cabed532db7e67"
            ]
        ]
    },
    {
        "id": "2f5b5f1eeb3b8702",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "da6353cbea70084c",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "delete existing algo",
        "func": "msg.query = \"delete from algos where algo_name = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 240,
        "wires": [
            [
                "0558951fa52e2bdf"
            ]
        ]
    },
    {
        "id": "0558951fa52e2bdf",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 240,
        "wires": [
            [
                "814de22e0542a7bf"
            ]
        ]
    },
    {
        "id": "70cabed532db7e67",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "add values to algos table",
        "func": "msg.benchmark_start = global.get(\"spy_current\")\n\nmsg.query = \"insert into algos (id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nmsg.query += \"('\" + msg.id + \"','\" + msg.account + \"','\" + msg.algo_name + \"','\" + msg.algo_type + \"','\" + msg.status + \"','\" + msg.psize + \"','\" + msg.benchmark + \"','\" + msg.benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 300,
        "wires": [
            [
                "2f5b5f1eeb3b8702"
            ]
        ]
    },
    {
        "id": "16f40937ea1dcbcd",
        "type": "comment",
        "z": "f9433c7bc1c24f38",
        "name": "Short Top Stocks [Paper]",
        "info": "",
        "x": 150,
        "y": 180,
        "wires": []
    },
    {
        "id": "a157d0b92dca7ccf",
        "type": "inject",
        "z": "f9433c7bc1c24f38",
        "name": "create algo",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "9f8f24b008f5926c"
            ]
        ]
    },
    {
        "id": "941f4dc9766e8d92",
        "type": "comment",
        "z": "f9433c7bc1c24f38",
        "name": "Please refer to the Flow Documentation detailed explanation of this flow.",
        "info": "",
        "x": 320,
        "y": 60,
        "wires": []
    },
    {
        "id": "e0339c001223571c",
        "type": "pts_oauth_browser",
        "z": "f9433c7bc1c24f38",
        "callback": "",
        "redirect": "",
        "name": "Documentation Link",
        "x": 380,
        "y": 100,
        "wires": []
    },
    {
        "id": "6138f0501adcf629",
        "type": "inject",
        "z": "f9433c7bc1c24f38",
        "name": "Click Here to Open",
        "props": [
            {
                "p": "redirect",
                "v": "https://docs.google.com/document/d/1498iFNfukfsbyQnH0yk7cM8UJ0AjFW0mHjZ4rCdKSK4/edit",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "e0339c001223571c"
            ]
        ]
    },
    {
        "id": "bbef40676a478f75",
        "type": "change",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a44ea9bf311a8a72",
        "type": "inject",
        "z": "f9433c7bc1c24f38",
        "name": "3:45 PM",
        "props": [],
        "repeat": "",
        "crontab": "45 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "79489974931adefa",
                "2d1e2a31fc41b8f6"
            ]
        ]
    },
    {
        "id": "3b6d3d3b6d4098bd",
        "type": "comment",
        "z": "f9433c7bc1c24f38",
        "name": "Insert into tickers_paper table",
        "info": "",
        "x": 160,
        "y": 400,
        "wires": []
    },
    {
        "id": "94a456dbadc1dc1d",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "set last price",
        "func": "//node.warn(msg.payload)\nmsg.price = msg.payload[\"price\"]\nflow.set(\"last_price\", +msg.price)\n\n//node.warn(\"Ticker: \" +msg.symbol+ \" Price: \" +msg.price)\nmsg.query = \"update tickers_paper set price = \" +msg.price+ \" where symbol = '\" +msg.symbol+ \"';\" \nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 720,
        "wires": [
            [
                "ee0cde91bb3e0a36"
            ]
        ]
    },
    {
        "id": "ee0cde91bb3e0a36",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "5574e9cddfcee2fb",
        "type": "comment",
        "z": "f9433c7bc1c24f38",
        "name": "Update the tickers table with current prices",
        "info": "",
        "x": 200,
        "y": 600,
        "wires": []
    },
    {
        "id": "e83a99402c4b38fe",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update table",
        "func": "msg.query = \"update tickers_paper set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_paper.symbol\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 520,
        "wires": [
            [
                "1cf745939023e2f4"
            ]
        ]
    },
    {
        "id": "1cf745939023e2f4",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 500,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "910ba8de7b188156",
        "type": "alpaca-data-last-trade",
        "z": "f9433c7bc1c24f38",
        "conf": "810ce3520dc18040",
        "symbol": "",
        "name": "",
        "x": 310,
        "y": 720,
        "wires": [
            [
                "94a456dbadc1dc1d"
            ]
        ]
    },
    {
        "id": "0579c1710f3f4302",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 500,
        "y": 660,
        "wires": [
            [
                "6f60960c0c6b49b5"
            ]
        ]
    },
    {
        "id": "6f60960c0c6b49b5",
        "type": "split",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 660,
        "wires": [
            [
                "732628bad2b5c261"
            ]
        ]
    },
    {
        "id": "732628bad2b5c261",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "store msg vars",
        "func": "msg.algo_id = msg.id\nmsg.symbol  = msg.payload[\"symbol\"]\nmsg.name = msg.payload[\"name\"]\nmsg.algo_name = msg.payload[\"algo_name\"]\nnode.warn(msg.symbol)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 660,
        "wires": [
            [
                "910ba8de7b188156"
            ]
        ]
    },
    {
        "id": "0783b86ef152adce",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "select from tickers_paper",
        "func": "msg.id = flow.get(\"id\")\nmsg.query = \"select * from tickers_paper where id = \" +msg.id+ \";\" \nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 660,
        "wires": [
            [
                "0579c1710f3f4302"
            ]
        ]
    },
    {
        "id": "d2170285ec915a35",
        "type": "inject",
        "z": "f9433c7bc1c24f38",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "0783b86ef152adce"
            ]
        ]
    },
    {
        "id": "9de0f4e371e99018",
        "type": "inject",
        "z": "f9433c7bc1c24f38",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 180,
        "wires": [
            [
                "36eb1bc42b4b1984"
            ]
        ]
    },
    {
        "id": "36eb1bc42b4b1984",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "Display Algo ID",
        "func": "msg.id = flow.get(\"id\")\nmsg.algo_name = flow.get(\"algo_name\")\nnode.warn(\"Algo ID: \" +msg.id+ \" Algo: \" +msg.algo_name)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "79489974931adefa",
        "type": "delay",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 520,
        "wires": [
            [
                "e83a99402c4b38fe"
            ]
        ]
    },
    {
        "id": "4fbe045462a2319a",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "delete tickers",
        "func": "msg.symbol = msg.payload[\"symbol\"]\nmsg.query = \"delete from tickers_paper where symbol = '\" +msg.symbol+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 460,
        "wires": [
            [
                "ba386fbcfa0d2145"
            ]
        ]
    },
    {
        "id": "ba386fbcfa0d2145",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 460,
        "wires": [
            [
                "5368f15d798083e1"
            ]
        ]
    },
    {
        "id": "2d1e2a31fc41b8f6",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "select from topstocks",
        "func": "msg.id = flow.get(\"id\")\nmsg.algo_name = flow.get(\"algo_name\")\n\nlet sql = 'select * from topstocks where price_change_pct is not null order by price_change_pct desc limit 20'\nmsg.query = sql\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 460,
        "wires": [
            [
                "3ecc24f6e316d60d"
            ]
        ]
    },
    {
        "id": "3ecc24f6e316d60d",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 500,
        "y": 460,
        "wires": [
            [
                "b92c56f30425f9f5"
            ]
        ]
    },
    {
        "id": "5368f15d798083e1",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "insert into tickers_paper",
        "func": "msg.query = \"insert into tickers_paper (symbol, portfolioname, id) values ('\" +msg.symbol+ \"','\" +msg.algo_name+ \"',\" +msg.id+ \") ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query) \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "bcb4b6eae1cfde8b"
            ]
        ]
    },
    {
        "id": "bcb4b6eae1cfde8b",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1320,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b92c56f30425f9f5",
        "type": "split",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 460,
        "wires": [
            [
                "4fbe045462a2319a"
            ]
        ]
    },
    {
        "id": "56b740454082dc88",
        "type": "comment",
        "z": "f9433c7bc1c24f38",
        "name": "calculate benchmark changes ",
        "info": "",
        "x": 160,
        "y": 1680,
        "wires": []
    },
    {
        "id": "2c114b213240cb1a",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "get spy values",
        "func": "msg.spy_current = global.get(\"spy_current\")\nmsg.spy_close = global.get(\"spy_close\")\nmsg.spy_start = global.get(\"spy_start\")\n//node.warn(\"Start: \" +msg.spy_start+ \" Curremt: \" +msg.spy_current+ \" Close: \" +msg.spy_close)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1720,
        "wires": [
            [
                "08244a51fe2b4f92"
            ]
        ]
    },
    {
        "id": "08244a51fe2b4f92",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "get algo name",
        "func": "msg.id = flow.get(\"id\")\nmsg.query = \"select * from algos  where id = \" +msg.id+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1720,
        "wires": [
            [
                "f5160d0e231334b5"
            ]
        ]
    },
    {
        "id": "f5160d0e231334b5",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 1720,
        "wires": [
            [
                "e5b3203e8f1d8b1f"
            ]
        ]
    },
    {
        "id": "e5b3203e8f1d8b1f",
        "type": "split",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 930,
        "y": 1720,
        "wires": [
            [
                "cf80327c5e719ad4"
            ]
        ]
    },
    {
        "id": "60311b2196eef2e5",
        "type": "inject",
        "z": "f9433c7bc1c24f38",
        "name": "Every Min",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "*/1 4-19 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1720,
        "wires": [
            [
                "a82c88cb6e3310ee"
            ]
        ]
    },
    {
        "id": "cf80327c5e719ad4",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "calculate benchmark changes",
        "func": "//node.warn(msg.payload)\nmsg.bench = msg.payload[\"benchmark_start\"]\n\nlet bench_change = msg.spy_current - msg.bench\nlet pctbench_change = bench_change / msg.bench * 100\nbench_change = bench_change.toFixed(3)\npctbench_change = pctbench_change.toFixed(3)\nmsg.pctbench_change = pctbench_change\n\n\nmsg.bench_today = (msg.spy_current - msg.spy_start)\nmsg.pctbench_today = (msg.bench_today / msg.spy_start) * 100\n//node.warn(msg.id + \",\" + msg.bench + \",\" + bench_change + \",\" + pctbench_change+ \",\" +msg.pctbench_today)\nmsg.query = \"update algos set pctbench_alltime = \" + msg.pctbench_change + \", pctbench_today = \" + msg.pctbench_today + \" where id = \" + msg.id + \";\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1720,
        "wires": [
            [
                "9081616186dd8f0c"
            ]
        ]
    },
    {
        "id": "9081616186dd8f0c",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 460,
        "y": 1780,
        "wires": [
            [
                "963ddf793344d5b9"
            ]
        ]
    },
    {
        "id": "963ddf793344d5b9",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update info_ratio",
        "func": "msg.query = \"update algos set info_ratio = (pctgain_alltime - pctbench_alltime) where id = '\" + msg.id + \"';\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1780,
        "wires": [
            [
                "86c23a10c942c6ab"
            ]
        ]
    },
    {
        "id": "86c23a10c942c6ab",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 820,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "a82c88cb6e3310ee",
        "type": "delay",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1720,
        "wires": [
            [
                "2c114b213240cb1a"
            ]
        ]
    },
    {
        "id": "107760a3ed0da81a",
        "type": "comment",
        "z": "f9433c7bc1c24f38",
        "name": "Algo Reporting",
        "info": "",
        "x": 120,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1c786d1e21ccde6b",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "from order_confirms",
        "func": "msg.name = flow.get(\"algo_name\")\n\n//node.warn(msg.name)\nmsg.psize = flow.get(\"psize\")\nmsg.id = flow.get(\"id\")\n\nmsg.account = flow.get(\"account\")\n\nconst dateObj = new Date();\nlet dt = dateObj.toISOString()\nlet dt1 = dt.substring(0, 10);\n//node.warn(\"Today: \" + dt1)\nmsg.today = dt1\n\ndateObj.setDate(dateObj.getDate() - 1);\nlet dt2 = dateObj.toISOString()\nlet dt3 = dt2.substring(0, 10);\n//node.warn(\"Yesterday: \" + dt3)\nmsg.yesterday = dt3\n\nlet startdate = '2023-10-01'\n\nmsg.query = \"select sum(market_value) as buys from order_confirms where side = 'buy' and algo_name = '\" +msg.name+ \"';\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1480,
        "wires": [
            [
                "f4d5381f59307b7c"
            ]
        ]
    },
    {
        "id": "f4d5381f59307b7c",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 1480,
        "wires": [
            [
                "539847c5b5cdf34f"
            ]
        ]
    },
    {
        "id": "dc9c1860da4df620",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 1540,
        "wires": [
            [
                "0a00db0ab437a4be"
            ]
        ]
    },
    {
        "id": "0a00db0ab437a4be",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "get positions",
        "func": "msg.psize = msg.payload[\"portfolio_size\"]\nmsg.id = msg.payload[\"id\"]\nmsg.account = msg.payload[\"account\"]\n\nmsg.query = \"select sum(market_value) as a from positions_paper where portfolioname = '\" + msg.name + \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1540,
        "wires": [
            [
                "010014e829966b63"
            ]
        ]
    },
    {
        "id": "010014e829966b63",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 1540,
        "wires": [
            [
                "c46edc37a91c1fbc"
            ]
        ]
    },
    {
        "id": "c46edc37a91c1fbc",
        "type": "split",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 350,
        "y": 1620,
        "wires": [
            [
                "9e65412bef0f66d0"
            ]
        ]
    },
    {
        "id": "92aa44b3ef757297",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1620,
        "wires": [
            [
                "56fbe20f324d1ee4"
            ]
        ]
    },
    {
        "id": "3dbf070b62cbb9e8",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 1620,
        "wires": [
            [
                "c9af4e158c638145"
            ]
        ]
    },
    {
        "id": "bc968c0fa9e31946",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "56fbe20f324d1ee4",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update algos2",
        "func": "let gainalltime = msg.net + msg.unrealized\ngainalltime = gainalltime.toFixed(2)\n//node.warn(\"Algo: \" +msg.name+ \" Buys: \" +msg.buys+ \" Sells: \" +msg.sells+ \" Net: \" +msg.net+ \" Unrealized: \" +msg.unrealized+ \" Gain Alltime: \" +gainalltime)\n\nmsg.query = \"update algos set gain_alltime = (net + unrealized_profit), gain_today = (net + unrealized_profit) where algo_name like '\" + msg.name + \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1620,
        "wires": [
            [
                "3dbf070b62cbb9e8"
            ]
        ]
    },
    {
        "id": "c9af4e158c638145",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update algos",
        "func": "msg.query = \"update algos set pctgain_alltime = (gain_alltime / portfolio_size) * 100, pctgain_today = (gain_alltime / portfolio_size) * 100 where algo_name like '\" + msg.name + \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1620,
        "wires": [
            [
                "bc968c0fa9e31946"
            ]
        ]
    },
    {
        "id": "3d8fdad55af37af3",
        "type": "inject",
        "z": "f9433c7bc1c24f38",
        "name": "Every Min",
        "props": [
            {
                "p": "topic",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "*/1 4-19 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1480,
        "wires": [
            [
                "8eaaa67e532edb0d"
            ]
        ]
    },
    {
        "id": "9e65412bef0f66d0",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update algos",
        "func": "let id = msg.id\n\nmsg.unrealized = msg.payload[\"a\"]\nif ( msg.unrealized === null) { msg.unrealized = 0}\n\nmsg.query = \"update algos set unrealized_profit  = \" + msg.unrealized + \" where algo_name like '\" + msg.name + \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1620,
        "wires": [
            [
                "92aa44b3ef757297"
            ]
        ]
    },
    {
        "id": "8eaaa67e532edb0d",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "calc market",
        "func": "let sql = \"update order_confirms set market_value = filled_avg_price * filled_qty;\"\n//node.warn(sql)\nmsg.query = sql\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1480,
        "wires": [
            [
                "244485f4caf33dbb"
            ]
        ]
    },
    {
        "id": "244485f4caf33dbb",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 460,
        "y": 1480,
        "wires": [
            [
                "1c786d1e21ccde6b"
            ]
        ]
    },
    {
        "id": "d8be6a94d1c16a0d",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "buys",
        "func": "msg.buys = msg.payload[\"buys\"]\n//node.warn(\"Buys: \" +msg.buys)\nmsg.query = \"select sum(market_value) as sells from order_confirms where side = 'sell' and algo_name = '\" + msg.name + \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1480,
        "wires": [
            [
                "9487e06e5fdcb5b4"
            ]
        ]
    },
    {
        "id": "539847c5b5cdf34f",
        "type": "split",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 970,
        "y": 1480,
        "wires": [
            [
                "d8be6a94d1c16a0d"
            ]
        ]
    },
    {
        "id": "9487e06e5fdcb5b4",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 340,
        "y": 1540,
        "wires": [
            [
                "a3109d8b32163bd4"
            ]
        ]
    },
    {
        "id": "7801b77cd5192457",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "sells",
        "func": "msg.sells = msg.payload[\"sells\"]\n//node.warn(\"Sells: \" +msg.sells)\nmsg.net =  msg.sells - msg.buys\n//node.warn(\"Buys: \" + msg.buys+ \" Sells: \" +msg.sells+ \" Profit: \" +msg.profit)\n\nmsg.query = \"update algos set buys = \" + msg.buys + \", sells = \" + msg.sells + \", net = \" + msg.net + \" where algo_name like '\" + msg.name + \"';\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "dc9c1860da4df620"
            ]
        ]
    },
    {
        "id": "a3109d8b32163bd4",
        "type": "split",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 1540,
        "wires": [
            [
                "7801b77cd5192457"
            ]
        ]
    },
    {
        "id": "d0059c638d51ac60",
        "type": "inject",
        "z": "f9433c7bc1c24f38",
        "name": "3:55 PM",
        "props": [],
        "repeat": "",
        "crontab": "55 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 840,
        "wires": [
            [
                "5124648c76bac5b9",
                "3baf6d7a09a38759"
            ]
        ]
    },
    {
        "id": "5124648c76bac5b9",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "select from topstocks",
        "func": "msg.id = flow.get(\"id\")\nmsg.algo_name = flow.get(\"algo_name\")\n\nlet sql = 'select * from topstocks where price_change_pct is not null order by price_change_pct desc limit 20'\nmsg.query = sql\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 840,
        "wires": [
            [
                "4ff849e2797c0184"
            ]
        ]
    },
    {
        "id": "4ff849e2797c0184",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 840,
        "wires": [
            [
                "148daaa7baeb1d1d"
            ]
        ]
    },
    {
        "id": "148daaa7baeb1d1d",
        "type": "split",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 840,
        "wires": [
            [
                "4df3e0106e830c46"
            ]
        ]
    },
    {
        "id": "e1cc0b87a6867243",
        "type": "comment",
        "z": "f9433c7bc1c24f38",
        "name": "Short topstocks at 3:55 PM",
        "info": "",
        "x": 160,
        "y": 800,
        "wires": []
    },
    {
        "id": "29c676edb74a6b13",
        "type": "comment",
        "z": "f9433c7bc1c24f38",
        "name": "Cover all short positions at 9:30 am",
        "info": "",
        "x": 180,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4f041ecbfa14cf92",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "select shorts from positions_paper",
        "func": "//msg.query = \"select * from positions_paper where side = 'short'\"\nmsg.query = \"select * from positions_paper where portfolioname = 'Short Top Stocks Paper';\"\n//msg.query = \"select * from positions_paper where side = 'short'\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1180,
        "wires": [
            [
                "7606118cfb45ff7e"
            ]
        ]
    },
    {
        "id": "c3f38c4ee0dcb228",
        "type": "inject",
        "z": "f9433c7bc1c24f38",
        "name": "9:30 AM",
        "props": [],
        "repeat": "",
        "crontab": "30 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 1180,
        "wires": [
            [
                "4f041ecbfa14cf92",
                "f412e4fb60b98eaf"
            ]
        ]
    },
    {
        "id": "6a351799e0d6c21f",
        "type": "split",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1180,
        "wires": [
            [
                "73b66022f3d448a6"
            ]
        ]
    },
    {
        "id": "abb90f13d1bbf192",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "create order ",
        "func": "msg.ticker = msg.payload[\"symbol\"]\nmsg.qty = msg.payload[\"qty\"]\nmsg.algo_id = flow.get(\"id\")\nmsg.algo_name = flow.get(\"algo_name\")\n\nnode.warn(\"Symbol: \" +msg.symbol+ \" Qty: \" +msg.qty+ \" Algo Name: \" +msg.algo_name)\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet ticker = msg.ticker\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = msg.algo_name\n\nif ( msg.qty < 0){\n// create a order for Alpaca\nmsg.qty = msg.payload[\"qty\"] * -1\n\n\nlet temp = ''\ntemp = {\n    \"symbol\": msg.ticker,\n    \"qty\": msg.qty,\n    \"side\": 'buy',\n    \"type\": 'market',\n //   \"extended_time\": true,\n    \"client_order_id\": client_order_id,\n //   \"limit_price\": msg.price,\n    //    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nnode.warn(temp)\nmsg.payload = temp\nreturn msg;\n}\n\nif (msg.qty > 0) {\n   // create a order for Alpaca\n\n   let temp = ''\n   temp = {\n      \"symbol\": msg.ticker,\n      \"qty\": msg.qty,\n      \"side\": 'sell',\n      \"type\": 'market',\n      //   \"extended_time\": true,\n      \"client_order_id\": client_order_id,\n      //   \"limit_price\": msg.price,\n      //    \"subtag\": subtag,\n      \"time_in_force\": \"gtc\"\n   };\n\n   node.warn(temp)\n   msg.payload = temp\n   return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1240,
        "wires": [
            [
                "81cf7e52b8169224"
            ]
        ]
    },
    {
        "id": "7606118cfb45ff7e",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1180,
        "wires": [
            [
                "6a351799e0d6c21f"
            ]
        ]
    },
    {
        "id": "191407c74b469820",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "display order response",
        "func": "let algo_name = flow.get(\"algo_name\")\nlet algo_id = flow.get(\"id\")\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif ( subtag == null){ subtag = ''}\n\nif ( source == null) { source = 0}\nif (limit_price == null) { limit_price = 0 }\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nif ( limit_price == null){ limit_price = 0}\nif ( stop_price == null){ stop_price = 0}\n\nmsg.query = \"insert into order_confirms (id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, limit_price, stop_price, status, extended_hours, subtag, algo_id, algo_name) values \"\nmsg.query += \"('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + qty + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + extended_hours + \"','\" + subtag+ \"',\" +algo_id+ \",'\" +algo_name+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1240,
        "wires": [
            [
                "f20623d0debf5eea"
            ]
        ]
    },
    {
        "id": "f20623d0debf5eea",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "d4c66a9c0dbb9bfd",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update order_confirms with complete orders",
        "func": "msg.query = \"update order_confirms set filled_at = orders_paper.filled_at, asset_id = orders_paper.asset_id, symbol = orders_paper.symbol, asset_class = orders_paper.asset_class, qty = orders_paper.qty, filled_qty = orders_paper.filled_qty, filled_avg_price = orders_paper.filled_avg_price, order_type = orders_paper.order_type, type = orders_paper.type, side = orders_paper.side, time_in_force = orders_paper.time_in_force, limit_price = orders_paper.limit_price, stop_price = orders_paper.stop_price, status = orders_paper.status, extended_hours = orders_paper.extended_hours, trail_percent = orders_paper.trail_percent, trail_price = orders_paper.trail_price  FROM orders_paper where orders_paper.id = order_confirms.id\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1300,
        "wires": [
            [
                "3e2353152948df67"
            ]
        ]
    },
    {
        "id": "3e2353152948df67",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 1300,
        "wires": [
            [
                "395d5ccb60c67bb8"
            ]
        ]
    },
    {
        "id": "f412e4fb60b98eaf",
        "type": "delay",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 1300,
        "wires": [
            [
                "d4c66a9c0dbb9bfd"
            ]
        ]
    },
    {
        "id": "395d5ccb60c67bb8",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update id, algo_name",
        "func": "msg.id = flow.get(\"id\")\nmsg.algo_name = flow.get(\"algo_name\")\nmsg.query = \"update order_confirms set algo_id = \" +msg.id+ \", algo_name = '\" +msg.algo_name+ \"' where subtag = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1300,
        "wires": [
            [
                "c0b2edb2f3f894cf"
            ]
        ]
    },
    {
        "id": "c0b2edb2f3f894cf",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1140,
        "y": 1300,
        "wires": [
            [
                "3c6b7287cd503bf8"
            ]
        ]
    },
    {
        "id": "3c6b7287cd503bf8",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update names in positions",
        "func": "msg.query = \"update positions set portfolioname = tickers_paper.portfolioname, id = tickers_paper.id, name = tickers_paper.name FROM tickers_paper where tickers_paper.symbol = positions.symbol\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1360,
        "wires": [
            [
                "b9b9b5fc6b52941a"
            ]
        ]
    },
    {
        "id": "b9b9b5fc6b52941a",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "81cf7e52b8169224",
        "type": "alpaca-order",
        "z": "f9433c7bc1c24f38",
        "conf": "c06cec183f9317f9",
        "x": 510,
        "y": 1240,
        "wires": [
            [
                "191407c74b469820"
            ]
        ]
    },
    {
        "id": "73b66022f3d448a6",
        "type": "delay",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 1180,
        "wires": [
            [
                "abb90f13d1bbf192"
            ]
        ]
    },
    {
        "id": "d12f12c8f7e6e20f",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update order_confirms with complete orders",
        "func": "msg.query = \"update order_confirms set filled_at = orders_paper.filled_at, asset_id = orders_paper.asset_id, symbol = orders_paper.symbol, asset_class = orders_paper.asset_class, qty = orders_paper.qty, filled_qty = orders_paper.filled_qty, filled_avg_price = orders_paper.filled_avg_price, order_type = orders_paper.order_type, type = orders_paper.type, side = orders_paper.side, time_in_force = orders_paper.time_in_force, limit_price = orders_paper.limit_price, stop_price = orders_paper.stop_price, status = orders_paper.status, extended_hours = orders_paper.extended_hours, trail_percent = orders_paper.trail_percent, trail_price = orders_paper.trail_price  FROM orders_paper where orders_paper.id = order_confirms.id\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "58e232234c1b4025"
            ]
        ]
    },
    {
        "id": "58e232234c1b4025",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 1000,
        "wires": [
            [
                "3810f5924b6cd7b5"
            ]
        ]
    },
    {
        "id": "3baf6d7a09a38759",
        "type": "delay",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1000,
        "wires": [
            [
                "d12f12c8f7e6e20f"
            ]
        ]
    },
    {
        "id": "3810f5924b6cd7b5",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update id, algo_name",
        "func": "msg.id = flow.get(\"id\")\nmsg.algo_name = flow.get(\"algo_name\")\nmsg.query = \"update order_confirms set algo_id = \" +msg.id+ \", algo_name = '\" +msg.algo_name+ \"' where subtag = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1000,
        "wires": [
            [
                "4c07cd0eb04983f6"
            ]
        ]
    },
    {
        "id": "4c07cd0eb04983f6",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1100,
        "y": 1000,
        "wires": [
            [
                "7ad985bd9b225382"
            ]
        ]
    },
    {
        "id": "7ad985bd9b225382",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "update names in positions",
        "func": "msg.query = \"update positions set portfolioname = tickers_paper.portfolioname, id = tickers_paper.id, name = tickers_paper.name FROM tickers_paper where tickers_paper.symbol = positions.symbol\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1060,
        "wires": [
            [
                "e652cbc733b527a4"
            ]
        ]
    },
    {
        "id": "e652cbc733b527a4",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "4df3e0106e830c46",
        "type": "delay",
        "z": "f9433c7bc1c24f38",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 840,
        "wires": [
            [
                "de1676789ef274fa"
            ]
        ]
    },
    {
        "id": "de1676789ef274fa",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "create order",
        "func": "msg.ticker = msg.payload[\"symbol\"]\nmsg.price = msg.payload[\"price\"]\nmsg.id = msg.payload[\"id\"]\nmsg.algo_name = msg.payload[\"algo_name\"]\n\n\n// get flow vars\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet sql = ''\n\nmsg.price = msg.price.toFixed(2)\nlet qty = ((psize / number) / msg.price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet ticker = msg.ticker\nticker = ticker.replace(\"/\", \"\")\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = msg.algo_name\n\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n   \"symbol\": msg.ticker,\n   \"qty\": qty,\n   \"side\": 'sell',\n   \"type\": 'market',\n   //   \"extended_time\": true,\n   \"client_order_id\": client_order_id,\n   //   \"limit_price\": msg.price,\n   //    \"subtag\": subtag,\n   \"time_in_force\": \"gtc\"\n};\n\nnode.warn(temp)\nmsg.payload = temp\nreturn msg; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 900,
        "wires": [
            [
                "15ff6e317145c12c"
            ]
        ]
    },
    {
        "id": "b4f3c995869929c6",
        "type": "function",
        "z": "f9433c7bc1c24f38",
        "name": "display order response",
        "func": "let algo_name = flow.get(\"algo_name\")\nlet algo_id = flow.get(\"id\")\n\nlet id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nif ( subtag == null){ subtag = ''}\n\nif ( source == null) { source = 0}\nif (limit_price == null) { limit_price = 0 }\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nif ( limit_price == null){ limit_price = 0}\nif ( stop_price == null){ stop_price = 0}\n\nmsg.query = \"insert into order_confirms (id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, limit_price, stop_price, status, extended_hours, subtag, algo_id, algo_name) values \"\nmsg.query += \"('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + qty + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + extended_hours + \"','\" + subtag+ \"',\" +algo_id+ \",'\" +algo_name+ \"');\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 900,
        "wires": [
            [
                "83c0975b2b0d469b"
            ]
        ]
    },
    {
        "id": "83c0975b2b0d469b",
        "type": "postgresql",
        "z": "f9433c7bc1c24f38",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "15ff6e317145c12c",
        "type": "alpaca-order",
        "z": "f9433c7bc1c24f38",
        "conf": "c06cec183f9317f9",
        "x": 530,
        "y": 900,
        "wires": [
            [
                "b4f3c995869929c6"
            ]
        ]
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "810ce3520dc18040",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "USE-OAUTH-OR-REPLACE",
        "paper": false
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "USE-OAUTH-OR-REPLACE",
        "paper": true
    }
]