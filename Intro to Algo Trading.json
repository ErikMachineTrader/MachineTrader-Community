[
    {
        "id": "9bb81b8e23df4f99",
        "type": "tab",
        "label": "Intro to Algo Trading",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "303fc1b37d5d4759",
        "type": "comment",
        "z": "9bb81b8e23df4f99",
        "name": "Buy Crypto Portfolio",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "6a87ad21e06312de",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "Create Portfolio",
        "func": "msg.payload = flow.get(\"tickers\")\n//node.warn(\"Tickers: \" +msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 420,
        "wires": [
            [
                "49bdef96d3d5b77c"
            ]
        ]
    },
    {
        "id": "e5c31c82b2e1bfe9",
        "type": "inject",
        "z": "9bb81b8e23df4f99",
        "name": "Go ",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "36d90a9836531ca5",
                "f7c6518d3a18d0c5"
            ]
        ]
    },
    {
        "id": "e1e4e8094363f7a5",
        "type": "comment",
        "z": "9bb81b8e23df4f99",
        "name": "Flow #1: Set ticker, quantity and portfolio_id",
        "info": "",
        "x": 210,
        "y": 120,
        "wires": []
    },
    {
        "id": "2d9ac720a85a3340",
        "type": "function-npm",
        "z": "9bb81b8e23df4f99",
        "name": "Get current price",
        "func": "let tickertype = flow.get(\"tickertype\")\nlet symbol = msg.payload\n\nif ( tickertype == 'crypto'){\n\n    symbol = \"X:\" +symbol\n    symbol = symbol.replace(\"/\", \"\");\n}\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nmsg.symbol = symbol\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 420,
        "wires": [
            [
                "95bcc9a7da0598e8"
            ]
        ]
    },
    {
        "id": "41f866fd2b89c0be",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get price last trade",
        "func": "let price = ''\nlet item = 0\nlet symbol = msg.symbol\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nmsg.price = price\n//node.warn(\"Symbol: \" +symbol+ \" Current Price: \" +price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 420,
        "wires": [
            [
                "07c4269f6647bb8f"
            ]
        ]
    },
    {
        "id": "95bcc9a7da0598e8",
        "type": "polygon-last-trade-v3",
        "z": "9bb81b8e23df4f99",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 860,
        "y": 420,
        "wires": [
            [
                "41f866fd2b89c0be"
            ]
        ]
    },
    {
        "id": "36d90a9836531ca5",
        "type": "function-npm",
        "z": "9bb81b8e23df4f99",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 360,
        "wires": [
            [
                "bc74ba8563b2c978"
            ]
        ]
    },
    {
        "id": "44f4285aec580a4f",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\nnode.warn(\"Benchmark Price: \" +price)\nmsg.benchmark = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 360,
        "wires": [
            [
                "e2de66a386cc195b"
            ]
        ]
    },
    {
        "id": "bc74ba8563b2c978",
        "type": "polygon-last-trade-v3",
        "z": "9bb81b8e23df4f99",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 560,
        "y": 360,
        "wires": [
            [
                "44f4285aec580a4f"
            ]
        ]
    },
    {
        "id": "e2de66a386cc195b",
        "type": "change",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "benchmark_price",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 360,
        "wires": [
            [
                "6a87ad21e06312de"
            ]
        ]
    },
    {
        "id": "49bdef96d3d5b77c",
        "type": "split",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 330,
        "y": 420,
        "wires": [
            [
                "9f6dd79f54210321"
            ]
        ]
    },
    {
        "id": "9f6dd79f54210321",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 420,
        "wires": [
            [
                "2d9ac720a85a3340"
            ]
        ]
    },
    {
        "id": "524ab3aa7b357f92",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 680,
        "y": 40,
        "wires": [
            [
                "d86ce3f425b9aa04"
            ]
        ]
    },
    {
        "id": "bced8c0efbc99a27",
        "type": "inject",
        "z": "9bb81b8e23df4f99",
        "name": "display portfolio",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select * from portfolio",
        "x": 520,
        "y": 40,
        "wires": [
            [
                "524ab3aa7b357f92"
            ]
        ]
    },
    {
        "id": "d86ce3f425b9aa04",
        "type": "debug",
        "z": "9bb81b8e23df4f99",
        "name": "Display Portfolio",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 40,
        "wires": []
    },
    {
        "id": "143348acd92c4f38",
        "type": "inject",
        "z": "9bb81b8e23df4f99",
        "name": "Display ALGO table",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select * from algo",
        "x": 530,
        "y": 80,
        "wires": [
            [
                "1f27c7d60c4b2d5a"
            ]
        ]
    },
    {
        "id": "1f27c7d60c4b2d5a",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "53728b47003f9caf",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 690,
        "y": 80,
        "wires": [
            [
                "27205f72b217c59c"
            ]
        ]
    },
    {
        "id": "27205f72b217c59c",
        "type": "debug",
        "z": "9bb81b8e23df4f99",
        "name": "Display algo",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 80,
        "wires": []
    },
    {
        "id": "e60c769c7045c32e",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            [
                "b43daeac4b17298e"
            ]
        ]
    },
    {
        "id": "b43daeac4b17298e",
        "type": "alpaca-query-order",
        "z": "9bb81b8e23df4f99",
        "conf": "e535f42f1df1b25f",
        "x": 600,
        "y": 720,
        "wires": [
            [
                "07dd94dd434fb828"
            ]
        ]
    },
    {
        "id": "125a6516b4b9f1b2",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((status == 'filled') && (clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  filled_type = '\" +type+ \"', filled_side = '\" + side + \"', filled_tif = '\" + time_in_force + \"', filled_status = '\" + status + \"', filled_at = '\" + filled_at + \"', filled_price = '\" + filled_avg_price + \"', filled_qty = '\" + filled_qty + \"', position = \" +position+ \" where clientorderid = '\" +clientorderid+ \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 720,
        "wires": [
            [
                "95f67ba2199ba091"
            ]
        ]
    },
    {
        "id": "07dd94dd434fb828",
        "type": "split",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 720,
        "wires": [
            [
                "125a6516b4b9f1b2"
            ]
        ]
    },
    {
        "id": "95f67ba2199ba091",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1100,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "0f8da2d51454dae2",
        "type": "alpaca-order",
        "z": "9bb81b8e23df4f99",
        "conf": "e535f42f1df1b25f",
        "x": 970,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "86196a6680307294",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 960,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "6ddfa930f5ea5e25",
        "type": "alpaca-position-query",
        "z": "9bb81b8e23df4f99",
        "conf": "e535f42f1df1b25f",
        "x": 390,
        "y": 1060,
        "wires": [
            [
                "dcbbfaa9c4bade1a"
            ]
        ]
    },
    {
        "id": "a5fa65a90ae7c06d",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1060,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "dcbbfaa9c4bade1a",
        "type": "split",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 1060,
        "wires": [
            [
                "94e41bf827013dd6"
            ]
        ]
    },
    {
        "id": "94e41bf827013dd6",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "update portfolio",
        "func": "let d = new Date()\nlet sql = ''\nlet symbol = msg.ticker\nlet benchmark_end = flow.get(\"benchmark_end\")\nlet id = flow.get(\"portfolioid\")\nlet tickertype = flow.get(\"tickertype\")\n\n// for Crypto, Alpaca deletes the \"/\" so it has to be added back in to match the portfolio\nlet ticker = msg.payload[\"symbol\"]\nif ( tickertype == 'crypto'){\n    ticker = ticker.replace(\"USD\",\"/USD\")\n}\n\n\n\nlet qty = msg.payload[\"qty\"] // for crypto, this is less than the filled_qty due to commissions\nlet current_price = msg.payload[\"current_price\"]\nlet entry_price = msg.payload[\"avg_entry_price\"]\nlet gain_today = msg.payload[\"unrealized_intraday_pl\"]\nlet pctgain_today = msg.payload[\"unrealized_intraday_plpc\"]\nlet gain = msg.payload[\"unrealized_pl\"]\nlet pctgain = msg.payload[\"unrealized_plpc\"]\n\nlet current_value = (qty * current_price)\nlet current_profit = gain_today\nlet gainlosspct = pctgain_today\n\n//node.warn(\"Ticker: \" +ticker+ \" Symbol: \" +symbol)\n\nif (ticker == symbol){\n    sql = \"update portfolio set benchmark_end = \" +benchmark_end+ \", current_profit = \" +current_profit+ \", gainlosspct = \" +gainlosspct+ \", current_position = \" + qty + \", current_price = \" + current_price + \", current_value = \" +current_value+ \"  where ticker = '\" + symbol + \"' and portfolioid = \" +id+ \";\" \n\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1060,
        "wires": [
            [
                "e665944bb7709220",
                "a5fa65a90ae7c06d"
            ]
        ]
    },
    {
        "id": "c09e321119cb9503",
        "type": "comment",
        "z": "9bb81b8e23df4f99",
        "name": "Flow #4: Update portfolio each minute with current positions",
        "info": "",
        "x": 240,
        "y": 880,
        "wires": []
    },
    {
        "id": "f224cc6117fb335b",
        "type": "inject",
        "z": "9bb81b8e23df4f99",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 940,
        "wires": [
            [
                "1ad12f59331ef3ee",
                "99739dcc50b783c5"
            ]
        ]
    },
    {
        "id": "64ab4f027d03991a",
        "type": "change",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "clientorderid",
                "pt": "flow",
                "to": "clientorderid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "1ad12f59331ef3ee",
        "type": "function-npm",
        "z": "9bb81b8e23df4f99",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 940,
        "wires": [
            [
                "b3e209c707910705"
            ]
        ]
    },
    {
        "id": "439f163248c1c152",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get benchmark last trade",
        "func": "let price = 0\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\n//node.warn(price)\nmsg.benchmark = price\n\nlet benchmark_start = flow.get(\"benchmark_price\")\nlet benchmarkgain = (price - benchmark_start)\nlet benchmarkpct = benchmarkgain / benchmark_start\n\nlet sql = \"update algo set benchmarkgain = \" +benchmarkgain+ \", benchmarkpct = \" +benchmarkpct+ \" where id = \" +id\n//node.warn(sql)\nmsg.topic = sql\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 940,
        "wires": [
            [
                "b81c7c8d4138fdf1",
                "38e2c691f66e3cfd"
            ]
        ]
    },
    {
        "id": "b3e209c707910705",
        "type": "polygon-last-trade-v3",
        "z": "9bb81b8e23df4f99",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 620,
        "y": 940,
        "wires": [
            [
                "439f163248c1c152"
            ]
        ]
    },
    {
        "id": "b81c7c8d4138fdf1",
        "type": "change",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "benchmark_end",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "3ca915d41edf5856",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "calculate portfolio fields",
        "func": "let id = flow.get(\"portfolioid\")\nlet sql = \"update portfolio SET benchmark_profit = (benchmark_end - benchmark_start) where portfolioid = \" +id \nmsg.topic = sql\n//node.warn(msg.topic)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1120,
        "wires": [
            [
                "a5fa65a90ae7c06d"
            ]
        ]
    },
    {
        "id": "e665944bb7709220",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 1120,
        "wires": [
            [
                "287dbd6e44e8e406",
                "3ca915d41edf5856"
            ]
        ]
    },
    {
        "id": "0e820a60377c9a22",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "calculate portfolio fields",
        "func": "let id = flow.get(\"portfolioid\")\nlet sql = \"update portfolio SET benchmark_profitpct = (benchmark_profit / benchmark_start) where portfolioid = \" +id \nmsg.topic = sql\n//node.warn(msg.topic)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1160,
        "wires": [
            [
                "a5fa65a90ae7c06d"
            ]
        ]
    },
    {
        "id": "287dbd6e44e8e406",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 1160,
        "wires": [
            [
                "0e820a60377c9a22"
            ]
        ]
    },
    {
        "id": "38e2c691f66e3cfd",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "53728b47003f9caf",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 1050,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "35e1e1c259a4180b",
        "type": "comment",
        "z": "9bb81b8e23df4f99",
        "name": "Flow #5: Place Sell Orders",
        "info": "",
        "x": 130,
        "y": 1200,
        "wires": []
    },
    {
        "id": "3bf975a7c965b268",
        "type": "comment",
        "z": "9bb81b8e23df4f99",
        "name": "Flow 3: Update portfolio table with order information when order is filled",
        "info": "",
        "x": 270,
        "y": 600,
        "wires": []
    },
    {
        "id": "3f6e6134f9ee3550",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select clientorderid from portfolio where portfolioid = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 660,
        "wires": [
            [
                "1592df33df91c885"
            ]
        ]
    },
    {
        "id": "1592df33df91c885",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 620,
        "y": 660,
        "wires": [
            [
                "aeadeda7253615ad"
            ]
        ]
    },
    {
        "id": "d5ce2232333f7faa",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"clientorderid\"]\nmsg.clientid = clientorderid\nnode.warn(msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 660,
        "wires": [
            [
                "e60c769c7045c32e"
            ]
        ]
    },
    {
        "id": "aeadeda7253615ad",
        "type": "split",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 660,
        "wires": [
            [
                "913ad603a2e4c051"
            ]
        ]
    },
    {
        "id": "913ad603a2e4c051",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 890,
        "y": 660,
        "wires": [
            [
                "d5ce2232333f7faa"
            ]
        ]
    },
    {
        "id": "99739dcc50b783c5",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get ticker from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select ticker from portfolio where portfolioid = \" +id\nmsg.topic = sql\n//node.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1000,
        "wires": [
            [
                "fbd8cefe64ccc559"
            ]
        ]
    },
    {
        "id": "fbd8cefe64ccc559",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 520,
        "y": 1000,
        "wires": [
            [
                "c3172477742fb8a4"
            ]
        ]
    },
    {
        "id": "1fce72a3c3bc6ece",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "pass ticker",
        "func": "msg.ticker = msg.payload[\"ticker\"]\nnode.warn(msg.ticker)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1000,
        "wires": [
            [
                "6ddfa930f5ea5e25"
            ]
        ]
    },
    {
        "id": "c3172477742fb8a4",
        "type": "split",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 1000,
        "wires": [
            [
                "017d5b4e44e6f9a4"
            ]
        ]
    },
    {
        "id": "017d5b4e44e6f9a4",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "1fce72a3c3bc6ece"
            ]
        ]
    },
    {
        "id": "60668ef353f02439",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get price last trade",
        "func": "let price = ''\nlet item = 0\nlet qty = msg.qty\nlet clientid = msg.clientid\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nlet tickertype = flow.get(\"tickertype\")\nlet ticker = msg.symbol\n\n\nif (tickertype == 'crypto') {\n\n    ticker = ticker.replace(\"X:\", \"\");\n    ticker = ticker.replace(\"USD\", \"/USD\");  // this works only if the currency is USD\n    msg.symbol = ticker\n\n}\n\n\nmsg.price = price\nnode.warn(\"Symbol: \" +ticker+ \" Current Price: \" +price+ \" Qty: \" +qty+ \" Client ID: \" +clientid)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1460,
        "wires": [
            [
                "6446d32b6f5da1c2"
            ]
        ]
    },
    {
        "id": "414921c4a4709919",
        "type": "polygon-last-trade-v3",
        "z": "9bb81b8e23df4f99",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 620,
        "y": 1460,
        "wires": [
            [
                "60668ef353f02439"
            ]
        ]
    },
    {
        "id": "4a8c1a0477886fd7",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 940,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "a53cb51e7c8041f1",
        "type": "comment",
        "z": "9bb81b8e23df4f99",
        "name": "Flow 6: Update portfolio table with filled SELL orders",
        "info": "",
        "x": 190,
        "y": 1620,
        "wires": []
    },
    {
        "id": "74909a0d9dbb3bf0",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get last open position from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select * from portfolio where current_position > 0 and portfolioid = \" +id+ \";\"\nmsg.topic = sql\nnode.warn(msg.topic)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1400,
        "wires": [
            [
                "e7d462f6c125aa12"
            ]
        ]
    },
    {
        "id": "e7d462f6c125aa12",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 700,
        "y": 1400,
        "wires": [
            [
                "a21fdf533fd24971"
            ]
        ]
    },
    {
        "id": "def09364f609e34f",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "place market sell order",
        "func": "let id = flow.get(\"portfolioid\")\n\n\nlet benchmark_end = flow.get(\"benchmark_end\")\n\nlet ticker = msg.symbol\nlet qty = msg.qty\nlet price = msg.price\nlet position = qty * price \nlet clientid = msg.clientid\n\nlet d = Date.now()\nlet newclient_order_id = \"SELL\" + ticker + d\n\nlet sql = \"update portfolio set benchmark_end = \" + benchmark_end + \", newclient_order_id = '\" + newclient_order_id + \"', newqty = \" + qty + \", newprice = \" +price+ \", newposition = \" + position + \" where clientorderid = '\" + clientid + \"';\" \n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n// create a market order for Alpaca\n\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": \"sell\",\n    \"type\": \"market\",\n//    \"limit_price\": price,\n    \"client_order_id\": newclient_order_id,\n    \"time_in_force\": \"gtc\"\n};\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1520,
        "wires": [
            [
                "d86884c1b173a790",
                "4a8c1a0477886fd7"
            ]
        ]
    },
    {
        "id": "a21fdf533fd24971",
        "type": "split",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 850,
        "y": 1400,
        "wires": [
            [
                "373d0cbc3b99170f"
            ]
        ]
    },
    {
        "id": "d86884c1b173a790",
        "type": "alpaca-order",
        "z": "9bb81b8e23df4f99",
        "conf": "e535f42f1df1b25f",
        "x": 950,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "53cb990be3c72aef",
        "type": "function-npm",
        "z": "9bb81b8e23df4f99",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 1280,
        "wires": [
            [
                "4f4cd05d04ab2df1"
            ]
        ]
    },
    {
        "id": "c0c4875840deb956",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nmsg.benchmark = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1280,
        "wires": [
            [
                "772b98503b6b69a2"
            ]
        ]
    },
    {
        "id": "4f4cd05d04ab2df1",
        "type": "polygon-last-trade-v3",
        "z": "9bb81b8e23df4f99",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 680,
        "y": 1280,
        "wires": [
            [
                "c0c4875840deb956"
            ]
        ]
    },
    {
        "id": "772b98503b6b69a2",
        "type": "change",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "benchmark_end",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "5d6e1dae6d5d8ec2",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 1280,
        "wires": [
            [
                "53cb990be3c72aef",
                "5f295fdde6c15142"
            ]
        ]
    },
    {
        "id": "5f295fdde6c15142",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 1400,
        "wires": [
            [
                "74909a0d9dbb3bf0"
            ]
        ]
    },
    {
        "id": "bcb945b8364b8b2a",
        "type": "inject",
        "z": "9bb81b8e23df4f99",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1280,
        "wires": [
            [
                "5d6e1dae6d5d8ec2",
                "c36338802f2f7de5"
            ]
        ]
    },
    {
        "id": "373d0cbc3b99170f",
        "type": "function-npm",
        "z": "9bb81b8e23df4f99",
        "name": "Get current price",
        "func": "let symbol = msg.payload[\"ticker\"]\nlet tickertype = flow.get(\"tickertype\")\nmsg.qty = msg.payload[\"current_position\"]\nmsg.clientid = msg.payload[\"clientorderid\"]\n\n//node.warn(\"Symbol: \" +symbol+ \" Tickertype: \" +tickertype)\n\nif ( (tickertype == 'crypto') ){\nsymbol = \"X:\" +symbol\nsymbol = symbol.replace(\"/\", \"\");\n}\n\n//node.warn(\"Symbol: \" + symbol + \" Tickertype: \" + tickertype)\n\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(msg.payload)\n\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 1460,
        "wires": [
            [
                "414921c4a4709919"
            ]
        ]
    },
    {
        "id": "b760203bbcb975bb",
        "type": "inject",
        "z": "9bb81b8e23df4f99",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "00 18 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "8a19a7ad89c480e7",
                "c45bcae378dd8bd6"
            ]
        ]
    },
    {
        "id": "8a19a7ad89c480e7",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "set and store portfolio and ticker variables",
        "func": "let tickers = 'BTC/USD,DOGE/USD,ETH/USD,SOL/USD'\nlet number = 4 // number of assets to purchase\nlet ticker_type = \"crypto\"\nlet portfolio_id = 1\nlet name = \"Trade Portfolio of Cryptos (ID = 1)\"\nlet status = \"running\"\nlet trade_freq = 10\nlet benchmark = 'SPY'\nlet account = \"paper\"\nlet portfolio_size = 50000\n\n\nmsg.tickers = tickers\nmsg.number = number\nmsg.tickertype = ticker_type\nmsg.portfolio = portfolio_id\nmsg.name = name\nmsg.status = status\nmsg.trade = trade_freq\nmsg.benchmark = benchmark\nmsg.account = account\nmsg.psize = portfolio_size \n\nnode.warn(\" Name:\" +name+ \" Tickers: \" +tickers+ \" Portfolio Id: \" +portfolio_id+ \" Ticker Type: \" +ticker_type+ \" Portfolio Size:\" +portfolio_size+ \"Account:\" +account)\n//msg.payload = qty\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 180,
        "wires": [
            [
                "395f1fa7aae6eb2f"
            ]
        ]
    },
    {
        "id": "395f1fa7aae6eb2f",
        "type": "change",
        "z": "9bb81b8e23df4f99",
        "name": "set flow variable: ticker, qty,portfolioid",
        "rules": [
            {
                "t": "set",
                "p": "portfolioid",
                "pt": "flow",
                "to": "portfolio",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "name",
                "pt": "flow",
                "to": "name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "trades",
                "pt": "flow",
                "to": "trade",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickertype",
                "pt": "flow",
                "to": "tickertype",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "count",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c45bcae378dd8bd6",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 220,
        "wires": [
            [
                "df1a945f8c817f89"
            ]
        ]
    },
    {
        "id": "df1a945f8c817f89",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "add to algo table",
        "func": "let benchmark = flow.get(\"benchmark\")\nnode.warn(\"Benchmark: \" +benchmark)\n\nlet id = flow.get(\"portfolioid\")\nlet name = flow.get(\"name\")\nlet status = 'running'\nlet portfolio = flow.get(\"psize\")  // set in top flow\n\nlet trade_freq = 0\nlet num_trades = 0\nlet sharpe = 0\nlet unixtime = 0\nlet gain_today_realized = 0\nlet gain_today_unrealized = 0\nlet pct_gain_today = 0\nlet gainloss_realized = 0\nlet gainloss_unrealized = 0\nlet gainlosspct = 0\nlet benchmarkgain_today = 0\nlet benchmarkgain = 0\nlet benchmarkpct_today = 0\nlet benchmarkpct = 0\n\n\n\nlet sql = \"replace into algo  (id,name, status, trade_freq,num_trades,sharpe,unixtime, portfolio, gain_today_realized, gain_today_unrealized, pctgain_today,gainloss_realized,gainloss_unrealized, gainlosspct, benchmarkgain_today, benchmarkgain,benchmarkpct_today,  benchmarkpct)\"\nsql += \" values ('\" +id+ \"','\" +name + \"','\" + status + \"','\" + trade_freq+ \"','\" +num_trades+ \"','\" +sharpe+ \"','\" +unixtime + \"','\" + portfolio + \"','\" + gain_today_realized + \"','\" + gain_today_unrealized + \"','\" + pct_gain_today+ \"','\" +gainloss_realized+ \"','\" +gainloss_unrealized+ \"','\" +gainlosspct+ \"','\" + benchmarkgain_today+ \"','\" + benchmarkgain+ \"','\" +benchmarkpct_today + \"','\" + benchmarkpct+ \"');\"\n\n\nnode.warn(sql)\nmsg.topic = sql\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 220,
        "wires": [
            [
                "954c82784838a0b1"
            ]
        ]
    },
    {
        "id": "954c82784838a0b1",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "53728b47003f9caf",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 670,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c5d93e2660aaafe9",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 1520,
        "wires": [
            [
                "def09364f609e34f"
            ]
        ]
    },
    {
        "id": "91293f2958ac3aa1",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1740,
        "wires": [
            [
                "e2fda26cb89dbd4d"
            ]
        ]
    },
    {
        "id": "e2fda26cb89dbd4d",
        "type": "alpaca-query-order",
        "z": "9bb81b8e23df4f99",
        "conf": "e535f42f1df1b25f",
        "x": 580,
        "y": 1740,
        "wires": [
            [
                "2403ed251ae3d17b"
            ]
        ]
    },
    {
        "id": "4a7cd4bd1e231fca",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n//node.warn(clientid)\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  newfilled_type = '\" + type + \"', newfilled_side = '\" + side + \"', newfilled_tif = '\" + time_in_force + \"', newfilled_status = '\" + status + \"', newfilled_at = '\" + filled_at + \"', newfilled_price = '\" + filled_avg_price + \"', newfilled_qty = '\" + filled_qty + \"', newposition = \" + position + \" where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1740,
        "wires": [
            [
                "10521693c01f8c1c"
            ]
        ]
    },
    {
        "id": "2403ed251ae3d17b",
        "type": "split",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 1740,
        "wires": [
            [
                "4a7cd4bd1e231fca",
                "7019ec9db88ed349"
            ]
        ]
    },
    {
        "id": "10521693c01f8c1c",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1080,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "3ae95565dafc3048",
        "type": "inject",
        "z": "9bb81b8e23df4f99",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1680,
        "wires": [
            [
                "b66c43dca28ac710"
            ]
        ]
    },
    {
        "id": "b66c43dca28ac710",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select newclient_order_id from portfolio where portfolioid = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1680,
        "wires": [
            [
                "2aec5adb25d2a038"
            ]
        ]
    },
    {
        "id": "2aec5adb25d2a038",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 620,
        "y": 1680,
        "wires": [
            [
                "e755d6efa4dd83e5"
            ]
        ]
    },
    {
        "id": "d72351c6ee4357b3",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"newclient_order_id\"]\nmsg.clientid = clientorderid\nnode.warn(\"msg.clientid: \" +msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1680,
        "wires": [
            [
                "91293f2958ac3aa1"
            ]
        ]
    },
    {
        "id": "e755d6efa4dd83e5",
        "type": "split",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 1680,
        "wires": [
            [
                "dca05b5256b7d464"
            ]
        ]
    },
    {
        "id": "dca05b5256b7d464",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 890,
        "y": 1680,
        "wires": [
            [
                "d72351c6ee4357b3"
            ]
        ]
    },
    {
        "id": "cf9b654a5ffb6911",
        "type": "comment",
        "z": "9bb81b8e23df4f99",
        "name": "Flow 2: Place buys orders",
        "info": "",
        "x": 150,
        "y": 300,
        "wires": []
    },
    {
        "id": "253a07da6a1f196d",
        "type": "comment",
        "z": "9bb81b8e23df4f99",
        "name": "Flow 3A: Delete orders from portfolio that weren't filled",
        "info": "",
        "x": 500,
        "y": 780,
        "wires": []
    },
    {
        "id": "ee2635517bf09fd2",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "delete query",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"delete from portfolio where filled_qty is null and portfolioid = \" +id\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 820,
        "wires": [
            [
                "f47947901dfe4314"
            ]
        ]
    },
    {
        "id": "f47947901dfe4314",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 920,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "fcb73d632abc056b",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 820,
        "wires": [
            [
                "e816266e200d5cc6"
            ]
        ]
    },
    {
        "id": "e816266e200d5cc6",
        "type": "alpaca-orders-close",
        "z": "9bb81b8e23df4f99",
        "conf": "e535f42f1df1b25f",
        "name": "",
        "x": 550,
        "y": 820,
        "wires": [
            [
                "ee2635517bf09fd2"
            ]
        ]
    },
    {
        "id": "07c4269f6647bb8f",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "place market order ",
        "func": "let psize = flow.get(\"psize\")\nlet id = flow.get(\"portfolioid\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_price = flow.get(\"benchmark_price\")\nlet account = flow.get(\"account\")\n\nlet tickertype = flow.get(\"tickertype\")\n\nlet ticker = msg.symbol\n\n\nif (tickertype == 'crypto') {\n\n    ticker = ticker.replace(\"X:\", \"\");\n    ticker = ticker.replace(\"USD\", \"/USD\");  // this works only if the currency is USD\n\n}\n\n\nlet localtime = new Date();\n\n\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id\n\nlet price = msg.price\n\n// use this to balance the portfolio equally\nlet number = flow.get(\"count\")\nlet qty = (psize / number) / price\nqty = Math.round(qty)\nnode.warn(\"Ticker: \" + ticker + \" Price: \" + price + \" Portfolio Size: \" + psize + \" Qty: \" + qty + \" Number:\" +number)\n\n\n// if crypto, Limit price must exceed current price by $1 \nif ((tickertype == 'crypto)')) {\nprice = (price + 1)  // Limit price must exceed current price by $1 \nprice = price.toFixed(2)\n}\n\n\nlet sql = \"replace into portfolio (account,date,portfolioid,ticker, clientorderid,price,qty,benchmark,benchmark_start) values ('\" +account+ \"', '\" + localtime + \"',\" + id + \",'\" + ticker + \"','\" + client_order_id + \"','\" +price+ \"',\" +qty+ \",'\" +benchmark+ \"',\" +benchmark_price+ \");\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\n// create a market order for Alpaca\n    let temp = ''\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty, \n        \"side\": \"buy\",\n        \"type\": \"market\",\n //       \"limit_price\": price,\n        \"client_order_id\": client_order_id,\n        \"time_in_force\": \"gtc\"\n    };\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 500,
        "wires": [
            [
                "64ab4f027d03991a",
                "0f8da2d51454dae2",
                "86196a6680307294"
            ]
        ]
    },
    {
        "id": "f7c6518d3a18d0c5",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 540,
        "wires": [
            [
                "3f6e6134f9ee3550",
                "fcb73d632abc056b"
            ]
        ]
    },
    {
        "id": "4596f76542ed589e",
        "type": "inject",
        "z": "9bb81b8e23df4f99",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "3f6e6134f9ee3550"
            ]
        ]
    },
    {
        "id": "c36338802f2f7de5",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "Delay 1M before updating ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 190,
        "y": 1560,
        "wires": [
            [
                "b66c43dca28ac710"
            ]
        ]
    },
    {
        "id": "88e02551623903dc",
        "type": "function",
        "z": "9bb81b8e23df4f99",
        "name": "update portfolio",
        "func": "let clientorderid = msg.payload[\"client_order_id\"]\nlet clientid = msg.clientid\n\nif ((clientorderid == clientid)) { // filled  only\n\n\nlet sql = \"update portfolio SET  trade_profit = ((newfilled_qty * newfilled_price) - (filled_price * filled_qty)) where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1780,
        "wires": [
            [
                "2465e9bed4a9c2c6"
            ]
        ]
    },
    {
        "id": "2465e9bed4a9c2c6",
        "type": "sqlite",
        "z": "9bb81b8e23df4f99",
        "mydb": "3f62e3c9b171abc2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1080,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "7019ec9db88ed349",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 740,
        "y": 1780,
        "wires": [
            [
                "88e02551623903dc"
            ]
        ]
    },
    {
        "id": "6446d32b6f5da1c2",
        "type": "delay",
        "z": "9bb81b8e23df4f99",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 1520,
        "wires": [
            [
                "c5d93e2660aaafe9"
            ]
        ]
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "3f62e3c9b171abc2",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "53728b47003f9caf",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKE4YIBQZMFURBEQGC70",
        "paper": true
    }
]