[
    {
        "id": "0ff01d8068eea603",
        "type": "tab",
        "label": "High Beta Portfolio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8a6700471c169d1c",
        "type": "comment",
        "z": "0ff01d8068eea603",
        "name": "Flow 1: Define Strategy and Set Trading Values",
        "info": "",
        "x": 220,
        "y": 60,
        "wires": []
    },
    {
        "id": "d1561fea0da16fb9",
        "type": "comment",
        "z": "0ff01d8068eea603",
        "name": "Flow 2: Create new entry in algos table (FIRSTTIME ONLY)",
        "info": "",
        "x": 250,
        "y": 340,
        "wires": []
    },
    {
        "id": "54a11d89e2576e22",
        "type": "postgresql",
        "z": "0ff01d8068eea603",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 100,
        "wires": [
            [
                "066f779110cd9724"
            ]
        ]
    },
    {
        "id": "ba3dc74f5dcdd780",
        "type": "inject",
        "z": "0ff01d8068eea603",
        "name": "Get high beta tickers",
        "props": [
            {
                "p": "query",
                "v": "select * from tickers_detail order by beta desc limit 20",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "54a11d89e2576e22"
            ]
        ]
    },
    {
        "id": "b22bd051f34ca645",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet login = 'danielsavage'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'stocks' // stocks or crypto\nlet number = flow.get(\"number\") // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet strategy_type = \"long\"\nlet benchmark = 'SPY'\n\nnode.warn(ticker)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.strategy_type = strategy_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 140,
        "wires": [
            [
                "bf0518dd3e5eaaeb"
            ]
        ]
    },
    {
        "id": "8d05edddffb232e5",
        "type": "inject",
        "z": "0ff01d8068eea603",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "b22bd051f34ca645"
            ]
        ]
    },
    {
        "id": "bf0518dd3e5eaaeb",
        "type": "change",
        "z": "0ff01d8068eea603",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "strategy_type",
                "pt": "flow",
                "to": "strategy_type",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c3b8aaa16c939f83",
        "type": "inject",
        "z": "0ff01d8068eea603",
        "name": "GO",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "c1f04405355b40eb"
            ]
        ]
    },
    {
        "id": "c1f04405355b40eb",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "add values from flow variables to algo table",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = flow.get(\"login\")\nlet asset_class = flow.get(\"asset_class\")\nlet number = flow.get(\"number\")\nlet target = flow.get(\"target\")\nlet account = flow.get(\"account\")\nlet psize = flow.get(\"psize\")\nlet algo_type = flow.get(\"algo_type\")\nlet strategy_type = flow.get(\"strategy_type\")\nlet status = flow.get(\"status\")\nlet benchmark = flow.get(\"benchmark\")\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,strategy_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + strategy_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"');\"\nmsg.query = sql\nnode.warn(msg.query)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "9cd5b8726db7421b"
            ]
        ]
    },
    {
        "id": "066f779110cd9724",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "get fresh list of tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.ticker;\n    tickers += ticker+ \", \"\n}\n\n// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nmsg.id = d\nmsg.tickers = tickers\nmsg.algo_name = 'Buy High Beta Portfolio'\nmsg.count = msg.payload.length\n//node.warn(msg.count)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            [
                "2e8bd3427c5068c3"
            ]
        ]
    },
    {
        "id": "2e8bd3427c5068c3",
        "type": "change",
        "z": "0ff01d8068eea603",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "count",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 100,
        "wires": [
            [
                "03b5ac802de09009"
            ]
        ]
    },
    {
        "id": "03b5ac802de09009",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "Display flow vars",
        "func": "let id = flow.get(\"id\")\nlet name = flow.get(\"algo_name\")\nlet count = flow.get(\"number\")\nlet tickers = flow.get(\"tickers\")\nnode.warn(\"ID: \" +id+ \" Name: \" +name+ \" Count: \" +count+ \" Tickers:\" +tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a15e90b632669b5f",
        "type": "comment",
        "z": "0ff01d8068eea603",
        "name": "Copyright©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 970,
        "y": 20,
        "wires": []
    },
    {
        "id": "9cd5b8726db7421b",
        "type": "postgresql",
        "z": "0ff01d8068eea603",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e50ff7a99635bb8f",
        "type": "comment",
        "z": "0ff01d8068eea603",
        "name": "PAPER",
        "info": "",
        "x": 516,
        "y": 45,
        "wires": []
    },
    {
        "id": "53e94103ae808a52",
        "type": "comment",
        "z": "0ff01d8068eea603",
        "name": "Flow 3: Create trading flow (ONCE)",
        "info": "",
        "x": 180,
        "y": 500,
        "wires": []
    },
    {
        "id": "5c05745727e65784",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            [
                "433525018ba2a051"
            ]
        ]
    },
    {
        "id": "433525018ba2a051",
        "type": "split",
        "z": "0ff01d8068eea603",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 200,
        "wires": [
            [
                "8ebdd98ab4e72bbc"
            ]
        ]
    },
    {
        "id": "8ebdd98ab4e72bbc",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "insert into tickers_paper",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nlet type = flow.get(\"algo_type\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers_paper where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers_paper (id, symbol, portfolioname, algo_type) values (\" +id+ \",'\" + symbol + \"', '\" +portfolioname + \"','\" +type+ \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 200,
        "wires": [
            [
                "c434fc5be175a41d"
            ]
        ]
    },
    {
        "id": "771fd9e66df2db77",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers_paper set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_paper.symbol\"\n//node.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "6ae0cdd760cfdfb4"
            ]
        ]
    },
    {
        "id": "ef540813fe911a90",
        "type": "delay",
        "z": "0ff01d8068eea603",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 240,
        "wires": [
            [
                "771fd9e66df2db77"
            ]
        ]
    },
    {
        "id": "3f2844facae33203",
        "type": "inject",
        "z": "0ff01d8068eea603",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "5c05745727e65784",
                "ef540813fe911a90"
            ]
        ]
    },
    {
        "id": "6158cb404bf0fe10",
        "type": "comment",
        "z": "0ff01d8068eea603",
        "name": "confirm this is paper",
        "info": "",
        "x": 550,
        "y": 720,
        "wires": []
    },
    {
        "id": "8d89ea0c7fe380b5",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nnode.warn(\"Symbol: \" +ticker+ \" Algo Name: \" +algo_name+ \" Number: \" +number+ \" Psize: \" +psize+ \" Price: \" +price)\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'buy',\n    \"type\": 'limit',\n    \"client_order_id\": client_order_id,\n    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 680,
        "wires": [
            [
                "c34501cdde6f5aab"
            ]
        ]
    },
    {
        "id": "c34501cdde6f5aab",
        "type": "alpaca-order",
        "z": "0ff01d8068eea603",
        "conf": "c06cec183f9317f9",
        "x": 550,
        "y": 680,
        "wires": [
            [
                "09239969080cfc67"
            ]
        ]
    },
    {
        "id": "92ce9fde24f34a96",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 560,
        "wires": [
            [
                "a7959543318b9b54"
            ]
        ]
    },
    {
        "id": "a7959543318b9b54",
        "type": "split",
        "z": "0ff01d8068eea603",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 560,
        "wires": [
            [
                "390d0cfd88f7d31a"
            ]
        ]
    },
    {
        "id": "7643d4cd9080cd8e",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 560,
        "wires": [
            [
                "6244839b141f8c80"
            ]
        ]
    },
    {
        "id": "709f947b59fcbce3",
        "type": "function-npm",
        "z": "0ff01d8068eea603",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 620,
        "wires": [
            [
                "adc31e43b819f90e"
            ]
        ]
    },
    {
        "id": "390d0cfd88f7d31a",
        "type": "delay",
        "z": "0ff01d8068eea603",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 690,
        "y": 560,
        "wires": [
            [
                "7643d4cd9080cd8e"
            ]
        ]
    },
    {
        "id": "ea3d542884bc0fde",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 620,
        "wires": [
            [
                "709f947b59fcbce3"
            ]
        ]
    },
    {
        "id": "6244839b141f8c80",
        "type": "postgresql",
        "z": "0ff01d8068eea603",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1100,
        "y": 560,
        "wires": [
            [
                "3ed86ec28e515f5c"
            ]
        ]
    },
    {
        "id": "3ed86ec28e515f5c",
        "type": "split",
        "z": "0ff01d8068eea603",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 250,
        "y": 620,
        "wires": [
            [
                "ea3d542884bc0fde"
            ]
        ]
    },
    {
        "id": "c710467b3db417fb",
        "type": "inject",
        "z": "0ff01d8068eea603",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "92ce9fde24f34a96"
            ]
        ]
    },
    {
        "id": "5a00f43a4e0c1e05",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 620,
        "wires": [
            [
                "8d89ea0c7fe380b5"
            ]
        ]
    },
    {
        "id": "adc31e43b819f90e",
        "type": "polygon-last-trade-v3",
        "z": "0ff01d8068eea603",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 960,
        "y": 620,
        "wires": [
            [
                "5a00f43a4e0c1e05"
            ]
        ]
    },
    {
        "id": "493f28658a8baef3",
        "type": "postgresql",
        "z": "0ff01d8068eea603",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "09239969080cfc67",
        "type": "function",
        "z": "0ff01d8068eea603",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 680,
        "wires": [
            [
                "493f28658a8baef3"
            ]
        ]
    },
    {
        "id": "c434fc5be175a41d",
        "type": "postgresql",
        "z": "0ff01d8068eea603",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "6ae0cdd760cfdfb4",
        "type": "postgresql",
        "z": "0ff01d8068eea603",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKLC7VFEM4UNMBQ4OTD8",
        "paper": true
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    }
]