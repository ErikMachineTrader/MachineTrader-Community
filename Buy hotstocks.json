[
    {
        "id": "39cf144e9f97365a",
        "type": "tab",
        "label": "Buy Hot Stocks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "843737541c99c580",
        "type": "inject",
        "z": "39cf144e9f97365a",
        "name": "Set at 9 am",
        "props": [],
        "repeat": "",
        "crontab": "00 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 200,
        "wires": [
            [
                "a8272b87b81d30c1"
            ]
        ]
    },
    {
        "id": "a8272b87b81d30c1",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "set and store portfolio information and trading variables",
        "func": "let portfolio_id = 3\nlet name = \"Buy Hot Stocks (Algo 4)\"\nlet status = \"running\"\nlet trade_freq = 20\nlet portfolio_size = 20000\n\n\nmsg.portfolio = portfolio_id\nmsg.name = name\nmsg.status = status\nmsg.trade = trade_freq\nmsg.psize = portfolio_size\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 200,
        "wires": [
            [
                "76c39e0e8507ba6d"
            ]
        ]
    },
    {
        "id": "76c39e0e8507ba6d",
        "type": "change",
        "z": "39cf144e9f97365a",
        "name": "set flow variables",
        "rules": [
            {
                "t": "set",
                "p": "portfolioid",
                "pt": "flow",
                "to": "portfolio",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "name",
                "pt": "flow",
                "to": "name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "trades",
                "pt": "flow",
                "to": "trade",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "portfolio_size",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 200,
        "wires": [
            [
                "886942d02fc425d5"
            ]
        ]
    },
    {
        "id": "54bbf3a247f111ba",
        "type": "comment",
        "z": "39cf144e9f97365a",
        "name": "Flow #1: Set ticker, quantity and subportfolio_id. Store as flow variables.",
        "info": "",
        "x": 320,
        "y": 140,
        "wires": []
    },
    {
        "id": "49c15b5d31db15d1",
        "type": "comment",
        "z": "39cf144e9f97365a",
        "name": "These flows buy the top performing stocks at 9 am and hold through the day, selling at market close ",
        "info": "",
        "x": 400,
        "y": 80,
        "wires": []
    },
    {
        "id": "886942d02fc425d5",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "display variables",
        "func": "let portfolioid = flow.get(\"portfolioid\")\nlet name = flow.get(\"name\")\nlet trades = flow.get(\"trades\")\nlet status = flow.get(\"status\")\nlet psize = flow.get(\"portfolio_size\")\n\n\nnode.warn(\" Portfolio ID: \" +portfolioid+ \" Name: \" +name+ \" Trades: \" +trades+ \" Status: \" +status+ \" Portfolio Size: \" +psize)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "5e561c514bf1ac40",
        "type": "comment",
        "z": "39cf144e9f97365a",
        "name": "Top Stocks",
        "info": "",
        "x": 120,
        "y": 260,
        "wires": []
    },
    {
        "id": "26d83240fb717c6f",
        "type": "mysql",
        "z": "39cf144e9f97365a",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 590,
        "y": 320,
        "wires": [
            [
                "92ebb822495ae273"
            ]
        ]
    },
    {
        "id": "12c6d28a7bd312c1",
        "type": "inject",
        "z": "39cf144e9f97365a",
        "name": "get count ",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 320,
        "wires": [
            [
                "99213fde170129d8"
            ]
        ]
    },
    {
        "id": "92ebb822495ae273",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "calculate total number of stocks",
        "func": "let cnt = msg.payload.length\nmsg.payload = cnt\nnode.warn(\"Count: \" +cnt)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 320,
        "wires": [
            [
                "1617aa0b554bd596"
            ]
        ]
    },
    {
        "id": "f9fbd0079ed6aee1",
        "type": "mysql",
        "z": "39cf144e9f97365a",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 510,
        "y": 480,
        "wires": [
            [
                "65a839ce270932b2"
            ]
        ]
    },
    {
        "id": "dd8615fd16fb3a5f",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "Get topstocks",
        "func": "let cnt = msg.payload\ncnt = cnt + 1\nlet sql = \"select symbol, close, price from topstocks where close > 1 order by price_change_pct desc limit \" +cnt+ \", 1\"\n\nmsg.topic = sql\n//node.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 480,
        "wires": [
            [
                "f9fbd0079ed6aee1"
            ]
        ]
    },
    {
        "id": "65a839ce270932b2",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "output",
        "func": "let psize = flow.get(\"portfolio_size\")\nlet id = flow.get(\"portfolioid\")\n\n\n\nfor (let i = 0; i < msg.payload.length; i++) {\n\n    let ticker = msg.payload[i][\"symbol\"]\n    let close = msg.payload[i][\"close\"]\n    let price = msg.payload[i][\"price\"]\n    let qty = (psize / 20) / price\n    qty = Math.round(qty);\n    let sql = \"insert into sub_portfolio (id, ticker, price, qty) values (\" +id+ \",'\" +ticker+ \"','\" +close+ \"','\" +qty+ \"');\";\n    msg.topic = sql\n\n// create a market order for Alpaca\n    let temp = ''\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty, // buy 0.1 of a share at first \n        \"side\": \"buy\",\n        \"type\": \"limit\",\n        \"limit_price\": price,\n        \"time_in_force\": \"gtc\"\n    };\n\n\n\n    msg.payload = temp\n    node.warn(msg.payload)\n    node.warn(msg.topic)\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 480,
        "wires": [
            [
                "fd25f2be8f21032f",
                "15c5c5e566cc5272",
                "f7a7b2726406717b"
            ]
        ]
    },
    {
        "id": "c71641f47d07dc6a",
        "type": "inject",
        "z": "39cf144e9f97365a",
        "name": "start at 9:00 am",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 09 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "dd8615fd16fb3a5f"
            ]
        ]
    },
    {
        "id": "fd25f2be8f21032f",
        "type": "loop",
        "z": "39cf144e9f97365a",
        "name": "",
        "kind": "fcnt",
        "count": "20",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "enum",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-index",
        "finalPayload": "final-count",
        "x": 370,
        "y": 640,
        "wires": [
            [],
            [
                "e89502bc7aa028fe"
            ]
        ]
    },
    {
        "id": "e89502bc7aa028fe",
        "type": "delay",
        "z": "39cf144e9f97365a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 640,
        "wires": [
            [
                "dd8615fd16fb3a5f"
            ]
        ]
    },
    {
        "id": "e75d3dba2409099c",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "store raw orders",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nlet sql = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,extended_hours,legs,trail_percent,trail_price,hwm,subtag,source) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + extended_hours + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source + \"');\"\n\nnode.warn(sql)\nmsg.topic = sql\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 540,
        "wires": [
            [
                "c52a55b4e2e09b71"
            ]
        ]
    },
    {
        "id": "c52a55b4e2e09b71",
        "type": "sqlite",
        "z": "39cf144e9f97365a",
        "mydb": "3da37290d92c1dc8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "orders",
        "x": 1150,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "1617aa0b554bd596",
        "type": "change",
        "z": "39cf144e9f97365a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stocks",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "997f11618d7c8673",
        "type": "comment",
        "z": "39cf144e9f97365a",
        "name": "Flow 3: Buy Portfolio ",
        "info": "",
        "x": 150,
        "y": 380,
        "wires": []
    },
    {
        "id": "ba8b2cdfac3a235c",
        "type": "comment",
        "z": "39cf144e9f97365a",
        "name": "enter the number of stocks manually in the \"Fixed Count Look\"",
        "info": "",
        "x": 330,
        "y": 600,
        "wires": []
    },
    {
        "id": "15c5c5e566cc5272",
        "type": "sqlite",
        "z": "39cf144e9f97365a",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 840,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "99213fde170129d8",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "Get topstocks",
        "func": "let sql = \"select * from topstocks limit 20\"\nmsg.topic = sql\n//node.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 320,
        "wires": [
            [
                "26d83240fb717c6f"
            ]
        ]
    },
    {
        "id": "f7a7b2726406717b",
        "type": "alpaca-order",
        "z": "39cf144e9f97365a",
        "conf": "0c86a5f06a42b505",
        "x": 830,
        "y": 540,
        "wires": [
            [
                "e75d3dba2409099c"
            ]
        ]
    },
    {
        "id": "6d65f9b2a19954f9",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "Get topstocks",
        "func": "let cnt = msg.payload\ncnt = cnt + 1\nlet sql = \"select ticker from sub_portfolio where id = 3 limit \" +cnt+ \", 1\"\n\nmsg.topic = sql\n//node.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 780,
        "wires": [
            [
                "70f03d1190e93b6c"
            ]
        ]
    },
    {
        "id": "18de26ee1077cf48",
        "type": "inject",
        "z": "39cf144e9f97365a",
        "name": "Run at 3:59",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "59 15 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "6d65f9b2a19954f9"
            ]
        ]
    },
    {
        "id": "97910b4daf54ae96",
        "type": "loop",
        "z": "39cf144e9f97365a",
        "name": "",
        "kind": "fcnt",
        "count": "20",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "enum",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-index",
        "finalPayload": "final-count",
        "x": 390,
        "y": 900,
        "wires": [
            [],
            [
                "1218bb6225d4dd5b"
            ]
        ]
    },
    {
        "id": "1218bb6225d4dd5b",
        "type": "delay",
        "z": "39cf144e9f97365a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 900,
        "wires": [
            [
                "6d65f9b2a19954f9"
            ]
        ]
    },
    {
        "id": "067be76d1f938714",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "store raw orders",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nlet sql = \"insert into orders (id,client_order_id,created_at,updated_at,submitted_at,filled_at,expired_at,canceled_at,failed_at,replaced_at,replaced_by,replaces,asset_id,symbol,asset_class,notional,qty,filled_qty,filled_avg_price,order_class,order_type,type,side,time_in_force,limit_price,stop_price,status,extended_hours,legs,trail_percent,trail_price,hwm,subtag,source) values ('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + filled_at + \"','\" + expired_at + \"','\" + canceled_at + \"','\" + failed_at + \"','\" + replaced_at + \"','\" + replaced_by + \"','\" + replaces + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + notional + \"','\" + qty + \"','\" + filled_qty + \"','\" + filled_avg_price + \"','\" + order_class + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + extended_hours + \"','\" + legs + \"','\" + trail_percent + \"','\" + trail_price + \"','\" + hwm + \"','\" + subtag + \"','\" + source + \"');\"\n\nnode.warn(sql)\nmsg.topic = sql\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 920,
        "wires": [
            [
                "d4bc3f957bd71675"
            ]
        ]
    },
    {
        "id": "d4bc3f957bd71675",
        "type": "sqlite",
        "z": "39cf144e9f97365a",
        "mydb": "3da37290d92c1dc8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "orders",
        "x": 1170,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "28ff851f4763fa5d",
        "type": "comment",
        "z": "39cf144e9f97365a",
        "name": "Flow 4: Close Portfolio at Market Close ",
        "info": "",
        "x": 230,
        "y": 720,
        "wires": []
    },
    {
        "id": "a1a4b51a026364b2",
        "type": "comment",
        "z": "39cf144e9f97365a",
        "name": "enter the number of stocks manually in the \"Fixed Count Look\"",
        "info": "",
        "x": 350,
        "y": 860,
        "wires": []
    },
    {
        "id": "c0886a78d3eb92ad",
        "type": "alpaca-order",
        "z": "39cf144e9f97365a",
        "conf": "0c86a5f06a42b505",
        "x": 830,
        "y": 920,
        "wires": [
            [
                "067be76d1f938714"
            ]
        ]
    },
    {
        "id": "70f03d1190e93b6c",
        "type": "sqlite",
        "z": "39cf144e9f97365a",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 520,
        "y": 780,
        "wires": [
            [
                "58775406e6b3486b"
            ]
        ]
    },
    {
        "id": "58775406e6b3486b",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "output",
        "func": "\nfor (let i = 0; i < msg.payload.length; i++) {\n\n    let ticker = msg.payload[i][\"ticker\"]\n    msg.ticker = ticker\n    node.warn(msg.ticker)\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 780,
        "wires": [
            [
                "97910b4daf54ae96",
                "ddf9decca7d8db38",
                "02675750aed75857"
            ]
        ]
    },
    {
        "id": "ddf9decca7d8db38",
        "type": "change",
        "z": "39cf144e9f97365a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sellticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "0f8d2e97b9bb2170",
        "type": "alpaca-position-query",
        "z": "39cf144e9f97365a",
        "conf": "0c86a5f06a42b505",
        "x": 930,
        "y": 840,
        "wires": [
            [
                "4f8d0db05f827be9"
            ]
        ]
    },
    {
        "id": "4f8d0db05f827be9",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "get  position for specifc ticker",
        "func": "let sql = ''\nlet portfolio_id = flow.get(\"portfolioid\")\nlet ticker = flow.get(\"sellticker\")\n\nlet price = flow.get(\"price\")\nlet avg_price = flow.get(\"avg_price\")\nlet portfolioid = flow.get(\"portfolioid\")\nlet qty = 0\nlet alpaca_price = 0\nlet gain = 0\nlet pctgain = 0\nlet symbol = ''\n\n\nfor (var i=0;i<msg.payload.length;i++) \n\n{\n\n    let symbol = msg.payload[i][\"symbol\"]\n\n    // the Alpaca position node will include all open positions for the account so filter by ticker\n    if (symbol == ticker){\n\n      qty = msg.payload[i][\"qty\"]\n      alpaca_price = msg.payload[i][\"current_price\"]\n      gain = msg.payload[i][\"unrealized_intraday_pl\"]\n      pctgain = msg.payload[i][\"unrealized__intraday_plpc\"]\n\n    }\n\n\n}\n\n\nmsg.pos = qty\nmsg.alpaca = alpaca_price\nnode.warn(\"Postion: \" +msg.pos+ \" Alpaca Price: \" +msg.alpaca)\nsql = \"update sub_portfolio set gain_today = \" + gain + \", pctgain_today = \" + pctgain + \" where id = \" + portfolioid + \" and ticker = \" +symbol+ \";\"\nnode.warn(sql)\n\n// create a market order for Alpaca\nlet temp = ''\ntemp = {\n  \"symbol\": ticker,\n  \"qty\": qty, // buy 0.1 of a share at first \n  \"side\": \"sell\",\n  \"type\": \"market\",\n  \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 840,
        "wires": [
            [
                "c0886a78d3eb92ad",
                "77c8e6fd84ab5a84"
            ]
        ]
    },
    {
        "id": "02675750aed75857",
        "type": "delay",
        "z": "39cf144e9f97365a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 720,
        "y": 840,
        "wires": [
            [
                "0f8d2e97b9bb2170"
            ]
        ]
    },
    {
        "id": "f595d722ff719d7a",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "delete old portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"delete from sub_portfolio where id = \" +id+ \";\"\nmsg.topic = sql\n\nnode.warn(msg.topic)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 420,
        "wires": [
            [
                "ab296b0f3003ba4d"
            ]
        ]
    },
    {
        "id": "1d52cc12012d6266",
        "type": "inject",
        "z": "39cf144e9f97365a",
        "name": "Run at 8 am",
        "props": [],
        "repeat": "",
        "crontab": "00 08 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "f595d722ff719d7a"
            ]
        ]
    },
    {
        "id": "ab296b0f3003ba4d",
        "type": "sqlite",
        "z": "39cf144e9f97365a",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 520,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "77c8e6fd84ab5a84",
        "type": "sqlite",
        "z": "39cf144e9f97365a",
        "mydb": "d6e22e31a8a67436",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1340,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "3626d85c10855f0c",
        "type": "comment",
        "z": "39cf144e9f97365a",
        "name": "Add Portfolio to Algo Table for Daily Tracking",
        "info": "",
        "x": 230,
        "y": 1100,
        "wires": []
    },
    {
        "id": "328861fe2b6338dc",
        "type": "inject",
        "z": "39cf144e9f97365a",
        "name": "Run first time",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1140,
        "wires": [
            [
                "2cb8ade6f26d551a"
            ]
        ]
    },
    {
        "id": "2cb8ade6f26d551a",
        "type": "function",
        "z": "39cf144e9f97365a",
        "name": "add to algo table",
        "func": "let id = 3\nlet name = 'Buy top stocks early before open and sell before close (id = 3)'\nlet status = 'running'\nlet trade_freg = 0\nlet num_trades = 0\nlet sharpe = 0\nlet unixtime = 0\nlet portfolio = 20000 // set in top flow \nlet gain_today = 0\nlet pctgain = 0\nlet gainloss = 0 \nlet gainlosspct = 0\n\nlet sql = \"insert into algo (id,name,status,trade_freq,num_trades,sharpe,unixtime,portfolio,gain_today,pctgain_today,gainloss,gainlosspct) values (\"\nsql += id + \",'\" + name + \"','\" + status + \"','\" + trade_freg+ \"','\" +num_trades+ \"','\" +sharpe+ \"','\" +unixtime+ \"','\" +portfolio+ \"','\" +gain_today+ \"','\" +pctgain+ \"','\" +gainloss+ \"','\" +gainlosspct+ \"');\"\n\nnode.warn(sql)\nmsg.topic= sql\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1140,
        "wires": [
            [
                "af643af32303d5d1"
            ]
        ]
    },
    {
        "id": "db7ddb2962713e5d",
        "type": "inject",
        "z": "39cf144e9f97365a",
        "name": "Display ALGO table",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select * from algo ",
        "x": 170,
        "y": 1220,
        "wires": [
            [
                "cb37465226ef0d58"
            ]
        ]
    },
    {
        "id": "cb37465226ef0d58",
        "type": "sqlite",
        "z": "39cf144e9f97365a",
        "mydb": "53728b47003f9caf",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 330,
        "y": 1220,
        "wires": [
            [
                "bafc210ab42a2d3c"
            ]
        ]
    },
    {
        "id": "bafc210ab42a2d3c",
        "type": "debug",
        "z": "39cf144e9f97365a",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1220,
        "wires": []
    },
    {
        "id": "af643af32303d5d1",
        "type": "sqlite",
        "z": "39cf144e9f97365a",
        "mydb": "53728b47003f9caf",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 510,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "3da37290d92c1dc8",
        "type": "sqlitedb",
        "db": "/data/store/orders",
        "mode": "RWC"
    },
    {
        "id": "d6e22e31a8a67436",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "0c86a5f06a42b505",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PK5NTIWS5NJ8S2MFN6QT",
        "paper": true
    },
    {
        "id": "53728b47003f9caf",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    }
]