[
    {
        "id": "265bb845ac3d2699",
        "type": "tab",
        "label": "Techical Indicators 1Sec ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "517251ed359631e7",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "1) Run every second and store in table",
        "info": "",
        "x": 210,
        "y": 260,
        "wires": []
    },
    {
        "id": "d6536aee4d97ca5e",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 520,
        "wires": [
            [
                "5e393b9d5907ae2f"
            ]
        ]
    },
    {
        "id": "5e393b9d5907ae2f",
        "type": "split",
        "z": "265bb845ac3d2699",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 520,
        "wires": [
            [
                "9d508aa5bafe742e"
            ]
        ]
    },
    {
        "id": "9d508aa5bafe742e",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "update lastprice",
        "func": "msg.lastprice = msg.payload[\"price\"]\nmsg.change = msg.lastprice - msg.price\n\nif ( msg.change == null){ msg.change = 0}\nif (isNaN(msg.change)) msg.change = 0;\n\n//node.warn(\"Unixtime: \" +msg.unixtime+ \" Old Unixtime: \" +msg.lastux+ \" Price: \" +msg.price+ \" Old Price: \" +msg.lastprice+ \" Change: \" +msg.change)\nmsg.query = \"update onesecprice set lastprice = \" +msg.lastprice+ \", change = \" +msg.change+ \" where unixtime = \" +msg.ux+ \";\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 520,
        "wires": [
            [
                "b2dea76d3a2fb3b5"
            ]
        ]
    },
    {
        "id": "804a265433581d04",
        "type": "inject",
        "z": "265bb845ac3d2699",
        "name": "Every 1Sec",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "10ee02de66e3c087"
            ]
        ]
    },
    {
        "id": "72d992830acc84c5",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "select",
        "func": "msg.lastux = msg.ux - 1\nmsg.query = \"select * from onesecprice where unixtime = \" +msg.lastux+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 520,
        "wires": [
            [
                "d6536aee4d97ca5e"
            ]
        ]
    },
    {
        "id": "b2dea76d3a2fb3b5",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "68ce95caa35b0be3"
            ]
        ]
    },
    {
        "id": "68ce95caa35b0be3",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "update pctchange",
        "func": "msg.query = \"update onesecprice set pctchange = change / price\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 580,
        "wires": [
            [
                "f7518f1bc839bc2d"
            ]
        ]
    },
    {
        "id": "f7518f1bc839bc2d",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 580,
        "wires": [
            [
                "ee5ad2e28589a039"
            ]
        ]
    },
    {
        "id": "ee5ad2e28589a039",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "delete bad prices",
        "func": "msg.query = \"DELETE from onesecprice where lastprice is null\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 580,
        "wires": [
            [
                "48ea587fe4aa9cca"
            ]
        ]
    },
    {
        "id": "48ea587fe4aa9cca",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 580,
        "wires": [
            [
                "626b8f5a0aece050"
            ]
        ]
    },
    {
        "id": "60779c0e75a51653",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "2) Calculate RSI values",
        "info": "",
        "x": 180,
        "y": 860,
        "wires": []
    },
    {
        "id": "b9348fad75f5e273",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "select range of prices",
        "func": "msg.ux = flow.get(\"ux\")\nmsg.symbol = 'AAPL'\n\nmsg.window = 14\n\nmsg.query = \"select * from onesecprice where unixtime < \" +msg.ux+ \" order by unixtime desc limit \" +msg.window+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 920,
        "wires": [
            [
                "5dbe11715350d794"
            ]
        ]
    },
    {
        "id": "5dbe11715350d794",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 920,
        "wires": [
            [
                "4cdf8c7f934a25af"
            ]
        ]
    },
    {
        "id": "4cdf8c7f934a25af",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "retrieve array",
        "func": "//node.warn(msg.payload)\n\n\nlet changes = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    changes.push( msg.payload[i][\"pctchange\"])\n}\n\nmsg.changes = changes\n//node.warn(changes)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1000,
        "wires": [
            [
                "f02bf8861ce08827"
            ]
        ]
    },
    {
        "id": "f02bf8861ce08827",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "RSI Calculations",
        "func": "let changes = msg.changes\n\nconst poschanges = changes.filter((change) => change>0);\n//node.warn(poschanges)\n\nconst negchanges = changes.filter((change) => change < 0);\n//node.warn(negchanges)\n\n\n//var newchange = JSON.parse(\"[\"+msg.change+\"]\");\n//node.warn(prices)\n\nmsg.avgpos = (eval(poschanges.join('+')) / poschanges.length) \n//node.warn(msg.avgpos)\n\nmsg.avgneg = (eval(negchanges.join('+')) / negchanges.length)\nmsg.avgneg = msg.avgneg * -1\n//node.warn(msg.avgneg)\n\n\nlet div = msg.avgpos / msg.avgneg\nlet div1 = 1 + div\nlet div2 = 100 / div1\nlet rsi = 100 - div2\nmsg.rsi = rsi.toFixed(0)\n\nif ( msg.avgpos == null){ msg.avgpos = 0}\nif ( msg.avgneg == null){ msg.avgneg = 0}\nif ( msg.rsi == null){ msg.rsi = 50}\n\n\n//node.warn(\"Avg Gain: \" +msg.avgpos+ \" Avg Loss: \" +msg.avgneg+ \"Div: \" +div+ \" Div1: \" +div1+ \" Div2: \" +div2)\n\nmsg.query = \"update onesecprice set rsi = \" +msg.rsi+ \" where unixtime = \" +msg.ux+ \";\"\n//node.warn(msg.query)\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1000,
        "wires": [
            [
                "1d8a94a4443ba15f"
            ]
        ]
    },
    {
        "id": "1d8a94a4443ba15f",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "3911ac854d3ef7f1",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "3) Calculate MACD",
        "info": "",
        "x": 170,
        "y": 1060,
        "wires": []
    },
    {
        "id": "9345022f58fed105",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "create onesecprice table",
        "func": "msg.query = \"CREATE TABLE IF NOT EXISTS onesecprice (unixtime BIGINT PRIMARY KEY,currentdt VARCHAR(100), trf_unixtime BIGINT, trf_dt VARCHAR(100),price FLOAT,lastprice FLOAT,change FLOAT,pctchange FLOAT,rsi INT, macd FLOAT,signal FLOAT,bbstd FLOAT, bbul FLOAT,bbll FLOAT, avg FLOAT);\"\n//msg.query = \"drop table onesecprice\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 180,
        "wires": [
            [
                "4c3d8159f50a74b3"
            ]
        ]
    },
    {
        "id": "7a72a94fc59e66c0",
        "type": "inject",
        "z": "265bb845ac3d2699",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "9345022f58fed105"
            ]
        ]
    },
    {
        "id": "4c3d8159f50a74b3",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "6126900e9e28d725"
            ]
        ]
    },
    {
        "id": "6126900e9e28d725",
        "type": "debug",
        "z": "265bb845ac3d2699",
        "name": "debug 890",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 180,
        "wires": []
    },
    {
        "id": "1f2736cf987801dc",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "Create a storage tables",
        "info": "",
        "x": 160,
        "y": 140,
        "wires": []
    },
    {
        "id": "99c60f5774e108fd",
        "type": "inject",
        "z": "265bb845ac3d2699",
        "name": "Every 1 sec",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1100,
        "wires": [
            [
                "79229200fa69bef1"
            ]
        ]
    },
    {
        "id": "67eb7590e2c53e4f",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "get long array",
        "func": "msg.window = 26 // long window\n\nmsg.query = \"select * from onesecprice order by unixtime desc limit \" +msg.window+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1100,
        "wires": [
            [
                "29231704d5bfa1dc"
            ]
        ]
    },
    {
        "id": "29231704d5bfa1dc",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 1100,
        "wires": [
            [
                "31432b4006a3c0f9"
            ]
        ]
    },
    {
        "id": "31432b4006a3c0f9",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "create array",
        "func": "//node.warn(msg.payload)\n\n\nlet longprices = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    longprices.push( msg.payload[i][\"price\"])\n}\n\nmsg.longprices = longprices\n//node.warn(prices)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1100,
        "wires": [
            [
                "011ea0cbced06a34"
            ]
        ]
    },
    {
        "id": "011ea0cbced06a34",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "Long Average",
        "func": "let longprice = msg.longprices\nlongprice = longprice.slice(0, -1);\n//node.warn(price)\n\nvar longprices = JSON.parse(\"[\"+longprice+\"]\");\n//node.warn(prices)\n\nmsg.longavg = (eval(longprices.join('+')) / longprices.length) \n//node.warn(\"LongSMA: \" +msg.longavg)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1100,
        "wires": [
            [
                "b4ae2bf054726241"
            ]
        ]
    },
    {
        "id": "b4ae2bf054726241",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "get short array",
        "func": "msg.window = 12 // short window\n\nmsg.query = \"select * from onesecprice order by unixtime desc limit \" +msg.window+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1160,
        "wires": [
            [
                "42c138ceaa3ce4cb"
            ]
        ]
    },
    {
        "id": "42c138ceaa3ce4cb",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 500,
        "y": 1160,
        "wires": [
            [
                "e71d7ea7ba0c5702"
            ]
        ]
    },
    {
        "id": "4f53f81fe6e08795",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "calculate bands",
        "func": "// msg.avg is the moving average price for the past 20 seconds\n\nmsg.avg = flow.get(\"avg\") \nmsg.std = flow.get(\"std\") * 2\nmsg.avg = Number(msg.avg)\nmsg.std = Number(msg.std)\n//node.warn(\"Avg: \" +msg.avg+ \" Std: \" +msg.std)\n\nmsg.ux = flow.get(\"ux\")\nmsg.bbul = msg.avg + msg.std\nmsg.bbll = msg.avg - msg.std \nmsg.ux = flow.get(\"ux\")\nmsg.symbol = flow.get(\"symbol\")\n\nmsg.query = \"update onesecprice set bbul = \" +msg.bbul+ \", bbll = \" +msg.bbll+ \" where unixtime = \" + msg.ux + \";\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1500,
        "wires": [
            [
                "75c7cc031fd4e4d2"
            ]
        ]
    },
    {
        "id": "f9cda10c3528afdb",
        "type": "inject",
        "z": "265bb845ac3d2699",
        "name": "Everu 1 Sec",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1420,
        "wires": [
            [
                "06fee20917e236ef"
            ]
        ]
    },
    {
        "id": "30ca62f86dc9ffec",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "define range values",
        "func": "msg.ux = flow.get(\"ux\")\nmsg.window = 20\n\nmsg.query = \"select * from onesecprice order by unixtime desc limit \" +msg.window+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1420,
        "wires": [
            [
                "54c18dcf4d914813"
            ]
        ]
    },
    {
        "id": "54c18dcf4d914813",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 1420,
        "wires": [
            [
                "bb7fdb22cffe4e64"
            ]
        ]
    },
    {
        "id": "bb7fdb22cffe4e64",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "create array",
        "func": "//node.warn(msg.payload)\n\n\nlet prices = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    prices.push( msg.payload[i][\"price\"])\n}\n\nmsg.prices = prices\n//node.warn(prices)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1420,
        "wires": [
            [
                "03f9bf54873b67d5",
                "5131b036b977c32f"
            ]
        ]
    },
    {
        "id": "5131b036b977c32f",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "Average",
        "func": "let price = msg.prices\nprice = price.slice(0, -1);\n//node.warn(price)\n\nvar prices = JSON.parse(\"[\"+price+\"]\");\n//node.warn(prices)\n\nmsg.avg = (eval(prices.join('+')) / prices.length) \n//node.warn(\"Average: \" +msg.avg)\nmsg.query = \"update onesecprice set avg = \" +msg.avg+ \" where unixtime = \" + msg.ux + \";\"\n//node.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1460,
        "wires": [
            [
                "c04d9546b0ac04aa",
                "adfbd1bce91b5712"
            ]
        ]
    },
    {
        "id": "c04d9546b0ac04aa",
        "type": "change",
        "z": "265bb845ac3d2699",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "avg",
                "pt": "flow",
                "to": "avg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "03f9bf54873b67d5",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "Std dev",
        "func": "let price = msg.prices\nprice = price.slice(0, -1);\n//node.warn(price)\nvar prices = JSON.parse(\"[\"+price+\"]\");\n//node.warn(prices)\n\n// Javascript program to calculate the \n// standard deviation of an array\nfunction StandardDeviation(arr) {\n \n    // Creating the mean with Array.reduce\n    let mean = arr.reduce((acc, curr) => {\n        return acc + curr\n    }, 0) / arr.length;\n \n    // Assigning (value - mean) ^ 2 to\n    // every array item\n    arr = arr.map((k) => {\n        return (k - mean) ** 2\n    });\n \n    // Calculating the sum of updated array \n    let sum = arr.reduce((acc, curr) => acc + curr, 0);\n \n    // Calculating the variance\n    let variance = sum / arr.length\n \n    // Returning the standard deviation\n    return Math.sqrt(sum / arr.length)\n}\n\nmsg.std = (StandardDeviation(prices))\n//node.warn(\"Std: \" +msg.std)\nmsg.query = \"update onesecprice set bbstd = \" +msg.std+ \" where unixtime = \" +msg.ux+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1400,
        "wires": [
            [
                "44318c3fbf87aaf2",
                "a058d48bca147d90"
            ]
        ]
    },
    {
        "id": "44318c3fbf87aaf2",
        "type": "change",
        "z": "265bb845ac3d2699",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "std",
                "pt": "flow",
                "to": "std",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "symbol",
                "pt": "flow",
                "to": "symbol",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ux",
                "pt": "flow",
                "to": "ux",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1340,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "8c033930f17064ef",
        "type": "delay",
        "z": "265bb845ac3d2699",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1500,
        "wires": [
            [
                "4f53f81fe6e08795"
            ]
        ]
    },
    {
        "id": "75c7cc031fd4e4d2",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "bcbbdf1d0829a87f",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "5) Calculate upper and low Bollinger Bands",
        "info": "",
        "x": 220,
        "y": 1360,
        "wires": []
    },
    {
        "id": "98e10419b5f9319c",
        "type": "delay",
        "z": "265bb845ac3d2699",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 520,
        "wires": [
            [
                "72d992830acc84c5"
            ]
        ]
    },
    {
        "id": "626b8f5a0aece050",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "delete bad prices",
        "func": "msg.query = \"DELETE from onesecprice where pctchange > 1 or pctchange < -1\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 580,
        "wires": [
            [
                "31f3837cc7c18334"
            ]
        ]
    },
    {
        "id": "31f3837cc7c18334",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1260,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "e7807e944c2d9ed8",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1180,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "7324c641fc21368f",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "Store macd in table",
        "func": "msg.symbol = flow.get(\"symbol\")\nmsg.ux = flow.get(\"ux\") - 1\nmsg.longEMA = msg.longavg\nmsg.shortEMA = msg.shortavg\nmsg.macd = msg.shortEMA - msg.longEMA\n\n//msg.query = \"update macd set macd = shortEMA - longEMA;\"\nmsg.query = \"update onesecprice set macd = \" +msg.macd+  \" where unixtime = \" +msg.ux+ \";\"\n//node.warn(msg.query)    \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1160,
        "wires": [
            [
                "e7807e944c2d9ed8"
            ]
        ]
    },
    {
        "id": "700fd630733a4486",
        "type": "inject",
        "z": "265bb845ac3d2699",
        "name": "Display Flow Vars",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 260,
        "wires": [
            [
                "09431ef77895e3d2"
            ]
        ]
    },
    {
        "id": "0475eb4fff234809",
        "type": "debug",
        "z": "265bb845ac3d2699",
        "name": "debug 895",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 260,
        "wires": []
    },
    {
        "id": "09431ef77895e3d2",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "display flow vars",
        "func": "msg.std = flow.get(\"std\") \nnode.warn(\"Std: \" +msg.std)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 260,
        "wires": [
            [
                "0475eb4fff234809"
            ]
        ]
    },
    {
        "id": "a058d48bca147d90",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1320,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "adfbd1bce91b5712",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1320,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "a511ed77b4f59f5d",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 1280,
        "wires": [
            [
                "8def16541c266e97"
            ]
        ]
    },
    {
        "id": "505ff5868af90708",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "signal line",
        "func": "let signalwindow = 9\nmsg.ux = flow.get(\"ux\")\nmsg.query = \"select * from onesecprice where unixtime < \" +msg.ux+ \" and macd is not null order by unixtime desc limit \" +signalwindow+ \";\"\n//node.warn(msg.query)    \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1280,
        "wires": [
            [
                "a511ed77b4f59f5d"
            ]
        ]
    },
    {
        "id": "50a325bdec463d7f",
        "type": "delay",
        "z": "265bb845ac3d2699",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 610,
        "y": 1280,
        "wires": [
            [
                "505ff5868af90708"
            ]
        ]
    },
    {
        "id": "8def16541c266e97",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "create array",
        "func": "//node.warn(msg.payload)\n\n\nlet prices = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    prices.push( msg.payload[i][\"macd\"])\n}\n\nmsg.prices = prices\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1280,
        "wires": [
            [
                "e049bcc4865bc17c"
            ]
        ]
    },
    {
        "id": "e049bcc4865bc17c",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "Average",
        "func": "let price = msg.prices\nprice = price.slice(0, -1);\n//node.warn(price)\n\nvar prices = JSON.parse(\"[\"+price+\"]\");\n//node.warn(prices)\n\nmsg.avg = (eval(prices.join('+')) / prices.length) \n//node.warn(\"Signal: \" +msg.avg)\nmsg.query = \"update onesecprice set signal = \" +msg.avg+ \" where unixtime = \" +msg.ux+ \";\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1280,
        "wires": [
            [
                "036d5e58e6db1f9b"
            ]
        ]
    },
    {
        "id": "036d5e58e6db1f9b",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1340,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "86a837c3e8009111",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "Download csv file",
        "info": "",
        "x": 160,
        "y": 640,
        "wires": []
    },
    {
        "id": "b3164688ba613afc",
        "type": "http in",
        "z": "265bb845ac3d2699",
        "name": "/api/download_onesecprice",
        "url": "/api/download_onesecprice",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 680,
        "wires": [
            [
                "76a2105ecb331da5"
            ]
        ]
    },
    {
        "id": "d48ad5fab813e31d",
        "type": "http response",
        "z": "265bb845ac3d2699",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 970,
        "y": 680,
        "wires": []
    },
    {
        "id": "76a2105ecb331da5",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "export query",
        "func": "msg.query = \"select * from onesecprice order by unixtime limit 10000 offset 0\"\n//msg.query = \"select * from onesecprice order by unixtime desc limit 100\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 680,
        "wires": [
            [
                "04ea5dd711e7b23e"
            ]
        ]
    },
    {
        "id": "13579f7ac1af7eaf",
        "type": "csv",
        "z": "265bb845ac3d2699",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 690,
        "y": 680,
        "wires": [
            [
                "f988932655661618"
            ]
        ]
    },
    {
        "id": "f988932655661618",
        "type": "file",
        "z": "265bb845ac3d2699",
        "name": "write report",
        "filename": "./data/store/rsi.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 680,
        "wires": [
            [
                "d48ad5fab813e31d"
            ]
        ]
    },
    {
        "id": "04ea5dd711e7b23e",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 680,
        "wires": [
            [
                "13579f7ac1af7eaf"
            ]
        ]
    },
    {
        "id": "40fd1c62ca9c23ad",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "Display or truncate onesecprice",
        "func": "//msg.query = \"select * from onesecprice where rsi > 0 order by unixtime\"\nmsg.query = \"select * from onesecprice order by unixtime desc\"\n//msg.query = \"alter table onesecprice add column currentdt VARCHAR(100), add column trf_unixgtime BIGINT\"\n//msg.query = \"truncate table onesecprice\"\n//msg.query = \"drop table onesecprice\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 780,
        "wires": [
            [
                "29156cd6dd6d1d31"
            ]
        ]
    },
    {
        "id": "29156cd6dd6d1d31",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 780,
        "wires": [
            [
                "f8665f36a53e3ac2"
            ]
        ]
    },
    {
        "id": "f8665f36a53e3ac2",
        "type": "debug",
        "z": "265bb845ac3d2699",
        "name": "debug 887",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 780,
        "wires": []
    },
    {
        "id": "2a6678a9df5e6574",
        "type": "inject",
        "z": "265bb845ac3d2699",
        "name": "Every 1 sec",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 920,
        "wires": [
            [
                "09b20ee65c98e64a"
            ]
        ]
    },
    {
        "id": "8be864e1bc3155df",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "trading interval  M-F 6:00 AM - 8 PM",
        "func": "let d = new Date();\n\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay(); // day of the week\nlet sec = d.getSeconds();\n\n//node.warn(\"Date: \" +d+ \" Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 10:30 am\n// if ((day > 0 && day < 6 && hour > 9 && hour < 11) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this will run during trading 9:30 - 4:00 pm\n//  if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n\n// if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n// this runs 6 am - 8 pm\nif (day > 0 && day < 6 && hour > 5 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "09b20ee65c98e64a",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "trading interval  M-F 9:30 - 4PM",
        "func": "let d = new Date();\n\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay(); // day of the week\nlet sec = d.getSeconds();\n\n//node.warn(\"Date: \" +d+ \" Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 10:30 am\n// if ((day > 0 && day < 6 && hour > 9 && hour < 11) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n\n// if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n// this runs 6 am - 8 pm\n//if (day > 0 && day < 6 && hour > 5 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 920,
        "wires": [
            [
                "b9348fad75f5e273"
            ]
        ]
    },
    {
        "id": "79229200fa69bef1",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "trading interval  M-F 9:30 - 4PM",
        "func": "let d = new Date();\n\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay(); // day of the week\nlet sec = d.getSeconds();\n\n//node.warn(\"Date: \" +d+ \" Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 10:30 am\n// if ((day > 0 && day < 6 && hour > 9 && hour < 11) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n\n// if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n// this runs 6 am - 8 pm\n//if (day > 0 && day < 6 && hour > 5 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1100,
        "wires": [
            [
                "67eb7590e2c53e4f"
            ]
        ]
    },
    {
        "id": "10ee02de66e3c087",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "trading interval  M-F 9:30 - 4PM",
        "func": "let d = new Date();\n\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay(); // day of the week\nlet sec = d.getSeconds();\n\n//node.warn(\"Date: \" +d+ \" Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 10:30 am\n// if ((day > 0 && day < 6 && hour > 9 && hour < 11) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n\n// if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n// this runs 6 am - 8 pm\n//if (day > 0 && day < 6 && hour > 5 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 400,
        "wires": [
            [
                "bbea9c461cf2276d"
            ]
        ]
    },
    {
        "id": "eba93f820c6414dc",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "trading interval  M-F 9:30 - 4PM",
        "func": "let d = new Date();\n\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay(); // day of the week\nlet sec = d.getSeconds();\n\n//node.warn(\"Date: \" +d+ \" Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 10:30 am\n// if ((day > 0 && day < 6 && hour > 9 && hour < 11) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n\n// if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n// this runs 6 am - 8 pm\n//if (day > 0 && day < 6 && hour > 5 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1280,
        "wires": [
            [
                "50a325bdec463d7f"
            ]
        ]
    },
    {
        "id": "d92b976f912b49a3",
        "type": "inject",
        "z": "265bb845ac3d2699",
        "name": "Every 1 sec",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "eba93f820c6414dc"
            ]
        ]
    },
    {
        "id": "e7429b22b475d868",
        "type": "inject",
        "z": "265bb845ac3d2699",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "40fd1c62ca9c23ad"
            ]
        ]
    },
    {
        "id": "06fee20917e236ef",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "trading interval  M-F 9:30 - 4PM",
        "func": "let d = new Date();\n\nlet hour = d.getHours();\nlet min = d.getMinutes();\nlet day = d.getDay(); // day of the week\nlet sec = d.getSeconds();\n\n//node.warn(\"Date: \" +d+ \" Day: \" +day+ \" Hour: \" +hour+ \" Minute: \" +min+ \" Seconds: \" +sec)\n\n// this will run during trading 9:30 - 10:30 am\n// if ((day > 0 && day < 6 && hour > 9 && hour < 11) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this will run during trading 9:30 - 4:00 pm\n if ((day > 0 && day < 6 && hour > 9 && hour < 16) || (day > 0 && day < 6 && hour > 8 && hour < 10 && min > 29 && min < 60)) {  \n\n// this runs 9 am - 4 pm\n//if ( day > 0 && day < 6 && hour > 8 && hour < 16 ) { \n\n// this runs 4 am - 8 pm\n\n// if (day > 0 && day < 6 && hour > 3 && hour < 21) { \n\n// this runs 6 am - 8 pm\n//if (day > 0 && day < 6 && hour > 5 && hour < 21) { \n\n//node.warn(\"Market Open\")\nreturn msg;\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1420,
        "wires": [
            [
                "30ca62f86dc9ffec",
                "8c033930f17064ef"
            ]
        ]
    },
    {
        "id": "e71d7ea7ba0c5702",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "create array",
        "func": "//node.warn(msg.payload)\n\n\nlet prices = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    prices.push( msg.payload[i][\"price\"])\n}\n\nmsg.prices = prices\n//node.warn(prices)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1160,
        "wires": [
            [
                "47c1172034cfd6a3"
            ]
        ]
    },
    {
        "id": "47c1172034cfd6a3",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "Short Average",
        "func": "let price = msg.prices\nprice = price.slice(0, -1);\n//node.warn(price)\n\nvar prices = JSON.parse(\"[\"+price+\"]\");\n//node.warn(prices)\n\nmsg.shortavg = (eval(prices.join('+')) / prices.length) \n//node.warn(\"ShortSMA: \" +msg.shortavg)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1160,
        "wires": [
            [
                "7324c641fc21368f"
            ]
        ]
    },
    {
        "id": "486879816380ba2b",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "4) Calculate Signal Line",
        "info": "",
        "x": 160,
        "y": 1240,
        "wires": []
    },
    {
        "id": "1a0e0fb5536e8599",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "Please refer to the Flow Documentation detailed explanation of this flow.",
        "info": "",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "6825ccedb61b9d01",
        "type": "pts_oauth_browser",
        "z": "265bb845ac3d2699",
        "callback": "",
        "redirect": "",
        "name": "Documentation Link",
        "x": 380,
        "y": 80,
        "wires": []
    },
    {
        "id": "407d2f9eecd0ef9c",
        "type": "inject",
        "z": "265bb845ac3d2699",
        "name": "Click Here to Open",
        "props": [
            {
                "p": "redirect",
                "v": "https://docs.google.com/document/d/1JrOxeQVfjAsRMMBDR6p9b-yRzCCs8m8frQoQvqwtjjw/edit",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "6825ccedb61b9d01"
            ]
        ]
    },
    {
        "id": "83c316f819195bb5",
        "type": "polygon-last-trade-v3",
        "z": "265bb845ac3d2699",
        "conf": "eef6c3a7a3d811ce",
        "symbol": "AAPL",
        "x": 820,
        "y": 440,
        "wires": [
            [
                "2ac4e49867d70ac7"
            ]
        ]
    },
    {
        "id": "cf251fa74ff79282",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "define Polygon request",
        "func": "let ux = (Date.now()) / 1000\nmsg.ux = ux.toFixed(0)\n\nmsg.symbol = 'AAPL'\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: msg.symbol,\n    cnt: cnt,\n}\n\nmsg.topic = msg.symbol\n//node.warn(msg.symbol)\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 440,
        "wires": [
            [
                "83c316f819195bb5"
            ]
        ]
    },
    {
        "id": "2ac4e49867d70ac7",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "update query",
        "func": "//node.warn(msg.payload.results)\n\nlet sql = ''\n\nfor (let item of msg.payload.results) {\n    msg.price = item.price;\n    msg.trf_unixtime = item.sip_timestamp / 1000000000; \n    msg.trf_unixtime = msg.trf_unixtime.toFixed(0);\n    msg.datetime = msg.unixtime;\n    sql += \"insert into onesecprice (unixtime,  currentdt, trf_unixtime, trf_dt, price) values (\" + msg.ux + \",TO_TIMESTAMP(\" + msg.ux + \"),\" + msg.trf_unixtime + \",TO_TIMESTAMP(\" + msg.trf_unixtime + \"),\" + msg.price + \") ON CONFLICT DO NOTHING;\\n\"\n\n}\n\nmsg.query = sql\n//node.warn(sql)\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 440,
        "wires": [
            [
                "4c68a2ef13b035e7",
                "cefc6d842a1932ab"
            ]
        ]
    },
    {
        "id": "4c68a2ef13b035e7",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1240,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "8e781d7e198959bc",
        "type": "postgresql",
        "z": "265bb845ac3d2699",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1200,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "1ea4721b20a0449d",
        "type": "change",
        "z": "265bb845ac3d2699",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ux",
                "pt": "flow",
                "to": "ux",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "874257d55d5f0366",
        "type": "alpaca-data-trades",
        "z": "265bb845ac3d2699",
        "conf": "b7eae41092ec274e",
        "symbol": "",
        "start": "",
        "end": "",
        "limit": "",
        "feed": "",
        "name": "",
        "x": 760,
        "y": 340,
        "wires": [
            [
                "c956dee4a49acb19"
            ]
        ]
    },
    {
        "id": "bbea9c461cf2276d",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "define range values",
        "func": "var nowDate = new Date();\n//var oneMinAgo = new Date(nowDate.setMinutes(nowDate.getMinutes() - 1));\n//msg.start = oneMinAgo.toISOString();\n\nvar oneSecAgo = new Date(nowDate.setSeconds(nowDate.getSeconds() - 1));\nmsg.start = oneSecAgo.toISOString();\n\n//var oneHourAgo = new Date(nowDate.setHours(nowDate.getHours() - 2));\n//msg.start = oneHourAgo.toISOString();\n\n\n\nvar nowDate = new Date();\nvar zeroMinAgo = new Date(nowDate.setMinutes(nowDate.getMinutes() - 0));\n//node.warn(\"End: \" +oneHourAgo)\nmsg.end = zeroMinAgo.toISOString();\n\nvar date = new Date();\nlet wkday = date.toString();\nwkday = wkday.substring(0, 3);\n//node.warn(wkday)\n\nlet ux = (Date.now()) / 1000\nmsg.ux = ux.toFixed(0)\n\n//msg.start = '2023-10-20T10:00:00Z'\n//msg.end   = '2023-10-20T10:10:00Z'\nmsg.symbol = 'AAPL'\nmsg.feed = 'sip'\nmsg.limit = 1\n//node.warn(\"Unixtime: \" +msg.ux+ \" Day: \" + wkday + \" Symbol: \" + msg.symbol + \" From: \" + msg.start + \" To: \" + msg.end + \" Feed: \" + msg.feed)\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 340,
        "wires": [
            [
                "874257d55d5f0366"
            ]
        ]
    },
    {
        "id": "c956dee4a49acb19",
        "type": "function",
        "z": "265bb845ac3d2699",
        "name": "insert into onesecprice",
        "func": "msg.len = msg.payload.results.length\n//node.warn(msg.len)\n\nlet sql = []\n\nfor (var i = 0; i < msg.len; i++) {\n    msg.price = msg.payload.results[i][\"price\"]\n    msg.trf_unixtime = msg.payload.results[i][\"trf_timestamp\"] / 1000\n    msg.trf_unixtime = msg.trf_unixtime.toFixed(0)\n  \n    msg.datetime = msg.unixtime\n    \n//    node.warn(msg.price)\n    sql += \"insert into onesecprice (unixtime,  currentdt, trf_unixtime, trf_dt, price) values (\" + msg.ux + \",TO_TIMESTAMP(\" + msg.ux + \"),\" +msg.trf_unixtime+ \",TO_TIMESTAMP(\" + msg.trf_unixtime + \"),\" + msg.price + \") ON CONFLICT DO NOTHING;\\n\"\n    //node.warn(sql)\n\n}    \n\nlet len = sql.length;\nif (len > 0){\nmsg.query = sql\n//node.warn(msg.query)\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 340,
        "wires": [
            [
                "1ea4721b20a0449d",
                "8e781d7e198959bc",
                "98e10419b5f9319c"
            ]
        ]
    },
    {
        "id": "6cf2dbb73cb5d55d",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "if using Polygon data, use this flow.",
        "info": "",
        "x": 280,
        "y": 440,
        "wires": []
    },
    {
        "id": "cefc6d842a1932ab",
        "type": "change",
        "z": "265bb845ac3d2699",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ux",
                "pt": "flow",
                "to": "ux",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1250,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "7f59ba62bad2b08b",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "Display or truncate table",
        "info": "",
        "x": 190,
        "y": 740,
        "wires": []
    },
    {
        "id": "e067b9344b640d3d",
        "type": "comment",
        "z": "265bb845ac3d2699",
        "name": "if using Alpaca data, use this flow. SIP plan required.",
        "info": "",
        "x": 310,
        "y": 360,
        "wires": []
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "eef6c3a7a3d811ce",
        "type": "polygon-account",
        "name": "jollybaskara"
    },
    {
        "id": "b7eae41092ec274e",
        "type": "alpaca-account",
        "name": "Live",
        "keyId": "PKW9OB4NY7PL2KAZ696T",
        "paper": false
    }
]