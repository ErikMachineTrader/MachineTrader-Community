[
    {
        "id": "1313e91961cb67b8",
        "type": "tab",
        "label": "Update Intraday Algos",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b1831853c3430d91",
        "type": "postgresql",
        "z": "1313e91961cb67b8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 400,
        "wires": [
            [
                "5b3914d3428a8098"
            ]
        ]
    },
    {
        "id": "5b3914d3428a8098",
        "type": "split",
        "z": "1313e91961cb67b8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 400,
        "wires": [
            [
                "976394f1a67e4859"
            ]
        ]
    },
    {
        "id": "98337836f1d5b70e",
        "type": "function",
        "z": "1313e91961cb67b8",
        "name": "select from algos ",
        "func": "msg.query = \"select id, algo_name, account, portfolio_size from algos where algo_type = 'intraday'\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "b1831853c3430d91"
            ]
        ]
    },
    {
        "id": "a6022522fa21e953",
        "type": "inject",
        "z": "1313e91961cb67b8",
        "name": "Every Minute",
        "props": [
            {
                "p": "topic",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "98337836f1d5b70e"
            ]
        ]
    },
    {
        "id": "1642d22cdfd37ce0",
        "type": "comment",
        "z": "1313e91961cb67b8",
        "name": "update algo_performance from orders for intraday algos. All buys and sells",
        "info": "",
        "x": 320,
        "y": 340,
        "wires": []
    },
    {
        "id": "f68d3e6c423c15e9",
        "type": "comment",
        "z": "1313e91961cb67b8",
        "name": "This flow updates intraday trades. Rather than simply displaying the changes in the portfolio, this flow calculates all of the buys and sells for each ticker from the orders table.",
        "info": "",
        "x": 630,
        "y": 120,
        "wires": []
    },
    {
        "id": "cf6dd0f420de74a9",
        "type": "comment",
        "z": "1313e91961cb67b8",
        "name": "After subtracting the buys from the sells, we need to add back current unsold positions held.  Also, if the ticker was used in previous algos, a filter date should be set to limit the orders to recent orders.",
        "info": "",
        "x": 710,
        "y": 160,
        "wires": []
    },
    {
        "id": "958afb1ee9f7cf74",
        "type": "function",
        "z": "1313e91961cb67b8",
        "name": "get sum buys and sells from orders",
        "func": "let algo_name = msg.algo_name\nlet dt = msg.dt\ndt = '2023-02-23'\nlet sql = \"select sum(buys) as a, sum(sells) as b from orders where portfolioname = '\" +algo_name+ \"' and created_at > '\" +dt+ \"%';\" // greater than now\n//node.warn(sql)\nmsg.query = sql\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 460,
        "wires": [
            [
                "faa7c6938416a568"
            ]
        ]
    },
    {
        "id": "976394f1a67e4859",
        "type": "function",
        "z": "1313e91961cb67b8",
        "name": "select tickers ",
        "func": "msg.algo_name = msg.payload[\"algo_name\"]\nmsg.id = msg.payload[\"algo_name\"]\nmsg.account = msg.payload[\"account\"]\nmsg.psize = msg.payload[\"portfolio_size\"]\n\nconst dateObj = new Date();\nlet dt = dateObj.toISOString()\nlet dt1 = dt.substring(0, 10);\nmsg.dt = dt1\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 400,
        "wires": [
            [
                "958afb1ee9f7cf74"
            ]
        ]
    },
    {
        "id": "faa7c6938416a568",
        "type": "postgresql",
        "z": "1313e91961cb67b8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 460,
        "wires": [
            [
                "cb4242887bd378b1"
            ]
        ]
    },
    {
        "id": "5d6f7fee71f8e5bc",
        "type": "function",
        "z": "1313e91961cb67b8",
        "name": "update algos",
        "func": "let psize = 0\nlet pctgain_alltime = 0\n\nlet buys = msg.payload[\"a\"]\nlet sells = msg.payload[\"b\"]\nlet name = msg.algo_name\npsize = msg.psize\nbuys = +buys\nsells = +sells\n\nif (buys == null ) { buys = 0}\nif (sells == null) { sells = 0 }\n\nmsg.buys = buys\nmsg.sells = sells\nlet algo_name = msg.algo_name\n//node.warn(\"Algo: \" +algo_name+ \" Buys: \" +buys+ \" Sells: \" +sells)\n\nmsg.query = \"select sum(market_value) from positions where portfolioname = '\" +algo_name+ \"';\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 460,
        "wires": [
            [
                "baa3dabb39375134"
            ]
        ]
    },
    {
        "id": "cb4242887bd378b1",
        "type": "split",
        "z": "1313e91961cb67b8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 460,
        "wires": [
            [
                "5d6f7fee71f8e5bc"
            ]
        ]
    },
    {
        "id": "3f296bc92e19d299",
        "type": "inject",
        "z": "1313e91961cb67b8",
        "name": "Test Queries",
        "props": [
            {
                "p": "query",
                "v": "select * from algos",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from orders order by created_at desc limit 10",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from positions",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from algo_performance where type = 'intraday' and buys is not null",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update tickers_live set id = 1676404099556 where portfolioname = 'Buy FAANG Portfolio [LIVE]'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from tickers_paper where id = 1676569973066",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from orders where symbol = 'QQQ'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from algo_performance where symbol = 'ETHUSD'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from algo_performance where algo_name = 'Buy Defense%'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select * from algo_performance where symbol = 'QQQ'",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "delete from algo_performance where algo_name like 'Buy Crypto Portfolio' and market_value is null",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "alter table orders add column sells FLOAT",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "update algos set algo_name = 'Trade QQQ Mean Reversion' where id = 1676570496465",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "alter table algos add column current_position FLOAT",
                "vt": "str"
            },
            {
                "p": "query1",
                "v": "select sum(market_value) from positions where portfolioname = 'Short Top Stocks'",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "dcac2bb1f2d28b54"
            ]
        ]
    },
    {
        "id": "dcac2bb1f2d28b54",
        "type": "postgresql",
        "z": "1313e91961cb67b8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 340,
        "y": 240,
        "wires": [
            [
                "c6bbc644c508ece0"
            ]
        ]
    },
    {
        "id": "c6bbc644c508ece0",
        "type": "debug",
        "z": "1313e91961cb67b8",
        "name": "debug 342",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 240,
        "wires": []
    },
    {
        "id": "b3e0ab2159394c36",
        "type": "comment",
        "z": "1313e91961cb67b8",
        "name": "Copyright©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 970,
        "y": 40,
        "wires": []
    },
    {
        "id": "984d5d2fd28710a6",
        "type": "comment",
        "z": "1313e91961cb67b8",
        "name": "This flow updates INTRADAY algo performance",
        "info": "",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "baa3dabb39375134",
        "type": "postgresql",
        "z": "1313e91961cb67b8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 460,
        "wires": [
            [
                "d45ba601476c4e4f"
            ]
        ]
    },
    {
        "id": "d45ba601476c4e4f",
        "type": "split",
        "z": "1313e91961cb67b8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1110,
        "y": 460,
        "wires": [
            [
                "f5b81ebeca030469"
            ]
        ]
    },
    {
        "id": "f5b81ebeca030469",
        "type": "function",
        "z": "1313e91961cb67b8",
        "name": "display results",
        "func": "let positions = msg.payload[\"sum\"]\nlet psize = msg.psize\n\nlet buys = msg.buys\nlet sells = msg.sells\nlet algo_name = msg.algo_name\nlet gain = sells - buys + positions\nlet pctgain = 0\n\nif (psize >  0){\n    pctgain = (gain / psize) * 100\n}\n\nif ( (gain > 0) && (pctgain < 0) ){ \n    pctgain = pctgain * -1\n}\n//node.warn(\"Algo: \" +algo_name+ \" Buys: \" +buys+ \" Sells: \" +sells+ \" Positions: \" +positions+ \" Gain: \" +gain+ \" Pctgain: \" +pctgain)\n\nmsg.query = \"update algos set gain_today = \" + gain + \", pctgain_today = \" + pctgain + \", gain_alltime = \" + gain + \", pctgain_alltime = \" + pctgain + \" where algo_name = '\" +algo_name+ \"';\" \n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 520,
        "wires": [
            [
                "96be66f16e9f97c7"
            ]
        ]
    },
    {
        "id": "96be66f16e9f97c7",
        "type": "postgresql",
        "z": "1313e91961cb67b8",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 440,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]