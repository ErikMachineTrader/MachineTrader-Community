[
    {
        "id": "f69bbfe31024e861",
        "type": "tab",
        "label": "Buy High Dividend Portfolio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e4d4619d86b5c42f",
        "type": "comment",
        "z": "f69bbfe31024e861",
        "name": "The name of this strategy is \"Buy High Dividend Portfolio\"",
        "info": "",
        "x": 250,
        "y": 40,
        "wires": []
    },
    {
        "id": "b937f0125bd79abd",
        "type": "comment",
        "z": "f69bbfe31024e861",
        "name": "Flow 1: Define Strategy and Set Trading Values (ONCE)",
        "info": "",
        "x": 260,
        "y": 80,
        "wires": []
    },
    {
        "id": "f7114f99773f7366",
        "type": "comment",
        "z": "f69bbfe31024e861",
        "name": "Flow 3: Create trading flow (ONCE)",
        "info": "",
        "x": 180,
        "y": 720,
        "wires": []
    },
    {
        "id": "f8eee566842771ac",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "get list of tickers to buy",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 780,
        "wires": [
            [
                "14e5434135b53af1"
            ]
        ]
    },
    {
        "id": "14e5434135b53af1",
        "type": "split",
        "z": "f69bbfe31024e861",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 780,
        "wires": [
            [
                "cd1d4c78ac6032e7"
            ]
        ]
    },
    {
        "id": "0907468bec76c8de",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "get list of tickers to buy",
        "func": "let id = msg.id\nlet symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nmsg.query = \"select polygon_symbol, alpaca_symbol from alpaca_assets where symbol = '\" +symbol+ \"';\"\n//node.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 780,
        "wires": [
            [
                "c74acad40ff441d2"
            ]
        ]
    },
    {
        "id": "3af4902272687ca9",
        "type": "function-npm",
        "z": "f69bbfe31024e861",
        "name": "Get price of trade trade",
        "func": "let symbol = msg.polygon_symbol\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 840,
        "wires": [
            [
                "06a76879d18b742b"
            ]
        ]
    },
    {
        "id": "cd1d4c78ac6032e7",
        "type": "delay",
        "z": "f69bbfe31024e861",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 780,
        "wires": [
            [
                "0907468bec76c8de"
            ]
        ]
    },
    {
        "id": "a02c1128b79b813e",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "get symbols from alpaca_assets",
        "func": "let polygon_symbol = msg.payload[\"polygon_symbol\"]\nlet alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet symbol = msg.symbol\n\nmsg.alpaca_symbol = alpaca_symbol\nmsg.polygon_symbol = polygon_symbol\nmsg.symbol = symbol\n//node.warn(\"Symbol: \" +symbol+ \" Polygon Symbol:\" +polygon_symbol+ \" Alpaca Symbol: \" +alpaca_symbol) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 840,
        "wires": [
            [
                "3af4902272687ca9"
            ]
        ]
    },
    {
        "id": "c74acad40ff441d2",
        "type": "postgresql",
        "z": "f69bbfe31024e861",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1080,
        "y": 780,
        "wires": [
            [
                "ad5fef3a63bc5245"
            ]
        ]
    },
    {
        "id": "ad5fef3a63bc5245",
        "type": "split",
        "z": "f69bbfe31024e861",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 840,
        "wires": [
            [
                "a02c1128b79b813e"
            ]
        ]
    },
    {
        "id": "dd1a2aa33187f63c",
        "type": "inject",
        "z": "f69bbfe31024e861",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 780,
        "wires": [
            [
                "f8eee566842771ac"
            ]
        ]
    },
    {
        "id": "c4a2b9620953cd3f",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 840,
        "wires": [
            [
                "b366d81e8c55beec"
            ]
        ]
    },
    {
        "id": "06a76879d18b742b",
        "type": "polygon-last-trade-v3",
        "z": "f69bbfe31024e861",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 940,
        "y": 840,
        "wires": [
            [
                "c4a2b9620953cd3f"
            ]
        ]
    },
    {
        "id": "b366d81e8c55beec",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\n//let ticker = msg.alpaca_symbol\nlet algo_name = flow.get(\"algo_name\")\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\nlet price = msg.price\n\nnode.warn(\"Alpaca Symbol: \" +ticker+ \" Price: \" +price+ \" Number: \" +number+ \" PSize: \" +psize)\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'buy',\n    \"type\": 'limit',\n    \"limit_price\": price, \n    \"client_order_id\": client_order_id,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 900,
        "wires": [
            [
                "7612bdb7acb7c101"
            ]
        ]
    },
    {
        "id": "7612bdb7acb7c101",
        "type": "alpaca-order",
        "z": "f69bbfe31024e861",
        "conf": "810ce3520dc18040",
        "x": 590,
        "y": 900,
        "wires": [
            [
                "3c2c5a1e730b1fd6"
            ]
        ]
    },
    {
        "id": "e80a8c78a1521a0d",
        "type": "postgresql",
        "z": "f69bbfe31024e861",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1060,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "3c2c5a1e730b1fd6",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 900,
        "wires": [
            [
                "e80a8c78a1521a0d"
            ]
        ]
    },
    {
        "id": "3334497eea10b2aa",
        "type": "inject",
        "z": "f69bbfe31024e861",
        "name": "get dividened stocks",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select distinct ticker from dividends where pct between 11 and 15 and exdate > '2022-10-01' ",
        "x": 230,
        "y": 120,
        "wires": [
            [
                "717445334d8a374e"
            ]
        ]
    },
    {
        "id": "4d29eeda5f8ef7ae",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "get fresh list of tickers",
        "func": "let tickers = ''\nmsg.count =  msg.payload.length\n\nfor (let item of msg.payload) {\n    let ticker = item.ticker;\n    tickers += ticker+ \", \"\n}\n\n// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nmsg.id = d\nmsg.tickers = tickers\nmsg.algo_name = 'Buy High Dividend Portfolio (11-15%)'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 120,
        "wires": [
            [
                "1ee8e24d7bbec99f"
            ]
        ]
    },
    {
        "id": "1ee8e24d7bbec99f",
        "type": "change",
        "z": "f69bbfe31024e861",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "count",
                "pt": "flow",
                "to": "count",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 120,
        "wires": [
            [
                "ffaf977e246c3161"
            ]
        ]
    },
    {
        "id": "ffaf977e246c3161",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "Display flow vars",
        "func": "let id = flow.get(\"id\")\nlet name = flow.get(\"algo_name\")\nlet tickers = flow.get(\"tickers\")\nlet count = flow.get(\"count\")\nnode.warn(\"ID: \" +id+ \" Name: \" +name+ \" Tickers: \" +tickers+ \" Count: \" +count)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b4cef1b0c7e12263",
        "type": "comment",
        "z": "f69bbfe31024e861",
        "name": "Flow 2: Create new entry in algos table (FIRSTTIME ONLY)",
        "info": "",
        "x": 270,
        "y": 460,
        "wires": []
    },
    {
        "id": "27beafd3701151f3",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "define values required for adding trade to portfolio",
        "func": "let id = flow.get(\"id\")\nlet login = 'demo'\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\nlet asset_class = 'stocks' // stocks or crypto\nlet number = flow.get(\"count\") // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'live'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet strategy_type = \"long\"\nlet benchmark = 'SPY'\n\nnode.warn(ticker)\n\nmsg.id = id\nmsg.login = login\nmsg.ticker = ticker\nmsg.algo_name = algo_name\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 220,
        "wires": [
            [
                "c4e934a18bbabe1d"
            ]
        ]
    },
    {
        "id": "52765e3b5d6b7d6b",
        "type": "inject",
        "z": "f69bbfe31024e861",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 220,
        "wires": [
            [
                "27beafd3701151f3"
            ]
        ]
    },
    {
        "id": "c4e934a18bbabe1d",
        "type": "change",
        "z": "f69bbfe31024e861",
        "name": "store as flow vars",
        "rules": [
            {
                "t": "set",
                "p": "id",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "login",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticker",
                "pt": "flow",
                "to": "ticker",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_name",
                "pt": "flow",
                "to": "algo_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "asset_class",
                "pt": "flow",
                "to": "asset_class",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "number",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "algo_type",
                "pt": "flow",
                "to": "algo_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "flow",
                "to": "target",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f5c3ef7307b31a04",
        "type": "inject",
        "z": "f69bbfe31024e861",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "033007925e5a3793",
                "0f716bf288994f60"
            ]
        ]
    },
    {
        "id": "033007925e5a3793",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "get tickers ",
        "func": "let ticker = flow.get(\"tickers\")\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "51da0916d3d9b3fb"
            ]
        ]
    },
    {
        "id": "51da0916d3d9b3fb",
        "type": "split",
        "z": "f69bbfe31024e861",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "10a68b4afb961103"
            ]
        ]
    },
    {
        "id": "10a68b4afb961103",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "insert into tickers_live",
        "func": "let id = flow.get(\"id\")\nlet symbol = msg.payload\nlet portfolioname = flow.get(\"algo_name\")\nsymbol = symbol.replace(\" \",\"\")\n//msg.query = \"delete from tickers where symbol = '\" + symbol + \"';\"\nmsg.query = \"insert into tickers_live (id, symbol, portfolioname) values (\" + id + \",'\" + symbol + \"', '\" + portfolioname + \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\nmsg.symbol = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 320,
        "wires": [
            [
                "a6b9254af308f24c"
            ]
        ]
    },
    {
        "id": "a6b9254af308f24c",
        "type": "postgresql",
        "z": "f69bbfe31024e861",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "7c79d5d7e497afa6",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "get tickers with name from alpaca_assets",
        "func": "msg.query = \"update tickers_live set name = alpaca_assets.name FROM alpaca_assets where alpaca_assets.symbol = tickers_live.symbol\"\nnode.warn(msg.query)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 360,
        "wires": [
            [
                "c9da06fda10118ba"
            ]
        ]
    },
    {
        "id": "0f716bf288994f60",
        "type": "delay",
        "z": "f69bbfe31024e861",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 360,
        "wires": [
            [
                "7c79d5d7e497afa6"
            ]
        ]
    },
    {
        "id": "c9da06fda10118ba",
        "type": "postgresql",
        "z": "f69bbfe31024e861",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "f3620eecc114ed6e",
        "type": "function",
        "z": "f69bbfe31024e861",
        "name": "add values to algos table",
        "func": "let id = flow.get(\"id\")\nlet ticker = flow.get(\"tickers\")\nlet algo_name = flow.get(\"algo_name\")\n\nlet login = flow.get(\"login\")\nlet asset_class = flow.get(\"asset_class\")\nlet number = flow.get(\"number\")\nlet target = flow.get(\"target\")\nlet account = flow.get(\"account\")\nlet psize = flow.get(\"psize\")\nlet algo_type = flow.get(\"algo_type\")\nlet status = flow.get(\"status\")\nlet benchmark = flow.get(\"benchmark\")\n\nlet benchmark_start = global.get(\"spy_current\")\n\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 520,
        "wires": [
            [
                "01635a1a24060d71"
            ]
        ]
    },
    {
        "id": "bf1fd6f4ec6295fe",
        "type": "inject",
        "z": "f69bbfe31024e861",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 520,
        "wires": [
            [
                "f3620eecc114ed6e"
            ]
        ]
    },
    {
        "id": "01635a1a24060d71",
        "type": "postgresql",
        "z": "f69bbfe31024e861",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "6906c8ef0c485835",
        "type": "comment",
        "z": "f69bbfe31024e861",
        "name": "Copyright©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 910,
        "y": 20,
        "wires": []
    },
    {
        "id": "717445334d8a374e",
        "type": "mysql",
        "z": "f69bbfe31024e861",
        "mydb": "3564bcf07c743fdf",
        "name": "",
        "x": 390,
        "y": 120,
        "wires": [
            [
                "4d29eeda5f8ef7ae"
            ]
        ]
    },
    {
        "id": "b66484041154f235",
        "type": "comment",
        "z": "f69bbfe31024e861",
        "name": "LIVE",
        "info": "",
        "x": 610,
        "y": 40,
        "wires": []
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "810ce3520dc18040",
        "type": "alpaca-account",
        "name": "live",
        "keyId": "PKF9QKA8GYZ6EQKYIZWB",
        "paper": true
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    }
]