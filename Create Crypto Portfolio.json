[
    {
        "id": "821ee3246fe6f749",
        "type": "tab",
        "label": "Create Crypto Portfolio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "54c51ce8ae466352",
        "type": "comment",
        "z": "821ee3246fe6f749",
        "name": "The name of this strategy is \"Create Crypto Portfolio\"",
        "info": "",
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "4bfb1013bda72af3",
        "type": "inject",
        "z": "821ee3246fe6f749",
        "name": "BUY ",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 580,
        "wires": [
            [
                "4401701917ef6b2a",
                "be1bf73784b6dba8"
            ]
        ]
    },
    {
        "id": "6dbb32d780097c76",
        "type": "comment",
        "z": "821ee3246fe6f749",
        "name": "Flow 2: Buy Order",
        "info": "",
        "x": 150,
        "y": 500,
        "wires": []
    },
    {
        "id": "6830a72332b2184a",
        "type": "comment",
        "z": "821ee3246fe6f749",
        "name": "Flow #1: Enter strategy information in the \"set and store strategy variables function node",
        "info": "",
        "x": 610,
        "y": 500,
        "wires": []
    },
    {
        "id": "5eddb39d1b552d7d",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1000,
        "wires": [
            [
                "398be97504b773cc"
            ]
        ]
    },
    {
        "id": "398be97504b773cc",
        "type": "alpaca-query-order",
        "z": "821ee3246fe6f749",
        "conf": "e535f42f1df1b25f",
        "x": 720,
        "y": 1000,
        "wires": [
            [
                "ebe8d2a1a70eae5c"
            ]
        ]
    },
    {
        "id": "ebe8d2a1a70eae5c",
        "type": "split",
        "z": "821ee3246fe6f749",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 890,
        "y": 1000,
        "wires": [
            [
                "32a282b8d5f33f11"
            ]
        ]
    },
    {
        "id": "3b07f505bd66c880",
        "type": "sqlite",
        "z": "821ee3246fe6f749",
        "mydb": "6dd483b7c4c16042",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1220,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "e86718ab5eaf6e07",
        "type": "comment",
        "z": "821ee3246fe6f749",
        "name": "Flow 3: Update portfolio table with order information when order is filled",
        "info": "",
        "x": 310,
        "y": 880,
        "wires": []
    },
    {
        "id": "6d6afed0fb3d156c",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select clientorderid from portfolio where portfolioid = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 940,
        "wires": [
            [
                "e0f5ba4757b6e3ea"
            ]
        ]
    },
    {
        "id": "e0f5ba4757b6e3ea",
        "type": "sqlite",
        "z": "821ee3246fe6f749",
        "mydb": "6dd483b7c4c16042",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 740,
        "y": 940,
        "wires": [
            [
                "0a006b80132f54bb"
            ]
        ]
    },
    {
        "id": "4262d25b3a215c58",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"clientorderid\"]\nmsg.clientid = clientorderid\n//node.warn(msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 940,
        "wires": [
            [
                "5eddb39d1b552d7d"
            ]
        ]
    },
    {
        "id": "0a006b80132f54bb",
        "type": "split",
        "z": "821ee3246fe6f749",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 890,
        "y": 940,
        "wires": [
            [
                "2ac4107a69d215de"
            ]
        ]
    },
    {
        "id": "2ac4107a69d215de",
        "type": "delay",
        "z": "821ee3246fe6f749",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1030,
        "y": 940,
        "wires": [
            [
                "4262d25b3a215c58"
            ]
        ]
    },
    {
        "id": "a5dbd6e86a18b53d",
        "type": "inject",
        "z": "821ee3246fe6f749",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 940,
        "wires": [
            [
                "6d6afed0fb3d156c"
            ]
        ]
    },
    {
        "id": "4401701917ef6b2a",
        "type": "delay",
        "z": "821ee3246fe6f749",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 760,
        "wires": [
            [
                "6d6afed0fb3d156c"
            ]
        ]
    },
    {
        "id": "a7bdba0d0870cc7e",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "Create Portfolio",
        "func": "let tickers = msg.payload[\"symbol\"]\n//node.warn(\"Tickers: \" +tickers)\nmsg.ticker = tickers\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 580,
        "wires": [
            [
                "4d013ba1bd0ef297"
            ]
        ]
    },
    {
        "id": "4d013ba1bd0ef297",
        "type": "function-npm",
        "z": "821ee3246fe6f749",
        "name": "Get current price",
        "func": "let tickertype = flow.get(\"tickertype\")\nlet symbol = msg.ticker\n\nif ( tickertype == 'crypto'){\n\n    symbol = \"X:\" +symbol\n//    symbol = symbol.replace(\"/\", \"\");\n}\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\nmsg.symbol = symbol\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 580,
        "wires": [
            [
                "fe5b2c8fa4c23975"
            ]
        ]
    },
    {
        "id": "32b3dfbf76c2bb51",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "get price last trade",
        "func": "let price = ''\nlet item = 0\nlet symbol = msg.symbol\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = parseFloat(price).toFixed(2);\nmsg.price = price\n//node.warn(\"Symbol: \" +symbol+ \" Current Price: \" +price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 660,
        "wires": [
            [
                "71f11189da0ccce4"
            ]
        ]
    },
    {
        "id": "fe5b2c8fa4c23975",
        "type": "polygon-last-trade-v3",
        "z": "821ee3246fe6f749",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 500,
        "y": 660,
        "wires": [
            [
                "32b3dfbf76c2bb51"
            ]
        ]
    },
    {
        "id": "c2d8aa41eb06b6fd",
        "type": "alpaca-order",
        "z": "821ee3246fe6f749",
        "conf": "e535f42f1df1b25f",
        "x": 1150,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "e362eaeb9a5ddc0d",
        "type": "sqlite",
        "z": "821ee3246fe6f749",
        "mydb": "0e15b606864a8f07",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1140,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "976cf9d33d377426",
        "type": "change",
        "z": "821ee3246fe6f749",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "clientorderid",
                "pt": "flow",
                "to": "clientorderid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "71f11189da0ccce4",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "place market order ",
        "func": "let psize = flow.get(\"psize\")\nlet id = flow.get(\"portfolioid\")\nlet benchmark = flow.get(\"benchmark\")\nlet benchmark_price = flow.get(\"benchmark_price\")\nlet account = flow.get(\"account\")\nlet name = flow.get(\"name\")\nlet tickertype = flow.get(\"tickertype\")\n\nlet ticker = msg.symbol\n\n\nif (tickertype == 'crypto') {\n\n    ticker = ticker.replace(\"X:\", \"\");\n    ticker = ticker.replace(\"USD\", \"/USD\");  // this works only if the currency is USD\n\n}\n\n\nlet localtime = new Date();\n\n\nlet price = msg.price\n\n// use this to balance the portfolio equally\nlet number = flow.get(\"number\")\nlet qty = (psize / number) / price\n//qty = Math.round(qty)\nqty = Math.round(qty * 10) / 10; // this allows fractional buys to 1 digit\nnode.warn(\"Ticker: \" + ticker + \" Price: \" + price + \" Portfolio Size: \" + psize + \" Qty: \" + qty + \" Number:\" +number)\n\n\n// if crypto, Limit price must exceed current price by $1 \nif ((tickertype == 'crypto)')) {\nprice = (price + 1)  // Limit price must exceed current price by $1 \nprice = price.toFixed(2)\n}\n\n\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id\n\n\nlet sql = \"replace into portfolio (account,date,portfolioid,name,ticker,tickertype,clientorderid,price,qty,benchmark) values ('\" + account + \"', '\" + localtime + \"',\" + id + \",'\" + name + \"','\" + ticker + \"','\" + tickertype + \"','\" + client_order_id + \"','\" +price+ \"',\" +qty+ \",'\" +benchmark+ \"');\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\n// create a market order for Alpaca\n    let temp = ''\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty, \n        \"side\": \"buy\",\n        \"type\": \"market\",\n //       \"limit_price\": price,\n        \"client_order_id\": client_order_id,\n        \"time_in_force\": \"gtc\"\n    };\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 660,
        "wires": [
            [
                "976cf9d33d377426",
                "c2d8aa41eb06b6fd",
                "e362eaeb9a5ddc0d"
            ]
        ]
    },
    {
        "id": "55e96e444d85b095",
        "type": "mysql",
        "z": "821ee3246fe6f749",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 570,
        "y": 580,
        "wires": [
            [
                "932143b6f988f148"
            ]
        ]
    },
    {
        "id": "be1bf73784b6dba8",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "Get crypto list",
        "func": "let sql = \"select * from alpaca_assets where exchange = 'FTXU' and tradable = 'True';\"\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 580,
        "wires": [
            [
                "55e96e444d85b095"
            ]
        ]
    },
    {
        "id": "932143b6f988f148",
        "type": "split",
        "z": "821ee3246fe6f749",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 580,
        "wires": [
            [
                "71730f8599aac410"
            ]
        ]
    },
    {
        "id": "71730f8599aac410",
        "type": "delay",
        "z": "821ee3246fe6f749",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 580,
        "wires": [
            [
                "a7bdba0d0870cc7e"
            ]
        ]
    },
    {
        "id": "4c0645367405a78c",
        "type": "comment",
        "z": "821ee3246fe6f749",
        "name": "Flow #4: Place Sell Orders",
        "info": "",
        "x": 190,
        "y": 1100,
        "wires": []
    },
    {
        "id": "2b0c3ed77a2e7e13",
        "type": "comment",
        "z": "821ee3246fe6f749",
        "name": "Flow 6: Update portfolio table with filled SELL orders",
        "info": "",
        "x": 270,
        "y": 1460,
        "wires": []
    },
    {
        "id": "d1d1ec4a43d89f16",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "get closed orders - Paper",
        "func": "/* Get Flow variables */\n\nlet ordertype = flow.get(\"orders\")\n//let limit  = flow.get(\"cnt\")\nordertype = \"closed\"\n\n/* Setup alpaca request arguments */\n\nmsg.payload = {\n    status: ordertype, // \"open or closed\"\n    limit: \"500\", // up to 500\n\tdirection: \"desc\" //  \"asc or desc\"\n\n}\n\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1580,
        "wires": [
            [
                "2c9c354a663fe9d3"
            ]
        ]
    },
    {
        "id": "2c9c354a663fe9d3",
        "type": "alpaca-query-order",
        "z": "821ee3246fe6f749",
        "conf": "e535f42f1df1b25f",
        "x": 680,
        "y": 1580,
        "wires": [
            [
                "6ed6145bb3f5a885"
            ]
        ]
    },
    {
        "id": "72d7903fb5a0bdf5",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n//node.warn(clientid)\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\n//node.warn(\"newclientorderid: \" + newclientorderid + \" clientorderid: \" + clientorderid)\n\n//let portfolioid = 0\n\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'sell') ){ // sell side only\n//  if ((symbol = ticker) && (status == 'filled') && (side == 'buy')) { // buy side only\n\n//d = '2022-10-21'\n//if ( (status == 'filled') && (d == shortdate) ) { // filled only for specific date\n//if ( (status == 'filled')  ) { // filled  only\nif ((clientorderid == clientid)) { // filled  only\n\n      let sql = \"update portfolio SET  newfilled_type = '\" + type + \"', newfilled_side = '\" + side + \"', newfilled_tif = '\" + time_in_force + \"', newfilled_status = '\" + status + \"', newfilled_at = '\" + filled_at + \"', newfilled_price = '\" + filled_avg_price + \"', newfilled_qty = '\" + filled_qty + \"', newposition = \" + position + \" where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1580,
        "wires": [
            [
                "fec5ac5d1ab479dc"
            ]
        ]
    },
    {
        "id": "6ed6145bb3f5a885",
        "type": "split",
        "z": "821ee3246fe6f749",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 850,
        "y": 1580,
        "wires": [
            [
                "72d7903fb5a0bdf5",
                "6a1ab16a4dd71c57"
            ]
        ]
    },
    {
        "id": "fec5ac5d1ab479dc",
        "type": "sqlite",
        "z": "821ee3246fe6f749",
        "mydb": "6dd483b7c4c16042",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1200,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "c6b0b135de3ba851",
        "type": "inject",
        "z": "821ee3246fe6f749",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1520,
        "wires": [
            [
                "ee9204eabe03d356"
            ]
        ]
    },
    {
        "id": "ee9204eabe03d356",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "get client order ids from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\n\nlet sql = \"select newclient_order_id from portfolio where portfolioid = \" +id\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1520,
        "wires": [
            [
                "95a59ee48cfae8e0"
            ]
        ]
    },
    {
        "id": "95a59ee48cfae8e0",
        "type": "sqlite",
        "z": "821ee3246fe6f749",
        "mydb": "6dd483b7c4c16042",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 700,
        "y": 1520,
        "wires": [
            [
                "6acfcbe910441c5b"
            ]
        ]
    },
    {
        "id": "1cc321f3d3677493",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "pass clientorderid",
        "func": "let clientorderid = msg.payload[\"newclient_order_id\"]\nmsg.clientid = clientorderid\nnode.warn(\"msg.clientid: \" +msg.clientid)\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1520,
        "wires": [
            [
                "d1d1ec4a43d89f16"
            ]
        ]
    },
    {
        "id": "6acfcbe910441c5b",
        "type": "split",
        "z": "821ee3246fe6f749",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 850,
        "y": 1520,
        "wires": [
            [
                "cea19ee21d8510da"
            ]
        ]
    },
    {
        "id": "cea19ee21d8510da",
        "type": "delay",
        "z": "821ee3246fe6f749",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1010,
        "y": 1520,
        "wires": [
            [
                "1cc321f3d3677493"
            ]
        ]
    },
    {
        "id": "2b14a8df0dffa141",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "update portfolio",
        "func": "let clientorderid = msg.payload[\"client_order_id\"]\nlet clientid = msg.clientid\n\nif ((clientorderid == clientid)) { // filled  only\n\n\nlet sql = \"update portfolio SET  trade_profit = ((newfilled_qty * newfilled_price) - (filled_price * filled_qty)), benchmark_profit = (benchmark_end - benchmark_start) where newclient_order_id = '\" + clientorderid + \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1620,
        "wires": [
            [
                "cb31221d9af9c4d4"
            ]
        ]
    },
    {
        "id": "cb31221d9af9c4d4",
        "type": "sqlite",
        "z": "821ee3246fe6f749",
        "mydb": "6dd483b7c4c16042",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 1200,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "6a1ab16a4dd71c57",
        "type": "delay",
        "z": "821ee3246fe6f749",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 1620,
        "wires": [
            [
                "2b14a8df0dffa141"
            ]
        ]
    },
    {
        "id": "356517f87f58f884",
        "type": "inject",
        "z": "821ee3246fe6f749",
        "name": "COVER",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1160,
        "wires": [
            [
                "b448315698fa0802",
                "d1aa92d91cd77993"
            ]
        ]
    },
    {
        "id": "b448315698fa0802",
        "type": "function-npm",
        "z": "821ee3246fe6f749",
        "name": "Get benchmark",
        "func": "let symbol = flow.get(\"benchmark\")\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 1160,
        "wires": [
            [
                "43a9bc59dd422780"
            ]
        ]
    },
    {
        "id": "2a86966876df5827",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "get benchmark last trade",
        "func": "let price = ''\nlet item = 0\nlet id = flow.get(\"portfolioid\")\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\nnode.warn(\"Benchmark Price: \" +price)\nmsg.benchmark = price\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1160,
        "wires": [
            [
                "e4e7e1219a3a9908"
            ]
        ]
    },
    {
        "id": "43a9bc59dd422780",
        "type": "polygon-last-trade-v3",
        "z": "821ee3246fe6f749",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 540,
        "y": 1160,
        "wires": [
            [
                "2a86966876df5827"
            ]
        ]
    },
    {
        "id": "e4e7e1219a3a9908",
        "type": "change",
        "z": "821ee3246fe6f749",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "benchmark_end",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "12dccd90b126340d",
        "type": "delay",
        "z": "821ee3246fe6f749",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1190,
        "y": 1240,
        "wires": [
            [
                "ba90bbce95090ae3"
            ]
        ]
    },
    {
        "id": "4a2cf19daa826366",
        "type": "delay",
        "z": "821ee3246fe6f749",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 1240,
        "wires": [
            [
                "ad9d139229bd2fa6"
            ]
        ]
    },
    {
        "id": "ad9d139229bd2fa6",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "get tickers",
        "func": "msg.ticker = msg.payload[\"ticker\"]\nmsg.qty = msg.payload[\"filled_qty\"]\nmsg.clientid = msg.payload[\"clientorderid\"]\n\nnode.warn(\"Portfolioid: \" +msg.id+ \" Ticker: \" +msg.ticker+ \" Qty:\" +msg.qty+ \" Clientorderid: \" +msg.clientid)\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1240,
        "wires": [
            [
                "12dccd90b126340d"
            ]
        ]
    },
    {
        "id": "d64790133ba3f366",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "select tickers from portfolio",
        "func": "let id = flow.get(\"portfolioid\")\nlet sql = \"select ticker,filled_qty,clientorderid from portfolio where filled_qty > 0 and trade_profit is null and portfolioid = \" +id\n//node.warn(sql)\nmsg.topic = sql\nmsg.id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1240,
        "wires": [
            [
                "311768a8fccba6d0"
            ]
        ]
    },
    {
        "id": "311768a8fccba6d0",
        "type": "sqlite",
        "z": "821ee3246fe6f749",
        "mydb": "6dd483b7c4c16042",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 580,
        "y": 1240,
        "wires": [
            [
                "9928a530c4148e83"
            ]
        ]
    },
    {
        "id": "9928a530c4148e83",
        "type": "split",
        "z": "821ee3246fe6f749",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 1240,
        "wires": [
            [
                "4a2cf19daa826366"
            ]
        ]
    },
    {
        "id": "e827be185a910cc0",
        "type": "sqlite",
        "z": "821ee3246fe6f749",
        "mydb": "6dd483b7c4c16042",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "portfolios",
        "x": 860,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "3963a876085b12f3",
        "type": "alpaca-order",
        "z": "821ee3246fe6f749",
        "conf": "e535f42f1df1b25f",
        "x": 870,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "e4a2309345e52b9b",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "place market sell order",
        "func": "let id = flow.get(\"portfolioid\")\nlet tickertype = flow.get(\"tickertype\")\n\n\nlet benchmark_end = flow.get(\"benchmark_end\")\n\nlet ticker = msg.ticker\nlet qty = msg.qty\nlet price = msg.price\nlet position = qty * price \nlet clientid = msg.clientid\n\nlet d = Date.now()\nlet newclient_order_id = \"SELL\" + ticker + d\n\n\nlet sql = \"update portfolio set benchmark_end = \" + benchmark_end + \", newclient_order_id = '\" + newclient_order_id + \"', newqty = \" + qty + \", newprice = \" +price+ \", newposition = \" + position + \" where clientorderid = '\" + clientid + \"';\" \n\nmsg.topic = sql\n//node.warn(msg.topic)\n\n// create a market order for Alpaca\nif (qty > 0){\n\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": \"sell\",\n    \"type\": \"market\",\n//    \"limit_price\": price,\n    \"client_order_id\": newclient_order_id,\n    \"time_in_force\": \"gtc\"\n};\n\n\n\nmsg.payload = temp\nnode.warn(msg.payload)\n    return msg;\n\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1380,
        "wires": [
            [
                "3963a876085b12f3",
                "e827be185a910cc0"
            ]
        ]
    },
    {
        "id": "958050334a650884",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "get price last trade",
        "func": "let price = 0\nlet item = 0\n\nlet qty = msg.qty\nlet clientid = msg.clientid\nlet ticker = msg.ticker\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\n\nmsg.price = price\n//node.warn(\"Symbol: \" +ticker+ \" Current Price: \" +price+ \" Qty: \" +qty+ \" Client ID: \" +clientid)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1300,
        "wires": [
            [
                "e4a2309345e52b9b"
            ]
        ]
    },
    {
        "id": "aff0239be5f1e5eb",
        "type": "polygon-last-trade-v3",
        "z": "821ee3246fe6f749",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 680,
        "y": 1300,
        "wires": [
            [
                "958050334a650884"
            ]
        ]
    },
    {
        "id": "ba90bbce95090ae3",
        "type": "function-npm",
        "z": "821ee3246fe6f749",
        "name": "Get current price",
        "func": "let symbol = msg.payload[\"ticker\"]\nlet tickertype = flow.get(\"tickertype\")\n\n\nif ( (tickertype == 'crypto') ){\nsymbol = \"X:\" +symbol\nsymbol = symbol.replace(\"/\", \"\");\n}\n\n//node.warn(\"Symbol: \" + symbol + \" Tickertype: \" + tickertype)\n\n\n\nlet cnt = 1\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n//node.warn(msg.payload)\n\nmsg.symbol = symbol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 1300,
        "wires": [
            [
                "aff0239be5f1e5eb"
            ]
        ]
    },
    {
        "id": "d1aa92d91cd77993",
        "type": "delay",
        "z": "821ee3246fe6f749",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1240,
        "wires": [
            [
                "d64790133ba3f366",
                "a820e5f7d907bb14"
            ]
        ]
    },
    {
        "id": "a820e5f7d907bb14",
        "type": "delay",
        "z": "821ee3246fe6f749",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1360,
        "wires": [
            [
                "ee9204eabe03d356"
            ]
        ]
    },
    {
        "id": "4d82d1cc47f1caf3",
        "type": "inject",
        "z": "821ee3246fe6f749",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 1580,
        "wires": [
            [
                "d1d1ec4a43d89f16"
            ]
        ]
    },
    {
        "id": "32a282b8d5f33f11",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "update portfolio",
        "func": "let d = new Date()\nd = d.toISOString().split('T')[0]\n//node.warn(\"Date: \" +d)\n\nlet created_at = msg.payload[\"created_at\"]\nlet shortdate = created_at.substring(0, 10)\n//node.warn(\"Shortdate: \" +shortdate)\n\nlet tickertype = flow.get(\"tickertype\")\n//node.warn(\"Tickertype: \" +tickertype)\n\nlet sql = ''\nlet temp = ''\n\nlet clientid = msg.clientid\n\n\nlet id = msg.payload[\"id\"]\nlet clientorderid = msg.payload[\"client_order_id\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\nlet position = filled_qty * filled_avg_price\n\nif ( tickertype == 'crypto'){\n      filled_qty = (filled_qty * .9975)\n}\n\nif ((status == 'filled') && (clientorderid == clientid)) { // filled  only\n\n\n      let sql = \"update portfolio SET  filled_type = '\" +type+ \"', filled_side = '\" + side + \"', filled_tif = '\" + time_in_force + \"', filled_status = '\" + status + \"', filled_at = '\" + filled_at + \"', filled_price = '\" + filled_avg_price + \"', filled_qty = '\" + filled_qty + \"', position = \" +position+ \" where clientorderid = '\" +clientorderid+ \"';\"\n\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1000,
        "wires": [
            [
                "3b07f505bd66c880"
            ]
        ]
    },
    {
        "id": "9f39ddcd45bfb927",
        "type": "mysql",
        "z": "821ee3246fe6f749",
        "mydb": "3564bcf07c743fdf",
        "name": "ptsapi",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "239b97af5b40e53d"
            ]
        ]
    },
    {
        "id": "8a41f5aafb4cc605",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "Get crypto list",
        "func": "let sql = \"select * from alpaca_assets where exchange = 'FTXU' and tradable = 'True';\"\nmsg.topic = sql\nnode.warn(sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 240,
        "wires": [
            [
                "9f39ddcd45bfb927"
            ]
        ]
    },
    {
        "id": "213439d3051e34b1",
        "type": "sqlite",
        "z": "821ee3246fe6f749",
        "mydb": "0bff986810513a86",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 850,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6c5006d4fbbb2527",
        "type": "change",
        "z": "821ee3246fe6f749",
        "name": "set tickers, number_of_tickers",
        "rules": [
            {
                "t": "set",
                "p": "number",
                "pt": "flow",
                "to": "count",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "239b97af5b40e53d",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "update algos with tickers",
        "func": "let id = flow.get(\"portfolioid\")\n//let id = msg.id\n\nlet tickers = \"\"\n\nfor (var i = 0; i < msg.payload.length; i++) {\n\n    let ticker = msg.payload[i][\"symbol\"]\n    tickers += ticker+ \", \"\n}\n\nlet count = msg.payload.length\nnode.warn(tickers)\nlet sql = \"update algos set tickers = '\" + tickers + \"' where id = \" + id\nnode.warn(sql)\nmsg.tickers = tickers\nmsg.count = count\nmsg.topic = sql\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 240,
        "wires": [
            [
                "6c5006d4fbbb2527",
                "213439d3051e34b1"
            ]
        ]
    },
    {
        "id": "2de973f7a94369b3",
        "type": "inject",
        "z": "821ee3246fe6f749",
        "name": "Store Strategy in algos table",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "25d5fb8fcf0116df"
            ]
        ]
    },
    {
        "id": "91e9a19d9525d40c",
        "type": "change",
        "z": "821ee3246fe6f749",
        "name": "set flow variable: ticker, qty,portfolioid",
        "rules": [
            {
                "t": "set",
                "p": "portfolioid",
                "pt": "flow",
                "to": "id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "name",
                "pt": "flow",
                "to": "name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "trades",
                "pt": "flow",
                "to": "trade",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "benchmark",
                "pt": "flow",
                "to": "benchmark",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "account",
                "pt": "flow",
                "to": "account",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickertype",
                "pt": "flow",
                "to": "tickertype",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "psize",
                "pt": "flow",
                "to": "psize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tickers",
                "pt": "flow",
                "to": "tickers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "ea66dfaba3c269e9",
        "type": "sqlite",
        "z": "821ee3246fe6f749",
        "mydb": "84af211eceb52712",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "algos",
        "x": 770,
        "y": 120,
        "wires": [
            [
                "91e9a19d9525d40c"
            ]
        ]
    },
    {
        "id": "e8b5df12a67b6d30",
        "type": "inject",
        "z": "821ee3246fe6f749",
        "name": "Display flow variables",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "3ed3d53ef5dfb929"
            ]
        ]
    },
    {
        "id": "3ed3d53ef5dfb929",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "Show variables",
        "func": "\nlet id = flow.get(\"portfolioid\")\nlet name = flow.get(\"name\")\nlet trade = flow.get(\"trades\")\nlet status = flow.get(\"status\")\nlet benchmark = flow.get(\"benchmark\")\nlet account = flow.get(\"account\")\nlet tickertype = flow.get(\"tickertype\")\nlet psize = flow.get(\"psize\")\nlet tickers = flow.get(\"tickers\")\nlet number = flow.get(\"number\")\n\nnode.warn(\"ID: \" +id+ \" Name: \" +name+ \" Trade: \" +trade+ \" Status: \" +status+ \" Benchmark: \" +benchmark+ \" Account: \" +account+ \" Tickertype: \" +tickertype+ \" Psize: \" +psize+ \" Tickers: \" +tickers+ \" Number of tickers: \" +number)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "fca085f5064e4051",
        "type": "comment",
        "z": "821ee3246fe6f749",
        "name": "Optionally: get list of tickers from the Data Center and add to algos table",
        "info": "",
        "x": 300,
        "y": 180,
        "wires": []
    },
    {
        "id": "abf473cca8d8e4a9",
        "type": "inject",
        "z": "821ee3246fe6f749",
        "name": "GO",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "8a41f5aafb4cc605"
            ]
        ]
    },
    {
        "id": "25d5fb8fcf0116df",
        "type": "function",
        "z": "821ee3246fe6f749",
        "name": "set and store portfolio and ticker variables",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nlet startdate = new Date().toJSON().slice(0, 10);\n\n//d = 1668531789756\nlet id = d\n\nlet tickers = 'ETH/USD'\nlet name = \"Trade ETHUSD every hour.\"\nlet account = 'paper'\nlet algotype = \"intraday\"\nlet status = \"running\"\nlet trade_freq = 24\nlet num_trades = 20\nlet portfolio = 0\nlet benchmark = 'SPY'\nlet tickertype = 'crypto'\nlet psize = 2000 // size of portfolio\nlet gain_today = 0\nlet gain = 0\nlet pctgain_today = 0\nlet pctgain = 0\nlet bench_start = 0\nlet bench_start_today = 0\nlet bench_end_today = 0\nlet info_ratio = 0\n\n\nmsg.id = id\nmsg.name = name\nmsg.trade = trade_freq\nmsg.number = num_trades\nmsg.status = status\nmsg.benchmark = benchmark\nmsg.account = account\nmsg.tickertype = tickertype\nmsg.psize = psize\nmsg.tickers = tickers\n\nlet sql = \"replace into algos (id,startdate,account,name,tickers,benchmark,algotype,status,trade_freq,num_trades,portfolio,gain_today,gain,pctgain_today,pctgain,bench_start,bench_start_today,bench_end_today,info_ratio)\"\nsql += \" values ('\" + id + \"','\" + startdate + \"','\" + account + \"','\" + name + \"','\" + tickers + \"','\" + benchmark + \"','\" + algotype + \"','\" + status + \"','\" + trade_freq + \"','\" + num_trades + \"','\" + portfolio + \"','\" + gain_today + \"','\" + gain + \"','\" + pctgain_today + \"','\" + pctgain + \"','\" + bench_start + \"','\" + bench_start_today + \"','\" + bench_end_today + \"','\" + info_ratio+ \"');\"\nmsg.topic = sql\nnode.warn(msg.topic)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "ea66dfaba3c269e9"
            ]
        ]
    },
    {
        "id": "5b6cf1bea24a64eb",
        "type": "comment",
        "z": "821ee3246fe6f749",
        "name": "Make sure you have stored flow variables before starting the script",
        "info": "",
        "x": 280,
        "y": 300,
        "wires": []
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKJ2C0D69I05F8OOFZB0",
        "paper": true
    },
    {
        "id": "6dd483b7c4c16042",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "0e15b606864a8f07",
        "type": "sqlitedb",
        "db": "/data/store/portfolios",
        "mode": "RWC"
    },
    {
        "id": "3564bcf07c743fdf",
        "type": "MySQLdatabase",
        "name": "ptsapi",
        "host": "ptsapi.cax8fspskl8t.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "ptsapi",
        "tz": "EST5EDT",
        "charset": "UTF8"
    },
    {
        "id": "0bff986810513a86",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    },
    {
        "id": "84af211eceb52712",
        "type": "sqlitedb",
        "db": "/data/store/algo",
        "mode": "RWC"
    }
]