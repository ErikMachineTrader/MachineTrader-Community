[
    {
        "id": "ec9a76017859526f",
        "type": "tab",
        "label": "Buy Crypto Portfolio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1f4eef46d6c2ecc9",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "define algo, select crypto assets",
        "func": "// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nmsg.algoid = d\nmsg.algo_name = 'Buy Crypto Portfolio'\nmsg.query = \"delete from tickers_paper where portfolioname like '\" +msg.algo_name+ \"';\"\n//msg.query = \"select * from alpaca_assets where exchange = 'CRYPTO' and tradable is true;\"\nnode.warn(msg.query)\n\nlet login = global.get(\"pta3aivelocity\")\nlet ticker = msg.tickers\nlet asset_class = 'cryptos' // stocks or crypto\nlet number = 25 // number of tickers in portfolio\nlet target = 1 // target profit pct\nlet account = 'paper'\nlet psize = 50000 // size of portfolio\nlet status = 'running'\nlet algo_type = 'interday'\nlet strategy_type = \"long\"\nlet benchmark = 'SPY'\n\n//node.warn(ticker)\n\nmsg.login = login\nmsg.ticker = ticker\nmsg.asset_class = asset_class\nmsg.number = number\nmsg.target = target\nmsg.account = account\nmsg.psize = psize\nmsg.status = status\nmsg.algo_type = algo_type\nmsg.benchmark = benchmark\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "a6b106aa082b14e7"
            ]
        ]
    },
    {
        "id": "a6b106aa082b14e7",
        "type": "postgresql",
        "z": "ec9a76017859526f",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 220,
        "wires": [
            [
                "33a96a71a6e5e5af"
            ]
        ]
    },
    {
        "id": "ffa4d6a2a20b3e66",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.alpaca_symbol\n\n\nlet algo_name = msg.algo_name\nlet number = msg.number\nlet psize = msg.psize\nlet price = msg.price\n\nlet qty = ((psize / number) / price)\nqty = qty.toFixed(0) // round to whole numbers for limit trades\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nclient_order_id = client_order_id.replace (\"/\",\"\") // excliude \"/\" from client_order_id\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\nif (qty < 100000){\n    node.warn(\"Qty: \" + qty + \" psize: \" + psize + \" number: \" + number + \" price: \" + price)\n\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'buy',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "28cd302777cdf6f3"
            ]
        ]
    },
    {
        "id": "564820d81ce89c8e",
        "type": "function-npm",
        "z": "ec9a76017859526f",
        "name": "Get price of trade trade",
        "func": "let symbol = (\"X:\" +msg.symbol)\n\n\nlet cnt = 1 // gets last trade\n\n/* Setup polygon request arguments */\nmsg.payload = {\n    symbol: symbol,\n    cnt: cnt,\n}\n\n\n//node.warn(symbol)\n//node.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "8bf14689d1025c61"
            ]
        ]
    },
    {
        "id": "b6ca17ef09b8502f",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": " last trade",
        "func": "let price = 0\nlet item = 0\n\n\nfor (item of msg.payload.results) {\n    price = item.price;\n    \n}\n\nprice = price.toFixed(2)\nmsg.price = price\n//node.warn(price)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 360,
        "wires": [
            [
                "ffa4d6a2a20b3e66"
            ]
        ]
    },
    {
        "id": "8bf14689d1025c61",
        "type": "polygon-last-trade-v3",
        "z": "ec9a76017859526f",
        "conf": "651f0aab10dc1632",
        "symbol": "",
        "x": 740,
        "y": 360,
        "wires": [
            [
                "b6ca17ef09b8502f"
            ]
        ]
    },
    {
        "id": "3d19b453cff22fd0",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "alpaca output",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nsubtag = ''\n\nif ( source == null) { source = 0}\nif (limit_price == null) { limit_price = 0 }\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nmsg.id = id\nnode.warn(\"ID: \" +id+ \" Status: \" +status)\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "676eeeecbad183a7",
        "type": "delay",
        "z": "ec9a76017859526f",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 360,
        "wires": [
            [
                "564820d81ce89c8e"
            ]
        ]
    },
    {
        "id": "28cd302777cdf6f3",
        "type": "alpaca-order",
        "z": "ec9a76017859526f",
        "conf": "c06cec183f9317f9",
        "x": 530,
        "y": 440,
        "wires": [
            [
                "3d19b453cff22fd0"
            ]
        ]
    },
    {
        "id": "8d39cdc01dd36b96",
        "type": "comment",
        "z": "ec9a76017859526f",
        "name": "CopyrightÂ©2023, MachineTrader.io Inc. All rights reserved.",
        "info": "",
        "x": 250,
        "y": 880,
        "wires": []
    },
    {
        "id": "73f419b6bcbf155f",
        "type": "comment",
        "z": "ec9a76017859526f",
        "name": "Create a Portfolio of Cryptos",
        "info": "",
        "x": 180,
        "y": 160,
        "wires": []
    },
    {
        "id": "ded3bf27f4fc71fd",
        "type": "inject",
        "z": "ec9a76017859526f",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "1f4eef46d6c2ecc9"
            ]
        ]
    },
    {
        "id": "4557ffb68a5d969f",
        "type": "comment",
        "z": "ec9a76017859526f",
        "name": "Please refer to the Flow Documentation detailed explanation of this flow.",
        "info": "",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "fd87e67240f0db86",
        "type": "pts_oauth_browser",
        "z": "ec9a76017859526f",
        "callback": "",
        "redirect": "",
        "name": "Documentation Link",
        "x": 380,
        "y": 80,
        "wires": []
    },
    {
        "id": "3d50527d644792ef",
        "type": "inject",
        "z": "ec9a76017859526f",
        "name": "Click Here to Open",
        "props": [
            {
                "p": "redirect",
                "v": "https://docs.google.com/document/d/1JrOxeQVfjAsRMMBDR6p9b-yRzCCs8m8frQoQvqwtjjw/view",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "fd87e67240f0db86"
            ]
        ]
    },
    {
        "id": "d7d361300b2ea683",
        "type": "comment",
        "z": "ec9a76017859526f",
        "name": "Close Portfolio",
        "info": "",
        "x": 140,
        "y": 940,
        "wires": []
    },
    {
        "id": "5689353a0188f1a5",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "select ticker for algo",
        "func": "msg.query = \"select symbol from tickers_paper where portfolioname = 'Buy Crypto Portfolio'\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 700,
        "wires": [
            [
                "5739d40b50e00449"
            ]
        ]
    },
    {
        "id": "0b82e802edf52d9d",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "get fresh list of tickers",
        "func": "let tickers = ''\n\nfor (let item of msg.payload) {\n    let ticker = item.symbol;\n    tickers += ticker+ \", \"\n}\n\n// portfolio_id is set to unixtime\nlet d = Date.now() // use to dynamically assign id\nmsg.id = d\nmsg.payload = tickers\n//node.warn(tickers)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 700,
        "wires": [
            [
                "4fda2ba438636b73"
            ]
        ]
    },
    {
        "id": "5739d40b50e00449",
        "type": "postgresql",
        "z": "ec9a76017859526f",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 700,
        "wires": [
            [
                "0b82e802edf52d9d"
            ]
        ]
    },
    {
        "id": "eb3295023995e82a",
        "type": "alpaca-position-query",
        "z": "ec9a76017859526f",
        "conf": "c06cec183f9317f9",
        "symbol": "",
        "x": 320,
        "y": 760,
        "wires": [
            [
                "9b07dac58426b383"
            ]
        ]
    },
    {
        "id": "cfd8c9d6508febbd",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\nlet symbol = msg.payload[\"symbol\"] \n//node.warn(\"Symbol: \" +symbol+ \" Price: \" + price + \" Qty: \" + qty + \" Side: \" + side + \" Profit: \" + profit)\n\nlet ticker = msg.ticker\n\n\nif ( ticker == symbol){\n//node.warn(\"Symbol: \" +symbol+ \" Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\nmsg.symbol = symbol\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 760,
        "wires": [
            [
                "d2e7ed162d7035cf"
            ]
        ]
    },
    {
        "id": "9b07dac58426b383",
        "type": "split",
        "z": "ec9a76017859526f",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 520,
        "y": 760,
        "wires": [
            [
                "cfd8c9d6508febbd"
            ]
        ]
    },
    {
        "id": "4fda2ba438636b73",
        "type": "split",
        "z": "ec9a76017859526f",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 880,
        "y": 700,
        "wires": [
            [
                "e06177ac9eee2e22"
            ]
        ]
    },
    {
        "id": "e06177ac9eee2e22",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "split tickers",
        "func": "let symbol = msg.payload\nsymbol = symbol.replace(\" \",\"\")\nsymbol = symbol.replace(\"/\", \"\")\nnode.warn(symbol) \nmsg.ticker = symbol\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 700,
        "wires": [
            [
                "eb3295023995e82a"
            ]
        ]
    },
    {
        "id": "d2e7ed162d7035cf",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "create Alpaca order ",
        "func": "let ticker = msg.symbol\nlet algo_name = msg.algo_name\nlet price = msg.price\nlet qty = msg.qty\n\n// cryptos only\nticker = ticker.replace(\"USD\", \"/USD\") // format for Alpaca\nticker = ticker.replace(\"LTCBTC\", \"LTC/BTC\") // format for Alpaca\n\n//qty = qty.toFixed(0) // round to whole numbers for limit trades\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nclient_order_id = client_order_id.replace(\"/\", \"\") // excliude \"/\" from client_order_id\n\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\n// create a order for Alpaca\nlet temp = ''\ntemp = {\n    \"symbol\": ticker,\n    \"qty\": qty,\n    \"side\": 'sell',\n    \"type\": 'market',\n    \"client_order_id\": client_order_id,\n//    \"limit_price\": price,\n//    \"subtag\": subtag,\n    \"time_in_force\": \"gtc\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "04f72662cf3a8f4a",
        "type": "alpaca-order",
        "z": "ec9a76017859526f",
        "conf": "c06cec183f9317f9",
        "x": 500,
        "y": 820,
        "wires": [
            [
                "c392b8b29cf0e324"
            ]
        ]
    },
    {
        "id": "c392b8b29cf0e324",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "display order response",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\nsubtag = ''\n\nif ( source == null) { source = 0}\nif (limit_price == null) { limit_price = 0 }\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nmsg.id = id\nnode.warn(\"Order ID: \" +id+ \"Status: \" +status)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "b7fdbece18799ce8",
        "type": "comment",
        "z": "ec9a76017859526f",
        "name": "Liquidate portfolio",
        "info": "",
        "x": 130,
        "y": 640,
        "wires": []
    },
    {
        "id": "e8fcd598f75d30d3",
        "type": "inject",
        "z": "ec9a76017859526f",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 700,
        "wires": [
            [
                "5689353a0188f1a5"
            ]
        ]
    },
    {
        "id": "256ba48227da8dde",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "insert into tickers_paper",
        "func": "let ticker = msg.payload[\"symbol\"]\nmsg.symbol = ticker\nmsg.alpaca_symbol = msg.payload[\"alpaca_symbol\"]\nlet name = msg.payload[\"name\"]\nmsg.query = \"insert into tickers_paper (id, symbol, name, portfolioname) values (\" + msg.algoid + \",'\" + ticker + \"','\" + name + \"','\" + msg.algo_name + \"') ON CONFLICT DO NOTHING;\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 280,
        "wires": [
            [
                "dac95d79ce5f6cb8"
            ]
        ]
    },
    {
        "id": "dac95d79ce5f6cb8",
        "type": "postgresql",
        "z": "ec9a76017859526f",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 280,
        "wires": [
            [
                "676eeeecbad183a7"
            ]
        ]
    },
    {
        "id": "f5bfd6a5c0a5367a",
        "type": "split",
        "z": "ec9a76017859526f",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 280,
        "wires": [
            [
                "256ba48227da8dde"
            ]
        ]
    },
    {
        "id": "9e9a56098c28e6c7",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "get crypto tickers",
        "func": "// portfolio_id is set to unixtime\nmsg.query = \"select * from alpaca_assets where exchange = 'CRYPTO' and tradable is true;\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "a7a12b403f4e8956"
            ]
        ]
    },
    {
        "id": "a7a12b403f4e8956",
        "type": "postgresql",
        "z": "ec9a76017859526f",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 480,
        "y": 280,
        "wires": [
            [
                "f5bfd6a5c0a5367a"
            ]
        ]
    },
    {
        "id": "33a96a71a6e5e5af",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "delete existing algo",
        "func": "msg.query = \"delete from algos where algo_name = '\" +msg.algo_name+ \"';\"\nnode.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 220,
        "wires": [
            [
                "8cd122e1d4406fac"
            ]
        ]
    },
    {
        "id": "8cd122e1d4406fac",
        "type": "postgresql",
        "z": "ec9a76017859526f",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 220,
        "wires": [
            [
                "e0173c9fd40d0c47"
            ]
        ]
    },
    {
        "id": "e0173c9fd40d0c47",
        "type": "function",
        "z": "ec9a76017859526f",
        "name": "add values to algos table",
        "func": "let id = msg.algoid\nlet ticker = msg.tickers\nlet algo_name = msg.algo_name\nlet login = msg.login\nlet asset_class = msg.asset_class\nlet number = msg.number\nlet target = msg.target\nlet account = msg.account\nlet psize = msg.psize\nlet algo_type = msg.algo_type\nlet status = msg.status\nlet benchmark = msg.benchmark\n\nlet benchmark_start = global.get(\"spy_current\")\nlet sql = \"insert into algos (login,id,account,algo_name,algo_type,status,portfolio_size,benchmark,benchmark_start) values \"\nsql += \"('\" + login + \"','\" + id + \"','\" + account + \"','\" + algo_name + \"','\" + algo_type + \"','\" + status + \"','\" + psize + \"','\" + benchmark + \"','\" + benchmark_start + \"') ON CONFLICT DO NOTHING;\"\nmsg.query = sql\nnode.warn(msg.query)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "2c844e6fc16beb4c"
            ]
        ]
    },
    {
        "id": "2c844e6fc16beb4c",
        "type": "postgresql",
        "z": "ec9a76017859526f",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1280,
        "y": 220,
        "wires": [
            [
                "9e9a56098c28e6c7"
            ]
        ]
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    },
    {
        "id": "651f0aab10dc1632",
        "type": "polygon-account",
        "name": "Polygon Key"
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "USE-OAUTH-OR-REPLACE",
        "paper": true
    }
]