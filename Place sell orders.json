[
    {
        "id": "1ecfe4ca8049da31",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "Flow 4: Place sell orders",
        "info": "",
        "x": 170,
        "y": 1380,
        "wires": []
    },
    {
        "id": "68198152ed48b69b",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "get list of tickers for this flow",
        "func": "let ticker = flow.get(\"ticker\")\n//node.warn(\"Ticker: \" +ticker)\nticker = 'AAPL'\nmsg.payload = ticker\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1460,
        "wires": [
            [
                "85221654f4dc4bc0"
            ]
        ]
    },
    {
        "id": "85221654f4dc4bc0",
        "type": "split",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 1460,
        "wires": [
            [
                "3f954a9d1212b784"
            ]
        ]
    },
    {
        "id": "8510e5eebb3d3491",
        "type": "inject",
        "z": "6f540ebd5ce1be5c",
        "name": "GO",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1460,
        "wires": [
            [
                "68198152ed48b69b"
            ]
        ]
    },
    {
        "id": "265b40feecc6a694",
        "type": "switch",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "property": "payload[\"symbol\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ticker",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "ticker",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1520,
        "wires": [
            [
                "d9dcb2cc37242429"
            ],
            []
        ]
    },
    {
        "id": "f18a841a0d3ef91b",
        "type": "split",
        "z": "6f540ebd5ce1be5c",
        "name": "",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 1520,
        "wires": [
            [
                "265b40feecc6a694"
            ]
        ]
    },
    {
        "id": "3f954a9d1212b784",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "split tickers",
        "func": "let ticker = msg.payload\n//node.warn(ticker) \nmsg.ticker = ticker\n//msg.pos = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1460,
        "wires": [
            [
                "5941ef6a34593c3e"
            ]
        ]
    },
    {
        "id": "f4b6d2e0c3786ebc",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "create Alpaca buy order ",
        "func": "let pos = flow.get(\"pos\")\nlet ticker = msg.ticker\nlet qty = msg.qty\nlet algo_name = flow.get(\"algo_name\")\nlet price = msg.price\nlet side = msg.side\nlet profit = msg.profit\n\nlet number = flow.get(\"number\")\nlet psize = flow.get(\"psize\")\n//let cprice = flow.get(\"cprice\")\n\nlet cprice = msg.cprice\ncprice = +cprice\n\n\n\nlet pqty = ((psize / number) / cprice)\n\nqty = +qty\n//qty = qty.toFixed(0) // round to whole numbers for limit trades\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = ticker + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet subtag = algo_name\n\nlet action = ''\n\n\nlet temp = ''\n\nlet order_type = 'market' // select limit for limit orders\n\nif ( (qty > 0 && order_type == 'market')){\n\ntemp = {\n            \"symbol\": ticker,\n            \"qty\": qty,\n            \"side\": \"sell\",\n            \"type\": order_type,\n            \"client_order_id\": client_order_id,\n            //\"limit_price\": price,  \n            //    \"subtag\": subtag,\n            \"time_in_force\": \"gtc\"\n        };\n}\n\nif ((qty > 0 && order_type == 'limit')) {\n\n    temp = {\n        \"symbol\": ticker,\n        \"qty\": qty,\n        \"side\": \"sell\",\n        \"type\": order_type,\n        \"client_order_id\": client_order_id,\n        \"limit_price\": price,  \n        //    \"subtag\": subtag,\n        \"time_in_force\": \"gtc\"\n    };\n}\n\nmsg.payload = temp\nnode.warn(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1580,
        "wires": [
            [
                "5c8bd10e3c7e29e8"
            ]
        ]
    },
    {
        "id": "d9dcb2cc37242429",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "Get values from positions",
        "func": "let qty = 0\nlet pos = 0\n\nqty = msg.payload[\"qty\"]\nlet profit = msg.payload[\"unrealized_pl\"]\nlet price = msg.payload[\"current_price\"]\nlet side = msg.payload[\"side\"]\n\nnode.warn(\"Price: \" + price + \" Qty: \" + qty + \" Side: \" + side+ \" Profit: \" +profit)\n\nmsg.price = price\nmsg.qty = qty\nmsg.profit = profit\nmsg.side = side\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1520,
        "wires": [
            [
                "f4b6d2e0c3786ebc"
            ]
        ]
    },
    {
        "id": "5941ef6a34593c3e",
        "type": "alpaca-position-query",
        "z": "6f540ebd5ce1be5c",
        "conf": "e535f42f1df1b25f",
        "x": 330,
        "y": 1520,
        "wires": [
            [
                "f18a841a0d3ef91b"
            ]
        ]
    },
    {
        "id": "5c8bd10e3c7e29e8",
        "type": "alpaca-order",
        "z": "6f540ebd5ce1be5c",
        "conf": "e535f42f1df1b25f",
        "x": 490,
        "y": 1580,
        "wires": [
            [
                "25dfb65f0edeaef9"
            ]
        ]
    },
    {
        "id": "9907efe325fd989a",
        "type": "postgresql",
        "z": "6f540ebd5ce1be5c",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 920,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "25dfb65f0edeaef9",
        "type": "function",
        "z": "6f540ebd5ce1be5c",
        "name": "insert into order_confirms table",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\nsubtag = flow.get(\"algo_name\")\n\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nlet sql = \"insert into order_confirms(id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, status, subtag, source,extended_hours) values \"\nsql += \"('\" + id + \"', '\" + client_order_id + \"', '\" + created_at + \"', '\" + updated_at + \"', '\" + submitted_at + \"', '\" + asset_id + \"', '\" + symbol + \"', '\" + asset_class + \"', '\" + qty + \"', '\" + order_type + \"', '\" + type + \"', '\" + side + \"', '\" + time_in_force + \"', '\" + status + \"', '\" + subtag + \"', '\" + source + \"', '\" + extended_hours+ \"'); \" \n\nmsg.query = sql\nnode.warn(msg.query)\nmsg.id = id\n//msg.sql = \"truncate table temp_ids\"\n//node.warn(msg.sql)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1580,
        "wires": [
            [
                "9907efe325fd989a"
            ]
        ]
    },
    {
        "id": "7a9784b568499377",
        "type": "comment",
        "z": "6f540ebd5ce1be5c",
        "name": "flow.get tickers",
        "info": "",
        "x": 400,
        "y": 1420,
        "wires": []
    },
    {
        "id": "e535f42f1df1b25f",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PK4TI6GDJ7NN146CF8YA",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]